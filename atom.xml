<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Calpa</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://calpa.me/"/>
  <updated>2017-04-20T15:17:54.000Z</updated>
  <id>https://calpa.me/</id>
  
  <author>
    <name>Calpa</name>
    <email>calpaliu@gmail.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Bootstrap v4 源碼分析(1)</title>
    <link href="https://calpa.me/2017/04/20/bootstrap-code-analysis-1/"/>
    <id>https://calpa.me/2017/04/20/bootstrap-code-analysis-1/</id>
    <published>2017-04-20T13:37:00.000Z</published>
    <updated>2017-04-20T15:17:54.000Z</updated>
    
    <content type="html"><![CDATA[<p>Bootstrap是一個Twitter推出的CSS框架，也是我第一個使用的CSS框架。本文使用最新版本v4.0.0-alpha.6，透過閱讀完整的源代碼，我們能夠更加了解Bootstrap的優缺點，以及如何自製Bootstrap輪子。</p>
<h2 id="為什麼使用Bootstrap"><a href="#為什麼使用Bootstrap" class="headerlink" title="為什麼使用Bootstrap"></a>為什麼使用Bootstrap</h2><p>透過使用Bootstrap框架，我們可以提高開發效率，避免重複製造輪子。</p>
<h2 id="閱讀本文所需知識"><a href="#閱讀本文所需知識" class="headerlink" title="閱讀本文所需知識"></a>閱讀本文所需知識</h2><ol>
<li>一顆好奇心</li>
<li>基本Bootstrap知識</li>
<li>基本SCSS/SASS知識</li>
</ol>
<h2 id="Bootstrap4-的新特性"><a href="#Bootstrap4-的新特性" class="headerlink" title="Bootstrap4 的新特性"></a>Bootstrap4 的新特性</h2><p>對比起Bootstrap3，Bootstrap4作出不少改動，以下是當中比較影響大的特性：</p>
<ol>
<li>默認使用Flexbox</li>
<li>使用flexbox重新製作navbar，提高可塑性和客製化能力。</li>
<li><code>.card</code>代替<code>.panel</code>以及<code>.well</code></li>
<li>能夠適應五種長度: xs, sm, md, lg, xl</li>
<li>更加大的默認字體: 16px</li>
<li>不再自帶Glyphicons圖案包。。。</li>
<li>使用SCSS開發</li>
</ol>
<h2 id="Bootstarp-源碼結構"><a href="#Bootstarp-源碼結構" class="headerlink" title="Bootstarp 源碼結構"></a>Bootstarp 源碼結構</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">bootstrap/  #v4-dev branch</div><div class="line">├── build/</div><div class="line">├── dist/ # 預先編譯的CSS</div><div class="line">│   ├── css/</div><div class="line">│   └── js/</div><div class="line">├── docs/ # 文檔</div><div class="line">    └── examples/ # 官方例子</div><div class="line">├── js/</div><div class="line">    ├── dist/</div><div class="line">    ├── src/</div><div class="line">    └── tests/</div><div class="line">├── nuget/</div><div class="line">└── scss/ # 本文開始入手的地方</div><div class="line">    ├── mixins/</div><div class="line">    └── utilities/</div></pre></td></tr></table></figure>
<h2 id="Bootstrap-Grid架構"><a href="#Bootstrap-Grid架構" class="headerlink" title="Bootstrap Grid架構"></a>Bootstrap Grid架構</h2><p>Bootstrap使用<code>container</code>-&gt;<code>row</code>-&gt;<code>col-*-number</code>的架構。</p>
<h2 id="利用SCSS理解-Container"><a href="#利用SCSS理解-Container" class="headerlink" title="利用SCSS理解 Container"></a>利用SCSS理解 Container</h2><p>在<a href="https://github.com/twbs/bootstrap/blob/094b3a129349a41b1319b0870fb3daa9459b7284/scss/_grid.scss" rel="external nofollow noopener noreferrer" target="_blank">_grid.scss</a>的一開始代碼段落中，我們可以看到<code>.container</code>, <code>.fluid-container</code>這兩個容器。如果 $enable-grid-classes是true的話，就可以使用<code>.container</code>以及<code>.fluid-container</code>。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">@if $enable-grid-classes &#123;</div><div class="line">  .container &#123;</div><div class="line">    @include make-container();</div><div class="line">    @include make-container-max-widths();</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">@if $enable-grid-classes &#123;</div><div class="line">  .container-fluid &#123;</div><div class="line">    width: 100%;</div><div class="line">    @include make-container();</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="理解Row"><a href="#理解Row" class="headerlink" title="理解Row"></a>理解Row</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">@if $enable-grid-classes &#123;</div><div class="line">  @include make-row();</div><div class="line">  // 省略 .no-gutters</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="用到的函式-mixins"><a href="#用到的函式-mixins" class="headerlink" title="用到的函式 (mixins)"></a>用到的函式 (mixins)</h2><h3 id="container"><a href="#container" class="headerlink" title="container"></a>container</h3><h4 id="make-container-grid-scss"><a href="#make-container-grid-scss" class="headerlink" title="make-container (grid.scss)"></a>make-container (grid.scss)</h4><p>它們會調用<a href="https://github.com/twbs/bootstrap/blob/2436ad589cfc235c84160fe14e4cc4ec97a9c5ca/scss/mixins/_grid.scss" rel="external nofollow noopener noreferrer" target="_blank">mixins/_grid.scss </a>裡面的<a href="https://github.com/twbs/bootstrap/blob/2436ad589cfc235c84160fe14e4cc4ec97a9c5ca/scss/mixins/_grid.scss#L5" rel="external nofollow noopener noreferrer" target="_blank">@mixin make-container</a>以及<a href="https://github.com/twbs/bootstrap/blob/2436ad589cfc235c84160fe14e4cc4ec97a9c5ca/scss/mixins/_grid.scss#L20" rel="external nofollow noopener noreferrer" target="_blank">@mixin make-container-max-widths</a>。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">@mixin make-container($gutters: $grid-gutter-widths) &#123;</div><div class="line">  margin-right: auto;</div><div class="line">  margin-left: auto;</div><div class="line"></div><div class="line">  @each $breakpoint in map-keys($gutters) &#123;</div><div class="line">    @include media-breakpoint-up($breakpoint) &#123;</div><div class="line">      $gutter: map-get($gutters, $breakpoint);</div><div class="line">      padding-right: ($gutter / 2);</div><div class="line">      padding-left:  ($gutter / 2);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#map_get-instance_method" rel="external nofollow noopener noreferrer" target="_blank">map-get</a>則是Sass裡面的一個函數，輸入一個map以及key，如果map裡面有該key的話，就會返回key的值。找不到的話就會返回null。</p>
<h4 id="grid-gutter-widths-variables-scss"><a href="#grid-gutter-widths-variables-scss" class="headerlink" title="$grid-gutter-widths (variables.scss)"></a>$grid-gutter-widths (variables.scss)</h4><p>如果沒有設置$gutters，它就會默認是<a href="https://github.com/twbs/bootstrap/blob/dd0ce3e4b2a89f245ee608a1acc9f848cf8c833a/scss/_variables.scss" rel="external nofollow noopener noreferrer" target="_blank">$grid-gutter-widths</a>，以下是$grid-gutter-widths的包含的數值: xs, sm, md, lg, xl。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">$grid-gutter-width-base:     30px !default;</div><div class="line">$grid-gutter-widths: (</div><div class="line">  xs: $grid-gutter-width-base, // 30px</div><div class="line">  sm: $grid-gutter-width-base, // 30px</div><div class="line">  md: $grid-gutter-width-base, // 30px</div><div class="line">  lg: $grid-gutter-width-base, // 30px</div><div class="line">  xl: $grid-gutter-width-base  // 30px</div><div class="line">) !default;</div></pre></td></tr></table></figure>
<h4 id="grid-breakpoints-variables-scss"><a href="#grid-breakpoints-variables-scss" class="headerlink" title="$grid-breakpoints (variables.scss)"></a>$grid-breakpoints (variables.scss)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$grid-breakpoints: (</div><div class="line">  xs: 0,</div><div class="line">  sm: 576px,</div><div class="line">  md: 768px,</div><div class="line">  lg: 992px,</div><div class="line">  xl: 1200px</div><div class="line">) !default;</div></pre></td></tr></table></figure>
<p>它定義不同設備的屏幕寬度，用於響應式設計(Responsive Web Design)。</p>
<h4 id="media-breakpoint-up-breakpoints-scss"><a href="#media-breakpoint-up-breakpoints-scss" class="headerlink" title="media-breakpoint-up (breakpoints.scss)"></a>media-breakpoint-up (breakpoints.scss)</h4><p>而media-breakpoint-up則是在<a href="https://github.com/twbs/bootstrap/blob/7ca078da815320c75862b6cf25f46ce706570279/scss/mixins/_breakpoints.scss#L54" rel="external nofollow noopener noreferrer" target="_blank">mixins/_breakpoints.scss 第54行</a>，用處是返回最短寬度的內容。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">@mixin media-breakpoint-up($name, $breakpoints: $grid-breakpoints) &#123;</div><div class="line">  $min: breakpoint-min($name, $breakpoints);</div><div class="line">  @if $min &#123;</div><div class="line">    @media (min-width: $min) &#123;</div><div class="line">      @content;</div><div class="line">    &#125;</div><div class="line">  &#125; @else &#123;</div><div class="line">    @content;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="breakpoint-min"><a href="#breakpoint-min" class="headerlink" title="breakpoint-min()"></a>breakpoint-min()</h4><p><code>breakpoint-min()</code>可以在<a href="https://github.com/twbs/bootstrap/blob/7ca078da815320c75862b6cf25f46ce706570279/scss/mixins/_breakpoints.scss#L26" rel="external nofollow noopener noreferrer" target="_blank">mixins/_breakpoints.scss 第26行</a>找到，它的用處是返回最短斷點寬度或者null。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">@function breakpoint-min($name, $breakpoints: $grid-breakpoints) &#123;</div><div class="line">  $min: map-get($breakpoints, $name);</div><div class="line">  @return if($min != 0, $min, null);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="row"><a href="#row" class="headerlink" title="row"></a>row</h3><h4 id="make-row-grid-scss"><a href="#make-row-grid-scss" class="headerlink" title="make-row() (grid.scss)"></a>make-row() (grid.scss)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">@mixin make-row($gutters: $grid-gutter-widths) &#123;</div><div class="line">  display: flex;</div><div class="line">  flex-wrap: wrap;</div><div class="line"></div><div class="line">  @each $breakpoint in map-keys($gutters) &#123;</div><div class="line">    @include media-breakpoint-up($breakpoint) &#123;</div><div class="line">      $gutter: map-get($gutters, $breakpoint);</div><div class="line">      margin-right: ($gutter / -2);</div><div class="line">      margin-left:  ($gutter / -2);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>至於Column，我們下次再說吧。。。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Bootstrap是一個Twitter推出的CSS框架，也是我第一個使用的CSS框架。本文使用最新版本v4.0.0-alpha.6，透過閱讀完整的源代碼，我們能夠更加了解Bootstrap的優缺點，以及如何自製Bootstrap輪子。&lt;/p&gt;
&lt;h2 id=&quot;為什麼使用Bo
    
    </summary>
    
    
      <category term="Web" scheme="https://calpa.me/Tags/Web/"/>
    
      <category term="Bootstrap" scheme="https://calpa.me/Tags/Bootstrap/"/>
    
  </entry>
  
  <entry>
    <title>利用CSS畫圓</title>
    <link href="https://calpa.me/2017/04/12/use-css-to-draw-circle/"/>
    <id>https://calpa.me/2017/04/12/use-css-to-draw-circle/</id>
    <published>2017-04-12T14:00:00.000Z</published>
    <updated>2017-04-14T13:19:21.000Z</updated>
    
    <content type="html"><![CDATA[<p>用CSS畫一個圓是很簡單的，用border-radius就可以了。</p>
<iframe height="293" scrolling="no" title="Circle" src="//codepen.io/calpa/embed/xdxOvV/?height=293&theme-id=0&default-tab=css,result&embed-version=2" frameborder="no" allowtransparency="true" allowfullscreen="true" style="width: 100%;"></iframe>

<p>但是其實border-radius可以加/來獲得特別效果XD</p>
<iframe height="265" scrolling="no" title="border-radius" src="//codepen.io/calpa/embed/eWmVwy/?height=265&theme-id=0&default-tab=css,result&embed-version=2" frameborder="no" allowtransparency="true" allowfullscreen="true" style="width: 100%;"></iframe>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;用CSS畫一個圓是很簡單的，用border-radius就可以了。&lt;/p&gt;
&lt;iframe height=&quot;293&quot; scrolling=&quot;no&quot; title=&quot;Circle&quot; src=&quot;//codepen.io/calpa/embed/xdxOvV/?height=293
    
    </summary>
    
    
      <category term="CSS" scheme="https://calpa.me/Tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>【React Native】安裝Android Apk而無需連接伺服器的方法</title>
    <link href="https://calpa.me/2017/04/11/react-native-run-android/"/>
    <id>https://calpa.me/2017/04/11/react-native-run-android/</id>
    <published>2017-04-11T09:41:00.000Z</published>
    <updated>2017-04-11T13:48:30.000Z</updated>
    
    <content type="html"><![CDATA[<p>正常情況下，我們會用命令<code>react-native run-android</code>來在自己的電話中測試app，但是這個方法需要連接電腦。</p>
<p>我們可以利用以下命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">react-native bundle --dev false --platform android --entry-file index.android.js --bundle-output ./android/app/build/intermediates/assets/debug/index.android.bundle --assets-dest ./android/app/build/intermediates/res/merged/debug</div><div class="line"></div><div class="line">cd android</div><div class="line">./gradlew assembleDebug</div></pre></td></tr></table></figure></p>
<h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><ol>
<li><a href="http://stackoverflow.com/questions/35283959/build-and-install-unsigned-apk-on-device-without-the-development-server" rel="external nofollow noopener noreferrer" target="_blank">Build and Install unsigned apk on device without the development server? - stackoverflow</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;正常情況下，我們會用命令&lt;code&gt;react-native run-android&lt;/code&gt;來在自己的電話中測試app，但是這個方法需要連接電腦。&lt;/p&gt;
&lt;p&gt;我們可以利用以下命令：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table
    
    </summary>
    
    
      <category term="React Native" scheme="https://calpa.me/Tags/React-Native/"/>
    
  </entry>
  
  <entry>
    <title>利用ssh連接Github的方法</title>
    <link href="https://calpa.me/2017/04/11/github-ssh/"/>
    <id>https://calpa.me/2017/04/11/github-ssh/</id>
    <published>2017-04-11T08:30:00.000Z</published>
    <updated>2017-04-11T13:46:43.000Z</updated>
    
    <content type="html"><![CDATA[<p>其實很簡單，按照下面打就是了。。。</p>
<ol>
<li><code>ls -la ~/.ssh/</code></li>
<li><code>cat ~/.ssh/id_rsa.pub</code> 複製貼上到Github SSH Page</li>
<li><code>ssh git@github.com</code></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;其實很簡單，按照下面打就是了。。。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;ls -la ~/.ssh/&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cat ~/.ssh/id_rsa.pub&lt;/code&gt; 複製貼上到Github SSH Page&lt;/li&gt;
&lt;li&gt;&lt;cod
    
    </summary>
    
    
      <category term="Github" scheme="https://calpa.me/Tags/Github/"/>
    
  </entry>
  
  <entry>
    <title>常見的14種HTTP狀態碼</title>
    <link href="https://calpa.me/2017/04/08/common-http-status-code/"/>
    <id>https://calpa.me/2017/04/08/common-http-status-code/</id>
    <published>2017-04-08T06:10:00.000Z</published>
    <updated>2017-04-08T06:29:23.000Z</updated>
    
    <content type="html"><![CDATA[<p>當用戶向伺服器發出請求時，狀態碼能夠描述伺服器返回的結果。</p>
<ol>
<li><p>2XX 成功</p>
<ol>
<li>200 OK</li>
<li>204 No Content</li>
<li>206 Partial Content</li>
</ol>
</li>
<li><p>3XX 重新導向</p>
<ol>
<li>301 Moved Permanently</li>
<li>302 Found</li>
<li>303 See Other</li>
<li>304 Not Modified</li>
<li>307 Temporary Redirect</li>
</ol>
</li>
<li><p>4XX 客戶端錯誤</p>
<ol>
<li><p>400 Bad Request</p>
<p>伺服器無法理解當前請求</p>
</li>
<li>401 Unauthorized</li>
<li>403 Forbidden</li>
<li>404 Not Found</li>
</ol>
</li>
<li><p>5XX 伺服器錯誤</p>
<ol>
<li>500 Internal Server Error</li>
<li>503 Service Unavailable</li>
</ol>
</li>
</ol>
<h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><ol>
<li>圖解HTTP</li>
<li><a href="https://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html" rel="external nofollow noopener noreferrer" target="_blank">10 Status Code Definitions</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;當用戶向伺服器發出請求時，狀態碼能夠描述伺服器返回的結果。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;2XX 成功&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;200 OK&lt;/li&gt;
&lt;li&gt;204 No Content&lt;/li&gt;
&lt;li&gt;206 Partial Content&lt;/li&gt;
&lt;/ol&gt;

    
    </summary>
    
    
      <category term="HTTP" scheme="https://calpa.me/Tags/HTTP/"/>
    
  </entry>
  
  <entry>
    <title>前端工程師的入門書單</title>
    <link href="https://calpa.me/2017/04/05/books/"/>
    <id>https://calpa.me/2017/04/05/books/</id>
    <published>2017-04-05T14:51:00.000Z</published>
    <updated>2017-04-19T15:46:27.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://i.imgur.com/CTfB7K9.jpg" alt="Books"></p>
<p>在二十一世紀資訊發達的年代，我們很容易在互聯網上獲取這些書本的內容，而且能夠獲取書籍的最新內容。比如說vczero寫的<a href="https://github.com/vczero/react-native-lesson" rel="external nofollow noopener noreferrer" target="_blank">React Native入门与实战</a>，作者已經在Github上放上自己的書本內容，以及代碼。雖然我在電腦和手機里已經看過這些書，但當我拿起實體書的時候，那種感覺是非常不同的。</p>
<p>以下這些書都是很值得去閱讀（開坑）的：</p>
<ol>
<li><p>Javascript 高級程序設計(第三版)</p>
<p>我在去年的暑假看過一次這本書，感覺能夠學到很多Javascript的細節。</p>
</li>
<li><p>CSS揭秘</p>
</li>
<li><p>圖解HTTP</p>
<p><a href="https://calpa.me/2017/04/08/common-http-status-code/">常見的14種HTTP狀態碼</a></p>
</li>
<li><p>人月神話</p>
</li>
<li><p>Clean Code</p>
</li>
<li><p>Code Complete</p>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://i.imgur.com/CTfB7K9.jpg&quot; alt=&quot;Books&quot;&gt;&lt;/p&gt;
&lt;p&gt;在二十一世紀資訊發達的年代，我們很容易在互聯網上獲取這些書本的內容，而且能夠獲取書籍的最新內容。比如說vczero寫的&lt;a href=&quot;https:/
    
    </summary>
    
    
      <category term="Web" scheme="https://calpa.me/Tags/Web/"/>
    
  </entry>
  
  <entry>
    <title>Git多人合作開發工作流程</title>
    <link href="https://calpa.me/2017/04/01/git-workflow/"/>
    <id>https://calpa.me/2017/04/01/git-workflow/</id>
    <published>2017-04-01T14:22:00.000Z</published>
    <updated>2017-04-05T15:27:53.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h2><ol>
<li><code>git fetch</code> 確認遠端數據庫的內容</li>
<li><code>git checkout dev</code> 從現有支線轉到開發支線</li>
<li><code>git pull</code> 下載遠端數據庫到本地</li>
<li>永遠使用<code>git pull</code>之後才使用<code>git push</code></li>
<li><code>git commit -m &quot;Message&quot;</code> 很實用。。。</li>
<li><code>git checkout -b &quot;New Branch&quot;</code> 可以直接開新支線，並切換到那條支線上</li>
<li><code>git push origin &quot;updated-branch&quot;</code> 就可以推上去遠端數據庫</li>
</ol>
<h2 id="fetch"><a href="#fetch" class="headerlink" title="fetch"></a>fetch</h2><p>使用<code>fetch</code>指令可以避免更改本地數據庫，同時更新其他人更新遠端數據庫後的內容。</p>
<h2 id="checkout"><a href="#checkout" class="headerlink" title="checkout"></a>checkout</h2><p><code>checkout</code>切換本地數據庫支線，正常情況下應該建立超過兩條支線，比如說<code>master</code>只用作發佈更新版本，<code>dev</code>用作開發。</p>
<p>個人開發項目和與他人一同開發項目是兩回事來的。。。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;流程&quot;&gt;&lt;a href=&quot;#流程&quot; class=&quot;headerlink&quot; title=&quot;流程&quot;&gt;&lt;/a&gt;流程&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;code&gt;git fetch&lt;/code&gt; 確認遠端數據庫的內容&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git checkout de
    
    </summary>
    
    
      <category term="Git" scheme="https://calpa.me/Tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>Interview後記</title>
    <link href="https://calpa.me/2017/03/27/interview/"/>
    <id>https://calpa.me/2017/03/27/interview/</id>
    <published>2017-03-27T06:42:00.000Z</published>
    <updated>2017-03-27T07:22:14.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="面試問題："><a href="#面試問題：" class="headerlink" title="面試問題："></a>面試問題：</h2><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><ol>
<li>請自我介紹</li>
<li>為什麼會從前端開始？</li>
<li>請畫出現在項目的技術圖，並簡單介紹一下</li>
<li>你最近在探索什麼新技術？</li>
</ol>
<h3 id="技術"><a href="#技術" class="headerlink" title="技術"></a>技術</h3><ol>
<li>NoSQL和SQL的比較，優點和缺點？</li>
<li>哪一個性能比較好？</li>
<li>HTTPS如何加密</li>
</ol>
<h2 id="感想"><a href="#感想" class="headerlink" title="感想"></a>感想</h2><p>原本預約了兩點面試的，結果我一點多就去到，面試官讓我在一旁坐坐。感覺這次面試氣氛不錯，但是不知道為什麼每次面試，大多時間都是問Database的問題。。。</p>
<h2 id="行動"><a href="#行動" class="headerlink" title="行動"></a>行動</h2><p>Learning by Coding，動手做項目學習吧。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;面試問題：&quot;&gt;&lt;a href=&quot;#面試問題：&quot; class=&quot;headerlink&quot; title=&quot;面試問題：&quot;&gt;&lt;/a&gt;面試問題：&lt;/h2&gt;&lt;h3 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背
    
    </summary>
    
    
      <category term="Interview" scheme="https://calpa.me/Tags/Interview/"/>
    
  </entry>
  
  <entry>
    <title>Javascript中的this入門</title>
    <link href="https://calpa.me/2017/03/25/js-this/"/>
    <id>https://calpa.me/2017/03/25/js-this/</id>
    <published>2017-03-25T04:44:00.000Z</published>
    <updated>2017-04-17T13:44:30.000Z</updated>
    
    <content type="html"><![CDATA[<p>首先我們要理解調用函數的方法，最起碼可以用下面兩個方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">func(arg1, arg2);</div><div class="line">func.call(context, arg1, arg2);</div></pre></td></tr></table></figure></p>
<p>之前我也沒怎麼見過後者，基本上都是直接call func的。後者<code>func(arg1, arg2)</code> 等於 <code>func.call(undefined, arg1, arg2)</code>。簡單來說，this就是context。如果context沒有定義的話，它會被定義為一個全局對象，比如說global。在MDN的文檔有這一句: <code>if the method is a function in non-strict mode code, null and undefined will be replaced with the global object and primitive values will be converted to objects</code>。</p>
<p>如果不想要this是global的話，給予context一個對象就可以了：<br><code>func.call(obj, arg1, arg2)</code></p>
<h2 id="全局上下文"><a href="#全局上下文" class="headerlink" title="全局上下文"></a>全局上下文</h2><p>在全局中，無論是否在嚴格模式下(Strict mode)，<code>this</code>都是代表全局對象。</p>
<h3 id="瀏覽器"><a href="#瀏覽器" class="headerlink" title="瀏覽器"></a>瀏覽器</h3><ol>
<li><code>this.document</code>指向<code>document</code></li>
<li>全局對象為<code>window</code></li>
</ol>
<h3 id="Node-js"><a href="#Node-js" class="headerlink" title="Node.js"></a>Node.js</h3><p>全局對象為<code>global</code></p>
<p>直接運用函數的話，this會指向global。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">function test() &#123;</div><div class="line">  this.x = 1;</div><div class="line">&#125;</div><div class="line"></div><div class="line">test();</div><div class="line"></div><div class="line">console.log(this.x); // 1</div></pre></td></tr></table></figure></p>
<p>如果是生成一個對象的話，this會指向這個對象而不是global。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">function Car() &#123;</div><div class="line">  this.color = &apos;red&apos;;</div><div class="line">&#125;</div><div class="line"></div><div class="line">var c = new Car();</div><div class="line"></div><div class="line">console.log(this.color); // undefined</div><div class="line">console.log(c.color); // red</div></pre></td></tr></table></figure></p>
<p>下次遇到問題的話，我還是MDN資料吧，裡面寫得很詳細。</p>
<h2 id="問題"><a href="#問題" class="headerlink" title="問題"></a>問題</h2><p>在Node.js中，為什麼this.global === this.global.global的返回值為true？</p>
<h2 id="延伸思考"><a href="#延伸思考" class="headerlink" title="延伸思考"></a>延伸思考</h2><ol>
<li>Function.prototype.apply()</li>
<li>Function.prototype.bind()</li>
</ol>
<h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><ol>
<li><a href="this MDN技術文">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/this</a></li>
<li><a href="Function.prototype.call MDN技術文">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/call</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;首先我們要理解調用函數的方法，最起碼可以用下面兩個方法：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;l
    
    </summary>
    
    
      <category term="Javascript" scheme="https://calpa.me/Tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>Hexo sitemap 簡單更改域名的方法</title>
    <link href="https://calpa.me/2017/02/26/hexo-url/"/>
    <id>https://calpa.me/2017/02/26/hexo-url/</id>
    <published>2017-02-26T06:45:00.000Z</published>
    <updated>2017-04-03T09:42:20.000Z</updated>
    
    <content type="html"><![CDATA[<p>如果沒有做任何配置的話，<code>hexo g</code>的時候會自動輸出一個<code>sitemap.xml</code>。<br>但是現在域名不同了，需要一點更改。。。</p>
<h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><ol>
<li>打開_config.yml</li>
<li>修改<code>url:</code>就可以了</li>
<li><code>hexo clean</code></li>
<li><code>hexo g</code></li>
</ol>
<h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><ol>
<li><a href="https://segmentfault.com/q/1010000004659915" rel="external nofollow noopener noreferrer" target="_blank">hexo-generator-sitemap 生成的sitemap如何配置自定义的域名？</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;如果沒有做任何配置的話，&lt;code&gt;hexo g&lt;/code&gt;的時候會自動輸出一個&lt;code&gt;sitemap.xml&lt;/code&gt;。&lt;br&gt;但是現在域名不同了，需要一點更改。。。&lt;/p&gt;
&lt;h2 id=&quot;方法&quot;&gt;&lt;a href=&quot;#方法&quot; class=&quot;headerlink
    
    </summary>
    
    
      <category term="Hexo" scheme="https://calpa.me/Tags/Hexo/"/>
    
      <category term="SEO" scheme="https://calpa.me/Tags/SEO/"/>
    
  </entry>
  
  <entry>
    <title>Hexo優化之為外部鏈接添加nofollow屬性</title>
    <link href="https://calpa.me/2017/02/26/hexo-seo-nofollow/"/>
    <id>https://calpa.me/2017/02/26/hexo-seo-nofollow/</id>
    <published>2017-02-25T16:11:03.000Z</published>
    <updated>2017-02-26T06:53:30.000Z</updated>
    
    <content type="html"><![CDATA[<p>我們的網頁通常會有很多鏈接，但是在爬蟲的時候可以分開哪一些是外部鏈接，哪一些是內部鏈接來優化搜尋結果。比如說增加<code>nofollow</code>標籤。nofollow是一個HTML標籤的屬性值，它可以告訴搜尋引擎不要追蹤這個鏈接。</p>
<h2 id="手動"><a href="#手動" class="headerlink" title="手動"></a>手動</h2><p>我們可以手動把每一個鏈接都加上nofollow屬性，比如這樣：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;a href=&quot;https://github.com/calpa&quot; rel=&quot;nofollow&quot;&gt;Calpa的Github主頁&lt;/a&gt;</div><div class="line">&lt;a href=&quot;https://github.com/calpa&quot; rel=&quot;external nofollow&quot;&gt;Calpa的Github主頁&lt;/a&gt;</div></pre></td></tr></table></figure></p>
<p><code>external nofollow</code>是更加專業的寫法，告訴搜尋引擎這是一個外部鏈接。</p>
<h2 id="自動"><a href="#自動" class="headerlink" title="自動"></a>自動</h2><p>我們也可以利用<code>hexo-autonofollow</code>插件來做這一件事情。<br>只需要輸入<code>npm install hexo-autonofollow --save</code>，然後在<code>_config.yml</code>裡面寫上下面就可以了：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">nofollow:</div><div class="line">    enable: true</div><div class="line">    exclude:</div><div class="line">    - exclude1.com</div><div class="line">    - exclude2.com</div></pre></td></tr></table></figure></p>
<p>exclude1.com和exclude2都是內部域名。</p>
<h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><ol>
<li><a href="https://liuzhichao.com/2016/hexo-auto-nofollow.html" rel="external nofollow noopener noreferrer" target="_blank">Hexo优化之为外部链接添加nofollow
</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我們的網頁通常會有很多鏈接，但是在爬蟲的時候可以分開哪一些是外部鏈接，哪一些是內部鏈接來優化搜尋結果。比如說增加&lt;code&gt;nofollow&lt;/code&gt;標籤。nofollow是一個HTML標籤的屬性值，它可以告訴搜尋引擎不要追蹤這個鏈接。&lt;/p&gt;
&lt;h2 id=&quot;手動&quot;&gt;
    
    </summary>
    
    
      <category term="Hexo" scheme="https://calpa.me/Tags/Hexo/"/>
    
      <category term="SEO" scheme="https://calpa.me/Tags/SEO/"/>
    
  </entry>
  
  <entry>
    <title>利用Github免費教育禮包更换.me域名</title>
    <link href="https://calpa.me/2017/02/23/github-edcation-package/"/>
    <id>https://calpa.me/2017/02/23/github-edcation-package/</id>
    <published>2017-02-23T02:00:00.000Z</published>
    <updated>2017-04-05T15:30:37.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://i.imgur.com/PmOA3IB.png?3" alt="Imgur"></p>
<p>現在如果你看網址列的話，你會發現現在域名改成了<code>calpa.me</code>，而且加上了一個綠色的鎖。</p>
<p><img src="https://dwa5x7aod66zk.cloudfront.net/assets/sdp-backpack-a64038716bf134f45e809ff86b9611fb97e41bbd2ccfa3181da73cf164d3c200.png" width="200px"></p>
<h2 id="Github-禮包"><a href="#Github-禮包" class="headerlink" title="Github 禮包"></a>Github 禮包</h2><p>如果你有學生身份的話，其中一個好處就是可以使用很多免費服務。比如說<a href="https://education.github.com/" rel="external nofollow noopener noreferrer" target="_blank">Github Education</a>禮包。它裡面有很多內容，但其中比較實用的有下面這些：</p>
<ol>
<li><a href="https://aws.amazon.com/?nc1=h_ls" rel="external nofollow noopener noreferrer" target="_blank">AWS Educate</a>: Up to $110 in bonus AWS credits for a total of $75-$150</li>
<li><a href="https://www.digitalocean.com/" rel="external nofollow noopener noreferrer" target="_blank">Digital Ocean</a>: Cloud hosting</li>
<li><a href="https://github.com/" rel="external nofollow noopener noreferrer" target="_blank">Github</a>: Unlimited private repositories (normally $7/month) while you are a student.</li>
<li><a href="https://www.namecheap.com/" rel="external nofollow noopener noreferrer" target="_blank">namecheap</a>: One year domain name registration on the .me TLD (normally $18.99/year)</li>
<li><a href="https://travis-ci.org/" rel="external nofollow noopener noreferrer" target="_blank">Travis CI</a>: Private builds (normally $69/month) while you’re a student</li>
<li><a href="https://www.udacity.com/" rel="external nofollow noopener noreferrer" target="_blank">UDACITY</a>: One month free access to any Nanodegree program (normally $199)</li>
</ol>
<p>既然namecheap提供一年免費<code>.me</code> 域名，不如我就用<code>calpa.me</code>取代之前<code>calpa.github.io</code>吧。</p>
<h2 id="namecheap"><a href="#namecheap" class="headerlink" title="namecheap"></a>namecheap</h2><p>在<a href="https://nc.me/" rel="external nofollow noopener noreferrer" target="_blank">namecheap</a>尋找<code>calpa.me</code>是否有人註冊，如果沒有的話就可以直接將.me加入購物車。</p>
<p><img src="http://i.imgur.com/24oQqGZ.png" alt="Imgur"><br>之後，在namecheap的dashboard會看到自己域名，然後點擊MANAGE按鈕。</p>
<p>在Advanced DNS裡面，我們需要增加兩筆<code>A</code>記錄：</p>
<ol>
<li>@ 192.30.252.153</li>
<li>@ 192.30.252.154</li>
</ol>
<p>之後利用<code>dig +noall +answer username.me</code>命令就可以看到記錄如上一樣。</p>
<h2 id="HTTPS"><a href="#HTTPS" class="headerlink" title="HTTPS"></a>HTTPS</h2><p>如果要使用HTTPS，可以利用免費的Cloudflare服務。</p>
<ol>
<li>註冊Cloudflare</li>
<li>打開namecheap的domain頁，將nameserver改成Custome DNS，然後加入<code>bella.ns.cloudflare.com</code>和<code>igor.ns.cloudflare.com</code>。</li>
</ol>
<h2 id="感想"><a href="#感想" class="headerlink" title="感想"></a>感想</h2><p>添加新的域名其實不難，只是需要很多時間去等待服務器修改DNS記錄。。。</p>
<h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><ol>
<li><a href="https://help.github.com/articles/setting-up-an-apex-domain/#configuring-a-records-with-your-dns-provider" rel="external nofollow noopener noreferrer" target="_blank">Configuring A records with your DNS provider - Github</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://i.imgur.com/PmOA3IB.png?3&quot; alt=&quot;Imgur&quot;&gt;&lt;/p&gt;
&lt;p&gt;現在如果你看網址列的話，你會發現現在域名改成了&lt;code&gt;calpa.me&lt;/code&gt;，而且加上了一個綠色的鎖。&lt;/p&gt;
&lt;p&gt;&lt;img src
    
    </summary>
    
    
      <category term="Github" scheme="https://calpa.me/Tags/Github/"/>
    
  </entry>
  
  <entry>
    <title>Web Notification推送通知</title>
    <link href="https://calpa.me/2017/02/22/hello/"/>
    <id>https://calpa.me/2017/02/22/hello/</id>
    <published>2017-02-22T07:20:41.000Z</published>
    <updated>2017-04-03T09:42:59.000Z</updated>
    
    <content type="html"><![CDATA[<p>如果要推送通知的話，我們首先要請求權限：<code>Notification.requestPermission()</code></p>
<p>之後檢查<code>Notification.permission</code>來查看是否擁有權限。該值會是下面三個其中之一：</p>
<ol>
<li>default: 從未詢問用戶</li>
<li>granted: 用戶授權顯示通知的權限</li>
<li>denied: 用戶不授權。。。</li>
</ol>
<p>創造一個通知很簡單，<code>new Notification(text)</code>可以了。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">var text = &quot;Hello, world&quot;;</div><div class="line">new Notification(text);</div></pre></td></tr></table></figure></p>
<p><img src="http://i.imgur.com/l1lVFXZ.png" alt="Imgur"></p>
<p>沒有圖片的話會比較空虛，可以加入options。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">function push() &#123;</div><div class="line">  var title = &quot;這是一個標題。。。&quot;;</div><div class="line">	var options = &#123;</div><div class="line">		body: &quot;Calpa 寫了一篇文章XD&quot;,</div><div class="line">		icon: &quot;https://calpa.github.io/img/profile.png&quot;</div><div class="line">	&#125;</div><div class="line">	var n = new Notification(title, options);</div><div class="line">&#125;</div><div class="line"></div><div class="line">push();</div></pre></td></tr></table></figure>
<p><img src="http://i.imgur.com/uuNPUoB.png" alt="Imgur"></p>
<p>如果要增加與用戶的互動，可以利用Notification的事件：</p>
<ol>
<li>onshow</li>
<li>onclick</li>
<li>onclose</li>
<li>onerror</li>
</ol>
<p>我們可以監聽<code>onclick</code>，當用戶點擊通知，瀏覽器就會跳到目標頁面。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">n.onclick = (event) =&gt; &#123;</div><div class="line">	event.preventDefault();</div><div class="line">	window.open(&apos;https://calpa.github.io/&apos;, &apos;_blank&apos;);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><ol>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/API/Notifications_API/Using_the_Notifications_API" rel="external nofollow noopener noreferrer" target="_blank">Using the Notification API</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;如果要推送通知的話，我們首先要請求權限：&lt;code&gt;Notification.requestPermission()&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;之後檢查&lt;code&gt;Notification.permission&lt;/code&gt;來查看是否擁有權限。該值會是下面三個其中之一：&lt;
    
    </summary>
    
    
      <category term="Web" scheme="https://calpa.me/Tags/Web/"/>
    
  </entry>
  
  <entry>
    <title>Javascript中的Closure入門</title>
    <link href="https://calpa.me/2017/02/19/js-closure/"/>
    <id>https://calpa.me/2017/02/19/js-closure/</id>
    <published>2017-02-19T07:12:00.000Z</published>
    <updated>2017-02-21T05:35:03.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="為什麼會有這篇文章"><a href="#為什麼會有這篇文章" class="headerlink" title="為什麼會有這篇文章"></a>為什麼會有這篇文章</h2><p>打好基本功是很重要的。。。</p>
<h2 id="最簡單的閉包"><a href="#最簡單的閉包" class="headerlink" title="最簡單的閉包"></a>最簡單的閉包</h2><ol>
<li>先定義一個Function A</li>
<li>在A的裡面定義一個Function B</li>
<li>在A中返回B</li>
<li>執行A(), 將A()的返回值賦予給b</li>
<li>執行b()</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">function A() &#123;</div><div class="line">  function B() &#123;</div><div class="line">    console.log(&quot;Hello, world!&quot;);</div><div class="line">  &#125;</div><div class="line">  return B;</div><div class="line">&#125;</div><div class="line">var b = A();</div><div class="line">b(); // Hello World</div></pre></td></tr></table></figure>
<h2 id="加法-ES6"><a href="#加法-ES6" class="headerlink" title="加法 - ES6"></a>加法 - ES6</h2><ol>
<li>先定義adder()</li>
<li>定義匿名函數</li>
<li>返回x + y</li>
<li>定義變量 add5</li>
<li>執行 add5()</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">let adder = (x) =&gt; (y) =&gt; x + y</div><div class="line"></div><div class="line">let add5 = adder(5);</div><div class="line">let add10 = adder(10);</div><div class="line"></div><div class="line">console.log(add5(7)); // 12</div><div class="line">console.log(add10(7)); // 17</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;為什麼會有這篇文章&quot;&gt;&lt;a href=&quot;#為什麼會有這篇文章&quot; class=&quot;headerlink&quot; title=&quot;為什麼會有這篇文章&quot;&gt;&lt;/a&gt;為什麼會有這篇文章&lt;/h2&gt;&lt;p&gt;打好基本功是很重要的。。。&lt;/p&gt;
&lt;h2 id=&quot;最簡單的閉包&quot;&gt;&lt;a href=
    
    </summary>
    
    
      <category term="Javascript" scheme="https://calpa.me/Tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>SuperCharger Hackathon後記</title>
    <link href="https://calpa.me/2017/02/19/supercharger-hackathon/"/>
    <id>https://calpa.me/2017/02/19/supercharger-hackathon/</id>
    <published>2017-02-19T07:12:00.000Z</published>
    <updated>2017-02-21T05:36:19.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://i.imgur.com/7EMhgpx.jpg" alt="Imgur"></p>
<p>如果計上這次比賽的話，我已經是第五次參加這一類編程比賽。與過往的比賽不同，合作的對象不再是大學生，而是兩間Start-up公司。在這次比賽中，我選擇<a href="http://kyc-chain.com/" rel="external nofollow noopener noreferrer" target="_blank">KYC-Chain</a>、<a href="https://www.clare.ai/" rel="external nofollow noopener noreferrer" target="_blank">Clare.ai</a>兩間公司組成的隊伍。KYC-Chain透過<a href="https://airtable.com/" rel="external nofollow noopener noreferrer" target="_blank">Airtable</a>提供一些常見的用戶問題與答案，而Clare.ai則負責寫code。</p>
<p>Airtable有API教學，可以用node.js增加、移除、修改或者獲取資料。</p>
<h2 id="現有問題"><a href="#現有問題" class="headerlink" title="現有問題"></a>現有問題</h2><p>如果用戶想了解一些資訊，他需要經過很多過程才能獲取答案。</p>
<h2 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h2><p>利用Chatbot，用戶只需要說出自己的問題便能查詢資料，例如Identity Card，Regulatory Law等資訊。</p>
<h2 id="將來發展"><a href="#將來發展" class="headerlink" title="將來發展"></a>將來發展</h2><ol>
<li>獲取申請表格</li>
<li>自動填寫各類文件</li>
</ol>
<h2 id="感想"><a href="#感想" class="headerlink" title="感想"></a>感想</h2><p>我本來以為要從零開始架構一個Chatbot，原來可以直接用Api.ai。<br>大多數時間都是和一些在外面工作的人交流。。。</p>
<h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><ol>
<li>我自己 XD</li>
<li><a href="https://www.facebook.com/events/704583943057523/" rel="external nofollow noopener noreferrer" target="_blank">SuperCharger FinTech Hackathon - Facebook 活動頁</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://i.imgur.com/7EMhgpx.jpg&quot; alt=&quot;Imgur&quot;&gt;&lt;/p&gt;
&lt;p&gt;如果計上這次比賽的話，我已經是第五次參加這一類編程比賽。與過往的比賽不同，合作的對象不再是大學生，而是兩間Start-up公司。在這次比賽中，我選擇&lt;
    
    </summary>
    
    
      <category term="Hackathon" scheme="https://calpa.me/Tags/Hackathon/"/>
    
  </entry>
  
  <entry>
    <title>Javascript中的True與False</title>
    <link href="https://calpa.me/2017/02/02/true-false/"/>
    <id>https://calpa.me/2017/02/02/true-false/</id>
    <published>2017-02-02T15:19:53.000Z</published>
    <updated>2017-04-05T15:29:07.000Z</updated>
    
    <content type="html"><![CDATA[<p>這幾天用<a href="https://www.enki.com/" rel="external nofollow noopener noreferrer" target="_blank">Enki</a>來學習Javascript，感覺不錯，<strong>You can’t handle the truth!</strong> 有一些特別True/False例子。這裡簡單記錄一下。</p>
<p>最簡單的測試方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">function test(something)&#123;</div><div class="line">  if (something) &#123;</div><div class="line">    console.log(something + &apos; is true.&apos;);</div><div class="line">  &#125; else &#123;</div><div class="line">    console.log(something + &apos; is false.&apos;);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h1 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h1><h2 id="Truthy"><a href="#Truthy" class="headerlink" title="Truthy"></a>Truthy</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">true &lt;- true當然是true...</div><div class="line">[1][0]</div><div class="line">new Date()</div><div class="line">new Number(0)</div><div class="line">Object</div><div class="line">Infinity</div><div class="line">[]</div></pre></td></tr></table></figure>
<p>以下都是[object Object]:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&#123;a: false&#125;</div><div class="line">&#123;&#125;</div></pre></td></tr></table></figure></p>
<h2 id="Falsy"><a href="#Falsy" class="headerlink" title="Falsy"></a>Falsy</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">false &lt;- false當然是false...</div><div class="line">undefined</div><div class="line">&apos;&apos;</div><div class="line">&quot;&quot;</div><div class="line">[1][1] &lt;- undefined</div><div class="line">NaN</div><div class="line">null</div><div class="line">&#123;&#125;.someKey</div><div class="line">0</div><div class="line">[].length &lt;- 這個是0，所以出false</div></pre></td></tr></table></figure>
<p>值得注意的是[]，它本身會是<code>true</code>，但如果用<code>[] == true</code>的話會輸出<code>false</code>，<br>而<code>[] == false</code>的話會輸出<code>true</code>。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;這幾天用&lt;a href=&quot;https://www.enki.com/&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;Enki&lt;/a&gt;來學習Javascript，感覺不錯，&lt;strong&gt;You ca
    
    </summary>
    
    
      <category term="Javascript" scheme="https://calpa.me/Tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>HTML5 Web Storage</title>
    <link href="https://calpa.me/2017/01/20/localstorage/"/>
    <id>https://calpa.me/2017/01/20/localstorage/</id>
    <published>2017-01-20T11:37:38.000Z</published>
    <updated>2017-02-26T07:20:40.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Storage"><a href="#Storage" class="headerlink" title="Storage"></a>Storage</h1><ul>
<li>HTML5 的 <strong>Web Storage</strong> 包括了兩種儲存方式：<strong>localStorage</strong>及<strong>sessionStorage</strong>。</li>
<li>儲存在Storage中的資料，以key-value pair的形式保存。</li>
<li>Cookie的佔用空間非常小，大小限制于4KB左右，常見的用途是保存賬號登錄信息與登錄狀態。</li>
<li>使用Storage物件時，可以寫<code>localStorage</code>代替<code>window.localStorage</code>。</li>
</ul>
<h2 id="localStorage"><a href="#localStorage" class="headerlink" title="localStorage"></a>localStorage</h2><p>即使用戶關閉瀏覽器，頁面數據依然存在。下一次用戶打開該頁面，便能夠使用該資料。舉個例子，當localStorage擁有userdata，瀏覽器可以獲取用戶資料，瀏覽器會導航用戶到登入後的畫面。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">if (localStorage.getItem(&apos;userdata&apos;)) &#123;</div><div class="line">  login();</div><div class="line">&#125; else &#123;</div><div class="line">  register();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="sessionStorage"><a href="#sessionStorage" class="headerlink" title="sessionStorage"></a>sessionStorage</h2><p>sessionStorage與localStorage相似，但如果用戶關閉當前頁面，sessionStorage中的數據就會被清空。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">window.sessionStorage.setItem(&quot;username&quot;, &quot;calpa&quot;);</div><div class="line">window.sessionStorage.getItem(&quot;username&quot;); // calpa</div></pre></td></tr></table></figure>
<h1 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h1><h2 id="儲存"><a href="#儲存" class="headerlink" title="儲存"></a>儲存</h2><p>儲存資料的時候，可以利用Storage物件內的<code>setItem()</code>方法。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">localStorage.setItem(3, 3);</div><div class="line">sessionStorage.setItem(&quot;username&quot;, &quot;calpa&quot;);</div></pre></td></tr></table></figure></p>
<h2 id="獲取"><a href="#獲取" class="headerlink" title="獲取"></a>獲取</h2><p>獲取資料的時候，則會用到<code>getItem()</code>方法。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">let username = localStorage.getItem(&quot;username&quot;);</div></pre></td></tr></table></figure></p>
<p>如果key不是string的話，獲取資料時會出現問題。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">localStorage.3 = 3; // Uncaught SyntaxError: Unexpected number</div></pre></td></tr></table></figure></p>
<h2 id="清除"><a href="#清除" class="headerlink" title="清除"></a>清除</h2><p>清除某個資料，可以用<code>removeItem()</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">window.localStorage.removeItem(&quot;username&quot;);</div></pre></td></tr></table></figure></p>
<p>清除所有資料，可以用<code>clear()</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">window.localStorage.clear();</div><div class="line">window.sessionStorage.clear();</div></pre></td></tr></table></figure></p>
<h1 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h1><ol>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Storage_API/Using_the_Web_Storage_API" rel="external nofollow noopener noreferrer" target="_blank">Using the Web Storage API</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Storage&quot;&gt;&lt;a href=&quot;#Storage&quot; class=&quot;headerlink&quot; title=&quot;Storage&quot;&gt;&lt;/a&gt;Storage&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;HTML5 的 &lt;strong&gt;Web Storage&lt;/strong&gt; 包括了兩種儲存
    
    </summary>
    
    
      <category term="Web" scheme="https://calpa.me/Tags/Web/"/>
    
      <category term="Javascript" scheme="https://calpa.me/Tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>Javascript的變量提升入門</title>
    <link href="https://calpa.me/2017/01/14/hoisting/"/>
    <id>https://calpa.me/2017/01/14/hoisting/</id>
    <published>2017-01-14T12:09:35.000Z</published>
    <updated>2017-04-03T09:42:33.000Z</updated>
    
    <content type="html"><![CDATA[<p>在Javascript中，hoisting是一個容易犯錯的地方。<br>在一段scope裡面，沒有定義變量就使用變量的話會彈出Reference Error。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"> // ReferenceError: poi is not defined</div><div class="line">console.log(poi);</div></pre></td></tr></table></figure></p>
<hr>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">var name;</div><div class="line">console.log(name); // undefined</div><div class="line">name = &apos;calpa&apos;</div><div class="line">console.log(name); // calpa</div></pre></td></tr></table></figure>
<p>由於Javascript的解釋器會提前把所有變量函數定義，所以上面這一段代碼會變成這一段：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">console.log(name); // undefined</div><div class="line">var name = &apos;calpa&apos;;</div><div class="line">console.log(name); // calpa</div></pre></td></tr></table></figure></p>
<p>另外，Javascript也會出現這樣的問題。。。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">var name = &apos;calpa&apos;;</div><div class="line">(function () &#123;</div><div class="line">    // My name is undefined</div><div class="line">    console.log(&quot;My name is &quot; + name);</div><div class="line">    var name = &apos;poi&apos;;</div><div class="line">    // My name is poi</div><div class="line">    console.log(&quot;My name is &quot; + name); // poi</div><div class="line">&#125;)();</div></pre></td></tr></table></figure></p>
<p>簡單來說，在寫Javascript時，我們應該提前在檔案開始位置定義變量。</p>
<hr>
<p>參考資料：</p>
<ol>
<li><a href="http://adripofjavascript.com/blog/drips/variable-and-function-hoisting" rel="external nofollow noopener noreferrer" target="_blank">Variable and Function Hoisting in JavaScript</a></li>
<li><a href="http://jinlong.github.io/2013/09/11/var-and-fun-hoisting/" rel="external nofollow noopener noreferrer" target="_blank">JavaScript 中的变量和函数提升</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在Javascript中，hoisting是一個容易犯錯的地方。&lt;br&gt;在一段scope裡面，沒有定義變量就使用變量的話會彈出Reference Error。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;
    
    </summary>
    
    
      <category term="Javascript" scheme="https://calpa.me/Tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>Hexo之建立404 Page</title>
    <link href="https://calpa.me/2017/01/08/hexo-404-page/"/>
    <id>https://calpa.me/2017/01/08/hexo-404-page/</id>
    <published>2017-01-08T03:02:58.000Z</published>
    <updated>2017-04-05T15:28:25.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="建立方法"><a href="#建立方法" class="headerlink" title="建立方法"></a>建立方法</h1><ol>
<li>在Terminal輸入 <code>hexo new page 404</code></li>
<li>然後打開儲存404檔案的位置，比如說：<code>/source/404/index.md</code></li>
<li>在這個檔案最頂部寫下<code>permalink: /404.html</code>就可以了。</li>
</ol>
<h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><ol>
<li><a href="https://help.github.com/articles/creating-a-custom-404-page-for-your-github-pages-site/" rel="external nofollow noopener noreferrer" target="_blank">Creating a custom 404 page for your GitHub Pages site</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;建立方法&quot;&gt;&lt;a href=&quot;#建立方法&quot; class=&quot;headerlink&quot; title=&quot;建立方法&quot;&gt;&lt;/a&gt;建立方法&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;在Terminal輸入 &lt;code&gt;hexo new page 404&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;然後打開
    
    </summary>
    
    
      <category term="Hexo" scheme="https://calpa.me/Tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>Github上的README.md</title>
    <link href="https://calpa.me/2017/01/08/readme/"/>
    <id>https://calpa.me/2017/01/08/readme/</id>
    <published>2017-01-08T03:02:58.000Z</published>
    <updated>2017-02-22T15:50:10.000Z</updated>
    
    <content type="html"><![CDATA[<p>Hexo在渲染的時候默認是把source下面所有的.md檔案渲染成html，這樣的話會覆蓋掉Github上的CNAME和README.md。但是我又不想這樣，我想Github Repo下面可以直接看到這個blog的README.md內容。</p>
<p>所以我就修改Hexo根目錄下的_config.yml：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">skip_render: README.md</div></pre></td></tr></table></figure></p>
<p>然後輸入以往部署Hexo的指令就可以。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ hexo g</div><div class="line">$ hexo d</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Hexo在渲染的時候默認是把source下面所有的.md檔案渲染成html，這樣的話會覆蓋掉Github上的CNAME和README.md。但是我又不想這樣，我想Github Repo下面可以直接看到這個blog的README.md內容。&lt;/p&gt;
&lt;p&gt;所以我就修改Hexo
    
    </summary>
    
    
      <category term="Hexo" scheme="https://calpa.me/Tags/Hexo/"/>
    
  </entry>
  
</feed>
