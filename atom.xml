<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Calpa</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://calpa.me/"/>
  <updated>2017-08-05T04:22:01.000Z</updated>
  <id>https://calpa.me/</id>
  
  <author>
    <name>Calpa</name>
    <email>calpaliu@gmail.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>善用 Github Issue 的開源評論插件 -- Gitalk</title>
    <link href="https://calpa.me/2017/08/04/utilize-github-issue-by-using-gitalk/"/>
    <id>https://calpa.me/2017/08/04/utilize-github-issue-by-using-gitalk/</id>
    <published>2017-08-04T12:00:00.000Z</published>
    <updated>2017-08-05T04:22:01.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.imgur.com/DqyRXB9.jpg" alt="Gitalk"></p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>以前，我的博客是用 Disqus 的評論插件，但是無論是載入速度，還是樣式上，都是有所缺乏的。我一直沒有安裝其他的評論插件，因為覺得搬家有點麻煩。但是當我試用一下之後，我就覺得這個插件安裝很方便，功能也很實用，尤其是可以寫 Markdown 評論，就讓我非常喜歡這個插件了。因此，我拜讀了一下 <a href="https://github.com/gitalk/gitalk" rel="external nofollow noopener noreferrer" target="_blank">Gitalk Github Repo</a> 的代碼。我會在這裡說一下我對這個插件的理解，並提交繁體中文 README.md 到官方倉庫上。如果你想試用的話，你可以到<a href="https://gitalk.github.io/" rel="external nofollow noopener noreferrer" target="_blank">官網</a>或<a href="#gitalk-container">我的博客</a>留言。</p>
<p>Gitalk 是一個基於 Github Issue 和 Preact 開發的評論插件。它支持多語言，包括英文，繁體中文和簡體中文，並<a href="https://github.com/gitalk/gitalk/blob/48de82ca24d4cb24a464f7cc9e72884a208b9d5c/src/gitalk.jsx#L55" rel="external nofollow noopener noreferrer" target="_blank">自動判斷用戶當前語言</a>：<code>navigator.language || navigator.userLanguage</code>。用戶只需要使用自己的個人或組織 Github 賬戶便可以登入系統。</p>
<p>另外，它也有以下的功能：</p>
<ul>
<li>無干擾模式：<code>distractionFreeMode</code></li>
<li>快捷鍵提交評論 （cmd || ctrl + enter）</li>
</ul>
<h2 id="安裝方法"><a href="#安裝方法" class="headerlink" title="安裝方法"></a>安裝方法</h2><h3 id="使用-cdn-引入"><a href="#使用-cdn-引入" class="headerlink" title="使用 cdn 引入"></a>使用 cdn 引入</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"https://unpkg.com/gitalk/dist/gitalk.css"</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://unpkg.com/gitalk/dist/gitalk.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<p>直至8月4日，我仍然沒有在 cdnjs 上面找到 Gitalk 的，只好去 cdnjs/cdnjs 上面提交了<a href="https://github.com/cdnjs/cdnjs/issues/11668" rel="external nofollow noopener noreferrer" target="_blank">新的 cdn 需求</a>。如果你也認為有需要用到 cdnjs 的話，你可以去那裡說一下。</p>
<h3 id="利用-npm-安裝"><a href="#利用-npm-安裝" class="headerlink" title="利用 npm 安裝"></a>利用 npm 安裝</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">npm i --save gitalk</div><div class="line">cnpm i --save gitalk</div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> <span class="string">'gitalk/dist/gitalk.css'</span></div><div class="line"><span class="keyword">import</span> Gitalk <span class="keyword">from</span> <span class="string">'gitalk'</span></div></pre></td></tr></table></figure>
<h3 id="去-Github-上面-clone-Gitalk"><a href="#去-Github-上面-clone-Gitalk" class="headerlink" title="去 Github 上面 clone Gitalk"></a>去 Github 上面 clone Gitalk</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git <span class="built_in">clone</span> git@github.com:gitalk/gitalk.git</div><div class="line"><span class="built_in">cd</span> gitalk/dist/</div></pre></td></tr></table></figure>
<p>然後把壓縮過的<code>gitalk.min.js</code> 放進你的項目。</p>
<h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><p><img src="https://i.imgur.com/C6HEsRv.png" alt="Register a new OAuth Application"></p>
<p>Gitalk 需要 <strong>Github Application</strong>，如果沒有請點擊 <a href="https://github.com/settings/applications/new" rel="external nofollow noopener noreferrer" target="_blank">Register a new OAuth application</a> 申請，<code>Authorization callback URL</code> 填寫當前使用插件頁面的域名，例如我的博客就是填寫 <a href="https://calpa.me">https://calpa.me</a></p>
<h3 id="代碼範例"><a href="#代碼範例" class="headerlink" title="代碼範例"></a>代碼範例</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> gitalk = <span class="keyword">new</span> Gitalk(&#123;</div><div class="line">  <span class="attr">clientID</span>: <span class="string">'Github Application Client ID'</span>,</div><div class="line">  <span class="attr">clientSecret</span>: <span class="string">'Github Application Client Secret'</span>,</div><div class="line">  <span class="attr">repo</span>: <span class="string">'Github repo'</span>,</div><div class="line">  <span class="attr">owner</span>: <span class="string">'Github repo owner'</span>,</div><div class="line">  <span class="attr">admin</span>: [<span class="string">'Github repo collaborators'</span>],</div><div class="line">&#125;)</div><div class="line"></div><div class="line">gitalk.render(<span class="string">'gitalk-container'</span>)</div></pre></td></tr></table></figure>
<h2 id="Gitalk-選項"><a href="#Gitalk-選項" class="headerlink" title="Gitalk 選項"></a>Gitalk 選項</h2><ul>
<li><p><strong>clientID</strong> <code>String</code></p>
<p><strong>必須</strong>. Github Application Client ID.</p>
</li>
<li><p><strong>clientSecret</strong> <code>String</code></p>
<p><strong>必須</strong>. Github Application Client Secret.</p>
</li>
<li><p><strong>repo</strong> <code>String</code></p>
<p><strong>必須</strong>. Github repository.</p>
</li>
<li><p><strong>owner</strong> <code>String</code></p>
<p><strong>必須</strong>. Github repository 所有者，可以是個人或者組織。</p>
</li>
<li><p><strong>admin</strong> <code>Array</code></p>
<p><strong>必須</strong>. Github repository 合作者 (確保對這個 repository 是有寫的權限)。</p>
</li>
<li><p><strong>id</strong> <code>String</code></p>
<p>Default: <code>location.href</code>.</p>
<p>頁面的唯一標識。</p>
</li>
<li><p><strong>labels</strong> <code>Array</code></p>
<p>Default: <code>[&#39;Gitalk&#39;]</code>.</p>
<p>Github issue 的標簽。</p>
</li>
<li><p><strong>title</strong> <code>String</code></p>
<p>Default: <code>document.title</code>.</p>
<p>Github issue 的標題。</p>
</li>
<li><p><strong>body</strong> <code>String</code></p>
<p>Default: <code>location.href + header.meta[description]</code>.</p>
<p>Github issue 的內容。</p>
</li>
<li><p><strong>language</strong> <code>String</code></p>
<p>Default: <code>navigator.language || navigator.userLanguage</code>.</p>
<p>設置語言，支持 [en, zh-CN, zh-TW]。</p>
</li>
<li><p><strong>perPage</strong> <code>Number</code></p>
<p>Default: <code>10</code>.</p>
<p>每次加載的數據大小，最多 100。</p>
</li>
<li><p><strong>distractionFreeMode</strong> <code>Boolean</code></p>
<p>Default: false。</p>
<p>類似Facebook評論框的全屏遮罩效果.</p>
</li>
<li><p><strong>pagerDirection</strong> <code>String</code></p>
<p>Default: ‘last’</p>
<p>評論排序方式， <code>last</code>為按評論創建時間倒敘，<code>first</code>為按創建時間正序。</p>
</li>
<li><p><strong>createIssueManually</strong> <code>Boolean</code></p>
<p>Default: <code>false</code>.</p>
<p>如果當前頁面沒有相應的 isssue 且登錄的用戶屬於 admin，則會自動創建 issue。如果設置為 <code>true</code>，則顯示一個初始化頁面，創建 issue 需要點擊 <code>init</code> 按鈕。</p>
</li>
<li><p><strong>proxy</strong> <code>String</code></p>
<p>Default: <a href="https://cors-anywhere.herokuapp.com/https://github.com/login/oauth/access_token" rel="external nofollow noopener noreferrer" target="_blank">https://cors-anywhere/herokuapp.com</a></p>
<p> <a href="https://github.com/isaacs/github/issues/330" rel="external nofollow noopener noreferrer" target="_blank">Github oauth 請求到反向代理，為了支持 CORS。 </a></p>
</li>
<li><p><strong>flipMoveOptions</strong> <code>Object</code></p>
<p>Default:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">staggerDelayBy</span>: <span class="number">150</span>,</div><div class="line">  <span class="attr">appearAnimation</span>: <span class="string">'accordionVertical'</span>,</div><div class="line">  <span class="attr">enterAnimation</span>: <span class="string">'accordionVertical'</span>,</div><div class="line">  <span class="attr">leaveAnimation</span>: <span class="string">'accordionVertical'</span>,</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>評論列表的動畫。 <a href="https://github.com/joshwcomeau/react-flip-move/blob/master/documentation/enter_leave_animations.md" rel="external nofollow noopener noreferrer" target="_blank">參考</a></p>
</li>
<li><p><strong>enableHotKey</strong> <code>Boolean</code></p>
<p>Default: <code>true</code>.</p>
<p>啟用快捷鍵(cmd|ctrl + enter) 提交評論.</p>
</li>
</ul>
<h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><ul>
<li><p><code>render(String/HTMLElement)</code></p>
<p>初始化渲染並掛載插件，<a href="https://github.com/gitalk/gitalk/blob/48de82ca24d4cb24a464f7cc9e72884a208b9d5c/src/index.js#L17" rel="external nofollow noopener noreferrer" target="_blank">需要提供 HTMLElement 的 id </a>。</p>
</li>
<li><p><code>setPerPage(page: number)</code></p>
<p>// TODO: 我想在構建gitalk之後，可以再次手動設置屬性 perPage 屬性，再次自行定義每個頁面的評論載入量。</p>
</li>
</ul>
<h2 id="後記"><a href="#後記" class="headerlink" title="後記"></a>後記</h2><p>這個 Gitalk 也是蠻好用的，它界面簡潔清新，沒有廣告，還支持 Markdown 格式。而且感覺更加適合 Markdown 程序員使用。。。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://i.imgur.com/DqyRXB9.jpg&quot; alt=&quot;Gitalk&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;以前，我的博
    
    </summary>
    
    
      <category term="Front End" scheme="https://calpa.me/Tags/Front-End/"/>
    
      <category term="Blog" scheme="https://calpa.me/Tags/Blog/"/>
    
  </entry>
  
  <entry>
    <title>項目代碼調試：提問前要做的六個步驟</title>
    <link href="https://calpa.me/2017/07/24/six-steps-to-debug-before-directly-ask-question/"/>
    <id>https://calpa.me/2017/07/24/six-steps-to-debug-before-directly-ask-question/</id>
    <published>2017-07-24T13:00:00.000Z</published>
    <updated>2017-07-24T15:24:49.000Z</updated>
    
    <content type="html"><![CDATA[<p>上天對於每個地球人都是公平的，每個人都一天只有 24 小時。為什麼有的人會停留不前，有的人卻會不斷有所成長？其中一個原因是當遇到問題時，他們解決問題的方法是非常不同的。同樣是遇到問題，與其伸手，等其他程序員幫助去解決問題，倒不如自己先嘗試各種方法，然後才問人家。。。我會在這篇文章簡單說一下在你提問之前，你可以做的六個步驟。</p>
<h2 id="步驟"><a href="#步驟" class="headerlink" title="步驟"></a>步驟</h2><h3 id="1-檢查，試驗本地環境"><a href="#1-檢查，試驗本地環境" class="headerlink" title="1. 檢查，試驗本地環境"></a>1. 檢查，試驗本地環境</h3><p>  如果你是和其他人一齊開發項目的話，可能你會遇到 packages 安裝報錯的問題，這個時候，你應該試試安裝packages，例如<code>npm install</code>，把現有項目的 packages 更新一下，可能現有的 packages 已經不是最新的，或者有所缺乏。</p>
<p>  另外，你也可以看一下你自己的 npm 和 node 版本，是否因為版本號太低，而導致無法安裝某些 packages。如果是的話，請先確定是否需要用那麼新的 package 版本，然後再更新 node 版本。</p>
<h3 id="2-Google-Bing-一下"><a href="#2-Google-Bing-一下" class="headerlink" title="2. Google / Bing 一下"></a>2. Google / Bing 一下</h3><p>  <img src="https://i.imgur.com/1Djy0Gj.png" alt="Google 一下"></p>
<p>  問題就是答案，其實你直接在搜尋引擎搜尋，就會找到這些問題的解決方法。如果你問我一些技術的問題，我很可能會直接叫你 Google，因為有時候第一個搜尋結果就是你的答案。如果你已經找過，但是找不到的話，很大機會是你的搜尋字不對，你可以加一下你的項目的 package，比如說 把 react, bootstrap 等字眼加在搜尋裡面。</p>
<h3 id="3-閱讀官方資料"><a href="#3-閱讀官方資料" class="headerlink" title="3. 閱讀官方資料"></a>3. 閱讀官方資料</h3><p>  <img src="https://i.imgur.com/kmFRumd.png" alt="Calpa&#39;s Blog Github Repo"></p>
<p>  先閱讀 Github上面的 README.md，然後閱讀官網上對於該項目的簡介，使用方法，再看 API。你可以再看一次 Github Repo 的說明，看看有沒有自己沒注意到的地方。你也可以直接進入官網，然後看它對於各個方法，變量的說明。如果你看不到你想要的方法，你可以返回第二步，Google 一下。</p>
<h3 id="4-查看-Issue"><a href="#4-查看-Issue" class="headerlink" title="4. 查看 Issue"></a>4. 查看 Issue</h3><p>  如果你還是搜不到的話，看看人家有沒有遇到類似的問題，並從中獲取靈感。</p>
<h3 id="5-閱讀源代碼"><a href="#5-閱讀源代碼" class="headerlink" title="5. 閱讀源代碼"></a>5. 閱讀源代碼</h3><p>  有時候，開源項目的作者寫得比較匆忙，急著都沒有寫好文檔，以及測試代碼。這個時候，你直接看上面的代碼吧。。。</p>
<p>  如果是部署在 Github 上面的話，可以使用在線代碼搜尋插件，比如說 <a href="https://chrome.google.com/webstore/detail/insightio-for-github/pmhfgjjhhomfplgmbalncpcohgeijonh" rel="external nofollow noopener noreferrer" target="_blank">Insight.io for Github</a>。如果你已經把它 clone 下來的話，可以使用流行的編輯器進行全局搜尋，例如 Atom，Sublime。</p>
<p>  <img src="https://i.imgur.com/OWuA4xP.png" alt="Insight.io"></p>
<p>  另外，你也可以使用 <a href="https://github.com/Jianru-Lin/lambda-view" rel="external nofollow noopener noreferrer" target="_blank">lambda-view</a>，閱讀 JavaScript 源代碼時，這個很好用的。<br>  <img src="https://i.imgur.com/kmuI2NX.png" alt="lambda-view"></p>
<h3 id="6-出去走走，喝點水"><a href="#6-出去走走，喝點水" class="headerlink" title="6. 出去走走，喝點水"></a>6. 出去走走，喝點水</h3><p>  <img src="https://i.imgur.com/oXlUIRt.gif" alt="喝點水，休息一下"></p>
<p>  如果你看了網上的解決方法，但覺得無從入手的話，出去走一走，喝一口水，讓大腦休息一下。有時候，我上午想不到的問題，吃個午餐，然後下午就想到解決方法了。</p>
<h2 id="禮貌地提出問題"><a href="#禮貌地提出問題" class="headerlink" title="禮貌地提出問題"></a>禮貌地提出問題</h2><p>  如果你做了以上的步驟，還是沒有辦法解決問題的話，你可以去 Repo 的 Issue 上面說一下，先不要直接說我找到一個 bug。。。</p>
<h2 id="後記"><a href="#後記" class="headerlink" title="後記"></a>後記</h2><p>感覺很長時間沒有寫博客了，文筆開始生疏。這一篇文章寫的時間比以前長，可能我要努力一點才行。。。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;上天對於每個地球人都是公平的，每個人都一天只有 24 小時。為什麼有的人會停留不前，有的人卻會不斷有所成長？其中一個原因是當遇到問題時，他們解決問題的方法是非常不同的。同樣是遇到問題，與其伸手，等其他程序員幫助去解決問題，倒不如自己先嘗試各種方法，然後才問人家。。。我會在這
    
    </summary>
    
    
      <category term="思考" scheme="https://calpa.me/Tags/%E6%80%9D%E8%80%83/"/>
    
  </entry>
  
  <entry>
    <title>簡單易用的開源 JavaScript 動畫圖標庫 -- Titanic</title>
    <link href="https://calpa.me/2017/07/06/titanic-a-set-of-animated-icons/"/>
    <id>https://calpa.me/2017/07/06/titanic-a-set-of-animated-icons/</id>
    <published>2017-07-06T03:00:00.000Z</published>
    <updated>2017-07-06T06:58:27.000Z</updated>
    
    <content type="html"><![CDATA[<p>如果你用過 Font Awesome 等圖標，你可能會覺得它們很好看，用起來很很方便。但是，在用戶點擊這些圖標的時候，它們是不會有反應的。如果有這些圖標會動的話，那就更加好。Titanic 提供一系列的動畫圖標，以及以 JavaScript 的調用圖標動畫的方法。</p>
<p>如果你想要看 Hello, World 的版本的話，你可以到我的 <a href="https://codepen.io/calpa/pen/xrzPxx" rel="external nofollow noopener noreferrer" target="_blank">Codepen</a> 裡面，測試一下。</p>
<p><img src="https://i.imgur.com/bLmxAZ3.gif" alt="Preview"></p>
<h2 id="安裝方法"><a href="#安裝方法" class="headerlink" title="安裝方法"></a>安裝方法</h2><p>你可以使用 CDN 或者 npm 來安裝 Titanic。</p>
<h3 id="CDN"><a href="#CDN" class="headerlink" title="CDN"></a>CDN</h3><p>直接在 HTML head 裡面加進下面的字符。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.rawgit.com/icons8/titanic/master/dist/js/titanic.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdnjs.cloudflare.com/ajax/libs/bodymovin/4.5.9/bodymovin.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>然後在 body 的部分初始化 Titanic。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">    <span class="keyword">var</span> titanic = <span class="keyword">new</span> Titanic();</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<p>你可以透過這種標籤來加上 Titanic 圖標。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">'titanic titanic_chat'</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p><img src="https://i.imgur.com/aiG4BYo.png" alt="All icons"></p>
<p>你可以透過<a href="https://rawgit.com/icons8/titanic/master/demo/index.html" rel="external nofollow noopener noreferrer" target="_blank">這裡</a>查找 Titanic 所支持的圖標，把 chat 換成以下的字詞：</p>
<ul>
<li>caps</li>
<li>chat</li>
<li>checkbox</li>
<li>expand</li>
<li>cheap</li>
<li>expensive</li>
<li>idea</li>
<li>mailbox</li>
<li>mic</li>
<li>no-mic</li>
<li>online</li>
<li>pause</li>
<li>power</li>
<li>shopping</li>
<li>smile</li>
<li>stop</li>
<li>unlock</li>
<li>zoom</li>
</ul>
<h3 id="npm"><a href="#npm" class="headerlink" title="npm"></a>npm</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install titanic-icons --save</div></pre></td></tr></table></figure>
<p>鏈接：<a href="https://www.npmjs.com/package/titanic-icons" rel="external nofollow noopener noreferrer" target="_blank">titanic-icons - npmjs</a></p>
<h3 id="使用你自己的備份"><a href="#使用你自己的備份" class="headerlink" title="使用你自己的備份"></a>使用你自己的備份</h3><p>如果你喜歡在自己的伺服器，而不是 rawgit 去使用 Titanic 的話，你只需要把 base URL 傳進 init() 裡面。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">titanic.begin(<span class="string">'/my/base/directory/'</span>);</div></pre></td></tr></table></figure>
<p>然後，當你有一個div，id=”chat” 的時候，Titanic 會自動檢測所有在 /my/base/directory/chat.json 裡面的圖標。</p>
<h2 id="API"><a href="#API" class="headerlink" title="API"></a>API</h2><ul>
<li><code>titanic.isInitialized()</code> – 返回 true / false</li>
<li><code>titanic.items</code> – 返回包含所有 titanic 圖標的一個 Array</li>
<li><code>titanic.items[index].on(), titanic.items[index].off(), titanic.items[index].play()</code> – 調整動畫 by index</li>
<li><code>titanic.on(token), titanic.off(token), titanic.play(token)</code> – 調整動畫 by token (name)</li>
</ul>
<h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!--Inserting the scripts once for the whole page--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.rawgit.com/icons8/titanic/master/dist/js/titanic.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdnjs.cloudflare.com/ajax/libs/bodymovin/4.5.9/bodymovin.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!--Inserting an icon--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">'titanic titanic-checkbox'</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="comment">&lt;!--Initializing--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">        <span class="keyword">var</span> titanic = <span class="keyword">new</span> Titanic(&#123;</div><div class="line">          <span class="attr">hover</span>: <span class="literal">true</span>, <span class="comment">// auto animated on hover (default true)</span></div><div class="line">          click: <span class="literal">true</span>  <span class="comment">// auto animated on click/tap (default false)</span></div><div class="line">        &#125;);</div><div class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="comment">&lt;!--Clicking turns this icon on--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">"titanic.on(getElementById('checkbox').value)"</span>&gt;</span>On<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="原作者的話"><a href="#原作者的話" class="headerlink" title="原作者的話"></a>原作者的話</h2><blockquote>
<p>JavaScript is basically <a href="https://github.com/bodymovin/bodymovin" rel="external nofollow noopener noreferrer" target="_blank">bodymovin</a> plus few lines of my code. It’s a solid library with an awesome name. Thank you, guys.</p>
<p>Icons are created by <a href="https://dribbble.com/imargarita" rel="external nofollow noopener noreferrer" target="_blank">Margarita Ivanchikova</a> from <a href="https://icons8.com/" rel="external nofollow noopener noreferrer" target="_blank">Icons8</a>. She has many more awesome animations in her portfolio.</p>
<p>The code rewritten by <a href="https://github.com/dhilt" rel="external nofollow noopener noreferrer" target="_blank">Denis Alexanov</a>, my teacher and guru. Thank you!</p>
<p>Project is produced by Icons8, author of the famous icon library, <a href="https://iconpharm.com" rel="external nofollow noopener noreferrer" target="_blank">IconPharm</a>, and <a href="https://sleeklogos.design" rel="external nofollow noopener noreferrer" target="_blank">Sleek Logos</a>.</p>
<p>The code is created by Icons8</p>
</blockquote>
<p><img src="https://i.imgur.com/p8Xoj9l.gif" alt="Magritte"></p>
<p>Github Repo: <a href="https://github.com/icons8/titanic" rel="external nofollow noopener noreferrer" target="_blank">icons 8 / titanic</a></p>
<h2 id="感想"><a href="#感想" class="headerlink" title="感想"></a>感想</h2><p>我覺得這個很炫酷，我應該可以用在現有的前端開發項目，比如說博客，還有在做的一個在線學習編程平台上。如果你希望看到我如何應用 Titanic 的話，你可以打個星，關注一下我的博客。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;如果你用過 Font Awesome 等圖標，你可能會覺得它們很好看，用起來很很方便。但是，在用戶點擊這些圖標的時候，它們是不會有反應的。如果有這些圖標會動的話，那就更加好。Titanic 提供一系列的動畫圖標，以及以 JavaScript 的調用圖標動畫的方法。&lt;/p&gt;

    
    </summary>
    
    
      <category term="JavaScript" scheme="https://calpa.me/Tags/JavaScript/"/>
    
      <category term="Library" scheme="https://calpa.me/Tags/Library/"/>
    
  </entry>
  
  <entry>
    <title>神兵利器 -- HHKB Pro 2 開箱文</title>
    <link href="https://calpa.me/2017/07/02/introduction-to-hhkb-pro-2/"/>
    <id>https://calpa.me/2017/07/02/introduction-to-hhkb-pro-2/</id>
    <published>2017-07-02T12:16:00.000Z</published>
    <updated>2017-07-02T15:54:05.000Z</updated>
    
    <content type="html"><![CDATA[<img src="https://i.imgur.com/AVN6eaJ.jpg" width="500">
<p>我一開始拿到 Happy Hacking KeyBoard Pro 2時，我就問為什麼鍵盤可以完全沒有字的，那叫我如何輸入。。。雖然我可以盲打（不看鍵盤直接輸入），但也許我未必可以有能力使用這樣的鍵盤。但寫了一天代碼之後，我才發現，原來這一切都是自己的猜疑而已。這個鍵盤打起來就是一個字，爽。</p>
<img src="https://i.imgur.com/AbKpx2P.jpg" width="500" title="HHKB Pro 2">
<center>HHKB Pro 2 盒子</center>

<h2 id="HHKB"><a href="#HHKB" class="headerlink" title="HHKB"></a>HHKB</h2><p>在我取得這個 HHKB Pro 2 之前，我是一直在用 Cooler Master 的紅軸機械鍵盤，這個打起來也是很爽的。</p>
<p>HHKB 的按鍵數量相對少，只提供必需的那些按鍵，它取消了數字鍵，功能鍵，以及方向鍵。但是對於 Emacs 用戶（我）來說，這些都不是問題，因為很多時候都是按 Ctrl + P/N/B/F 來達到上下左右的效果。</p>
<p>雖則如此，我利用 Karabiner 做了四點配置：</p>
<ol>
<li>當 MacBook 鏈接 HHKB 的時候，電腦自帶的鍵盤不會再有輸出。</li>
<li>右邊 Command 按鍵變為右邊 Option</li>
<li>右邊 Option 按鍵變為右按 Mouse</li>
<li>Option 加 IKJL 等於 上下左右</li>
</ol>
<img src="https://i.imgur.com/aDZMqim.png" width="500" title="配置">
<h2 id="Emacs"><a href="#Emacs" class="headerlink" title="Emacs"></a>Emacs</h2><blockquote>
<p>Emacs = Escape Meta Alt Ctrl Super</p>
</blockquote>
<p>作為一個 Emacs 重度（中毒）用戶，對 Ctrl 鍵的需求是很大的。尤其是我把 Ctrl 和 Caps Lock 的位置交換之後，左手無名指就經常發力。</p>
<p>不知不覺之間，我就已經學會了盲打的技巧。現在打代碼就像玩遊戲一樣，我幾乎都不用看鍵盤，直接想到那個字，那句命令，直接打出來。如果你不用看鍵盤，而是直接輸入的話，每分鐘打字速度會提高很多的。。。</p>
<p>最後，祝大家都能有自己的神兵利器，享受 Happy Hacking 的旅途。</p>
]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;https://i.imgur.com/AVN6eaJ.jpg&quot; width=&quot;500&quot;&gt;
&lt;p&gt;我一開始拿到 Happy Hacking KeyBoard Pro 2時，我就問為什麼鍵盤可以完全沒有字的，那叫我如何輸入。。。雖然我可以盲打（不看鍵盤直接輸入）
    
    </summary>
    
    
      <category term="KeyBoard" scheme="https://calpa.me/Tags/KeyBoard/"/>
    
  </entry>
  
  <entry>
    <title>【翻譯】前端性能優化必備工具清單</title>
    <link href="https://calpa.me/2017/06/19/front-end-performance-check-list-for-production-in-chinese/"/>
    <id>https://calpa.me/2017/06/19/front-end-performance-check-list-for-production-in-chinese/</id>
    <published>2017-06-19T12:00:00.000Z</published>
    <updated>2017-07-26T08:31:31.000Z</updated>
    
    <content type="html"><![CDATA[<p>在網頁開發的世界裡，尤其是前端開發，我們會用很多時間尋找最好的設計，以及最好的內容。雖然這是沒有錯的，但是，我們會忘記去優化我們的網頁。。。這會讓用戶需要很久的時間，比如說，瀏覽器需要六秒到十秒以上才能完成整個渲染過程。。。</p>
<p>在這篇文章，我會分享優化網頁的檢查清單。如果你覺得我有錯漏的地方，請在下面留言。這張清單會包含一些優化搜尋引擎排名 (SEO) 的技巧，以及減少網頁加載時間的最佳實踐。</p>
<blockquote>
<p>編者按：很多都是我聽過或從來沒有用過的工具，我還是要學習一個。。。</p>
</blockquote>
<p>馬上開始！</p>
<h2 id="那些我們忘記的基本功"><a href="#那些我們忘記的基本功" class="headerlink" title="那些我們忘記的基本功"></a>那些我們忘記的基本功</h2><h3 id="Favicon"><a href="#Favicon" class="headerlink" title="Favicon"></a>Favicon</h3><p>  請不要忘記為你的網站加上它，它就好像是你的網站的 ID。無論你有沒有 favicon.ico ，用戶的瀏覽器依然會請求它。如果你忘記加上這個檔案，你的網站就會返回 404 Not Found，這會讓瀏覽器面紅。。。所以你要小心一點，避免給予用戶負面的第一印象。要解決這個問題，你可以透過 <a href="http://realfavicongenerator.net/" rel="external nofollow noopener noreferrer" target="_blank">Favicon Generator</a> 生成 favicon 和 manifest 檔案。</p>
<h3 id="Open-Graph"><a href="#Open-Graph" class="headerlink" title="Open Graph"></a>Open Graph</h3><p>  加上社交媒體的 meta 標籤，用戶更好地分享你的文章，同時 Google Ranking 也會提高，你可以使用 <a href="https://megatags.co/" rel="external nofollow noopener noreferrer" target="_blank">Meta Tags</a> 產生 Social meta tags。</p>
<blockquote>
<p>譯者按：產生 Open Graph Meta Tags，我的博客也加上了 Open Graph。</p>
</blockquote>
<h2 id="圖片優化"><a href="#圖片優化" class="headerlink" title="圖片優化"></a>圖片優化</h2><h3 id="壓縮圖像"><a href="#壓縮圖像" class="headerlink" title="壓縮圖像"></a>壓縮圖像</h3><p>  載入圖片會大幅地延長網頁的加載時間，甚至達到整體網頁載入時間的七成。如果可以的話，請使用 SVG，以及壓縮你的那些精緻圖像。你可以使用 <a href="http://compresspng.com/" rel="external nofollow noopener noreferrer" target="_blank">Compress PNG</a> 來幫忙壓縮圖像。</p>
<h2 id="CSS-優化"><a href="#CSS-優化" class="headerlink" title="CSS 優化"></a>CSS 優化</h2><h3 id="Autoprefixer"><a href="#Autoprefixer" class="headerlink" title="Autoprefixer"></a><strong>Autoprefixer</strong></h3><p>  解決跨瀏覽器上的 CSS 問題。我們都會在自己喜歡的瀏覽器下寫 CSS 的規矩，而我則是使用 Chrome。雖然如此，你依然需要為這些規矩加上 prefix 來支持所有類型的瀏覽器。 Autoprefixer 會使用現在瀏覽器熱度，對各種屬性支持度的資料，來提供你所需要的 prefix。你可以透過命令行來運用它。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">npm install -g postcss-cli autoprefixer</div><div class="line">postcss *.css use autoprefixer <span class="_">-d</span> build</div></pre></td></tr></table></figure>
<p>你也可以使用 Webpack 設置，或者使用 <a href="https://autoprefixer.github.io/" rel="external nofollow noopener noreferrer" target="_blank">Autoprefixer CSS online</a> 。</p>
<h3 id="Purifycss"><a href="#Purifycss" class="headerlink" title="Purifycss"></a><strong>Purifycss</strong></h3><p>  刪除項目內沒有用到的 CSS 規矩。它會讀取內容 (HTML/JS/PHP) 和 CSS，然後返回必須的 CSS。它是一個非常有用的工具，如果你是在用 CSS 框架比如說 Bootstrap，這個能夠減少很多的 CSS 文檔大小。</p>
<p>安裝方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install -g purify-css</div></pre></td></tr></table></figure></p>
<p>使用方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">purifycss src/css/main.css src/css/bootstrap.css src/js/main.js — min — info — out src/dist/index.css</div></pre></td></tr></table></figure></p>
<p>你可以在 purify-css 的 <a href="https://github.com/purifycss/purifycss" rel="external nofollow noopener noreferrer" target="_blank">Github Page</a> 中獲得更多資訊。</p>
<h3 id="minify-CSS"><a href="#minify-CSS" class="headerlink" title="minify CSS"></a>minify CSS</h3><p>  你可以使用 purify-css 或使用網上的<a href="http://csscompressor.com/" rel="external nofollow noopener noreferrer" target="_blank">CSS Compressor</a>。</p>
<h2 id="減少載入時間"><a href="#減少載入時間" class="headerlink" title="減少載入時間"></a>減少載入時間</h2><h3 id="PageSpeed-Insights"><a href="#PageSpeed-Insights" class="headerlink" title="PageSpeed Insights"></a><a href="https://developers.google.com/speed/pagespeed/insights/" rel="external nofollow noopener noreferrer" target="_blank">PageSpeed Insights</a></h3><p>  PageSpeed Insights 可以用來檢查載入網頁速度，它會分別在手提電話和電腦運行測試。它會使用手提電話的 user-agent，以及 Desktop 的 user-agent。PageSpeed 會檢查網頁時候已經應用網頁的最佳實踐，並提供一個 0﹣100 的分數，同時提供如何提高分數的意見。</p>
<h3 id="GZIP"><a href="#GZIP" class="headerlink" title="GZIP"></a>GZIP</h3><p>  開啟 GZIP 壓縮，是其中一個減少網頁載入速度的最快改善方法。Just Do IT，設置 GZIP，並讓你的用戶享受飛一般的感受，下圖是節省流量的效果圖。</p>
<img src="https://i.imgur.com/k7FRiSi.png" width="500" title="PICSrush GZIP 測試圖">
<center>PICSrush GZIP 測試圖</center>

<p>你可以在<a href="https://checkgzipcompression.com/" rel="external nofollow noopener noreferrer" target="_blank">Check GZIP compression</a> 網站中測試你的網站是否已經開啟 GZIP 壓縮功能。</p>
<h3 id="CDN"><a href="#CDN" class="headerlink" title="CDN"></a>CDN</h3><p>  根據<a href="https://zh.wikipedia.org/zh-hk/%E5%85%A7%E5%AE%B9%E5%82%B3%E9%81%9E%E7%B6%B2%E8%B7%AF" rel="external nofollow noopener noreferrer" target="_blank">維基百科</a>，內容傳遞網路（CDN）是指一種透過互聯網互相連接的電腦網絡系統，利用最靠近使用者的伺服器，更快地傳送檔案。簡單來說，CDN 就是一種網絡上的緩存系統。你可以使用免費的 <a href="https://www.cloudflare.com/" rel="external nofollow noopener noreferrer" target="_blank">CloudFlare</a> 來達到這個效果。</p>
<blockquote>
<p>編者按：你可以用 cdnjs 或其他 cdn。</p>
</blockquote>
<h2 id="優化平台"><a href="#優化平台" class="headerlink" title="優化平台"></a>優化平台</h2><h3 id="Sentry"><a href="#Sentry" class="headerlink" title="Sentry"></a><a href="https://sentry.io/welcome/" rel="external nofollow noopener noreferrer" target="_blank">Sentry</a></h3><p>  對於前端工程師來說，它是一個非常正的工具。Sentry 檢查在瀏覽器環境下，是否存在任何 uncaught JavaScript exceptions，主動追蹤發生的錯誤，並提供報告。它提供豐富的 API，使得你可以自定義如何在其他地方顯示這些數據。</p>
<p>  它會透過 Email, SMS 或 Slack 通知你，當前端環境發生錯誤時，它亦會提供用戶回應。</p>
<h3 id="Google-Tag-Manager"><a href="#Google-Tag-Manager" class="headerlink" title="Google Tag Manager"></a><a href="https://developers.google.com/tag-manager/" rel="external nofollow noopener noreferrer" target="_blank">Google Tag Manager</a></h3><p>  Google Tag Manager 可以一站式管理你所有會傳送到第三方，例如 Facebook 和 Twitter 的 JavaScript 代碼。透過使用它，你減少網頁的載入時間，以及更加方便地在同一個地方管理 JavaScript 代碼。</p>
<iframe width="100%" height="300" src="https://www.youtube.com/embed/KRvbFpeZ11Y" frameborder="0" allowfullscreen></iframe>

<blockquote>
<p>Thanks for reading! feel free to leave a comment if you think I miss something.</p>
<p>If you think other people should read this, press the 💚 button, tweet and share the post. Remember to follow me on Medium so you can get notified about my future posts.</p>
</blockquote>
<h2 id="譯者的話"><a href="#譯者的話" class="headerlink" title="譯者的話"></a>譯者的話</h2><p>這次翻譯英文文章，真的是很有趣呢，不過要寫起來感覺沒有自己從零開始寫一篇那麼流暢。</p>
<p>一開始我是去問問人家，可不可以翻譯一下他們的文章？結果就取得同意了。</p>
<p>這次翻譯這一篇文章，讓我了解到很多對我來講是新的工具，比如說 Sentry 以及Google Tag Manager。我還是一個萌新，感覺前端的路還有很長要走啊。。。</p>
<img src="https://i.imgur.com/SJma5Pv.png" width="500" title="calpa blog 測試圖">
<center>Calpa’s Blog GZIP 測試圖</center>

<hr>
<p>原文鏈接： <a href="https://hackernoon.com/front-end-performance-check-list-for-production-4e930cb63e8a" rel="external nofollow noopener noreferrer" target="_blank">Frontend Performance Check-list For Production - Medium</a><br>原作者：<a href="https://medium.com/@yjose" rel="external nofollow noopener noreferrer" target="_blank">Youssouf El Azizi</a> <small>(Founder <a href="http://picsrush.com" rel="external nofollow noopener noreferrer" target="_blank">http://picsrush.com</a> , React js developer)</small></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在網頁開發的世界裡，尤其是前端開發，我們會用很多時間尋找最好的設計，以及最好的內容。雖然這是沒有錯的，但是，我們會忘記去優化我們的網頁。。。這會讓用戶需要很久的時間，比如說，瀏覽器需要六秒到十秒以上才能完成整個渲染過程。。。&lt;/p&gt;
&lt;p&gt;在這篇文章，我會分享優化網頁的檢查
    
    </summary>
    
    
      <category term="Front End" scheme="https://calpa.me/Tags/Front-End/"/>
    
      <category term="Performance" scheme="https://calpa.me/Tags/Performance/"/>
    
      <category term="Production" scheme="https://calpa.me/Tags/Production/"/>
    
      <category term="Check-list" scheme="https://calpa.me/Tags/Check-list/"/>
    
  </entry>
  
  <entry>
    <title>【多圖】2017 年香港開源年會後記</title>
    <link href="https://calpa.me/2017/06/14/hong-kong-open-sources-conference-remarks/"/>
    <id>https://calpa.me/2017/06/14/hong-kong-open-sources-conference-remarks/</id>
    <published>2017-06-14T01:28:00.000Z</published>
    <updated>2017-06-14T15:39:05.000Z</updated>
    
    <content type="html"><![CDATA[<p>大約兩個星期之前，我在 Facebook上看到 2017 年的香港開源年會的消息。我想，我是不是可以透過這個機會，認識一下不同領域的程序員呢。於是，我在 EventBrite 上面買了學生票。但最終我拿到 VIP 票了，感覺有點激動。我把這一次的會議做了幾點筆記，也許，每一個人都應該參加最少一次如此有規模的大會。我會在這裡說說我參與這次會議所發生的一些事。</p>
<p>在這一次大會之前，我參加了 Hong Kong Open Source Meeting #2，當時我是說<a href="https://calpa.me/2017/06/01/create-markdown-powerpoint-in-5-mins/">《5分鐘製作 Markdown PowerPoint》</a>。</p>
<p>那天晚上，我才知道原來那一次演講的話，就會有一張免費 VIP 票，包含入場的資格，衣服及外套。我還拿到一些免費的票，轉送給其他認識的人了。</p>
<img src="https://i.imgur.com/ZBautza.jpg" width="500" title="VIP Ticket">
<center>VIP 門票</center>

<img src="https://i.imgur.com/4q7YR0J.png" width="500" title="Tshirt">
<center>大會送的衣服</center>

<p>我之前幫忙舉辦 Hang Seng Bank AI Hackathon，在說大數據的時候提到了這個黑客松，並放出了團體合照。。。</p>
<img src="https://i.imgur.com/aSRoBdc.jpg" width="500" title="Hang Seng Bank AI Hackathon">
<center>團體合照</center>

<h2 id="大數據"><a href="#大數據" class="headerlink" title="大數據"></a>大數據</h2><p>一些中國的互聯網公司對數據十分看重，並認為這些數據都是可以製造財富的資產。比如說滴滴打車收集了很多打車的交易數據，並善用這些數據優化分配司機和乘客的算法。又比如說阿里巴巴對大數據很重視，它的<a href="https://tianchi.aliyun.com/" rel="external nofollow noopener noreferrer" target="_blank">天池大數據眾智平台</a>會提供各種各樣的大數據，並舉辦比賽招聘人才。</p>
<p>在這一次大會中，我了解到原來台灣在開放數據這一方面做得不錯。根據<a href="https://index.okfn.org/place/" rel="external nofollow noopener noreferrer" target="_blank">Global Open Data Index</a> 的開放數據顯示，台灣是排名第一的，而香港則是排行 23。就讓我們看一下香港政府是如何開放數據的。</p>
<h3 id="香港的開放數據"><a href="#香港的開放數據" class="headerlink" title="香港的開放數據"></a>香港的開放數據</h3><p>香港政府<a href="https://data.gov.hk/tc/" rel="external nofollow noopener noreferrer" target="_blank">資料一線通</a>平台，以多種檔案格式提供多個政府部門類別，機構的一些查詢資料，比如說天氣預報，中學教育統計資料。值得注意的是，這些檔案並不是 ODF，而是 xls, xml, csv, json, gif, txt, tif。。。</p>
<p>而且連 Hello World 都不能跑，這叫我如何是好。。。</p>
<p>我把嘗試這個平台的過程寫成<a href="https://calpa.me/2017/06/12/hong-kong-open-data-from-zero-to-giveup/">《香港開放數據平台 - 從入門到放棄》</a>。</p>
<h2 id="自動化構建"><a href="#自動化構建" class="headerlink" title="自動化構建"></a>自動化構建</h2><img src="https://i.imgur.com/q8g0CgG.jpg" width="500" title="Reproducible builds">
<p>Debian 的 Leader Chirs Lamb 也來了這一次的大會，他分享了 Reproducible builds 這一個主題。</p>
<h3 id="不可重現的原因"><a href="#不可重現的原因" class="headerlink" title="不可重現的原因"></a>不可重現的原因</h3><img src="https://i.imgur.com/NTUpphj.jpg" width="500" title="Reason of non-reproducibility">
<ol>
<li>Timestramps</li>
<li>時區<br>比如說，你在美國用 <code>new Date()</code> 和我在香港用的話是不同的。</li>
<li>Non-deterministic file ordering</li>
<li>字典 / hash key 的次序不同<br>有些</li>
<li>用戶，群組，系統變量不同</li>
<li>組建的路徑不同 (eg. /home/lamby vs /home/calpa)</li>
</ol>
<hr>
<h3 id="Technical-Advantages"><a href="#Technical-Advantages" class="headerlink" title="Technical Advantages"></a>Technical Advantages</h3><img src="https://i.imgur.com/5WY6bHC.jpg" width="500" title="Technical Advantages">
<ol>
<li>檢測構造環境程序所導致的意外。</li>
<li>更加容易地測試更新的代碼。<br>我們可以自動構建測試所需要的生產環境，定義所需要的數據。透過這個方法，我們可以自動測試時候更新後的代碼會不會引入更多的 Bug。。。</li>
</ol>
<hr>
<h2 id="最佳實踐"><a href="#最佳實踐" class="headerlink" title="最佳實踐"></a>最佳實踐</h2><h3 id="Builds"><a href="#Builds" class="headerlink" title="Builds"></a>Builds</h3><img src="https://i.imgur.com/p6pTo4O.jpg" width="500" title="Best Practices of Builds">
<center>Best Practices of Builds</center>

<ol>
<li>把它當成是藍圖一樣</li>
<li>避免需要登入去構建或調試<br>這個可以利用Makefile, Gulp, Grunt 等一些自動化構建工具幫忙自動構建程序</li>
<li>善用版本控制工具去構建檔案<br>比如說用 Git…</li>
<li>Explicit is better than implicit<br>其實這一個思想以前也</li>
<li>每一次跑的時候都創造一個新的 layer</li>
</ol>
<hr>
<h3 id="Container-Host-Security"><a href="#Container-Host-Security" class="headerlink" title="Container Host Security"></a>Container Host Security</h3><img src="https://i.imgur.com/DZ1CSib.jpg" width="500" title="Best Practices of Container Host Security">
<p><center>Best Practices of Container Host Security</center></p>
<ol>
<li>不要用 root 身份去跑</li>
<li>要限制 SSH Access</li>
<li>用 namespaces</li>
<li>定義資源限額</li>
<li>開啟記錄</li>
</ol>
<h2 id="認識其他程序員"><a href="#認識其他程序員" class="headerlink" title="認識其他程序員"></a>認識其他程序員</h2><img src="https://i.imgur.com/NXToUgx.png" width="500" title="台北摩茲工寮網頁">
<p>這次我認識了台北摩茲工寮的其中一個摩茲人，了解到原來他們會每個禮拜在台北會有聚會。</p>
<p>也許，我們也可以參加他們的開源項目，作出自己小小的貢獻。</p>
<p>如果以後過去台北的話，我也可以過去拜會一下他們。</p>
<h2 id="食物"><a href="#食物" class="headerlink" title="食物"></a>食物</h2><img src="https://i.imgur.com/MaMW0xE.jpg" width="300" title="免費星巴克咖啡">
<p>這次有星巴克的免費食物，比如說菠菜卷，冷麵，沙拉。味道不錯 XD</p>
<img src="https://i.imgur.com/ouO6EVo.jpg" width="300" title="北角雞蛋仔">
<p>最後我離開數碼港，去北角嘗試北角雞蛋仔，其實味道也是不錯的。但是如果要說到最好吃的雞蛋仔的話，那還是九龍灣流動小販賣的炭燒雞蛋仔味道最好。</p>
<p>最後，感謝所有幫忙舉辦香港開源年會的人，讓我這樣的人也可以有一個渠道認識這個世界。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;大約兩個星期之前，我在 Facebook上看到 2017 年的香港開源年會的消息。我想，我是不是可以透過這個機會，認識一下不同領域的程序員呢。於是，我在 EventBrite 上面買了學生票。但最終我拿到 VIP 票了，感覺有點激動。我把這一次的會議做了幾點筆記，也許，每一
    
    </summary>
    
    
      <category term="Conference" scheme="https://calpa.me/Tags/Conference/"/>
    
      <category term="Open Source" scheme="https://calpa.me/Tags/Open-Source/"/>
    
  </entry>
  
  <entry>
    <title>香港開放數據平台 - 從入門到放棄</title>
    <link href="https://calpa.me/2017/06/12/hong-kong-open-data-from-zero-to-giveup/"/>
    <id>https://calpa.me/2017/06/12/hong-kong-open-data-from-zero-to-giveup/</id>
    <published>2017-06-12T13:36:00.000Z</published>
    <updated>2017-06-12T15:04:41.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>經過 2017 年香港開源年會之後，我都沒有去看香港的開放數據做得怎麼樣。今天香港正懸掛八號風球，正好是一個機會去了解一下。香港政府有一個開放數據平台，<a href="https://data.gov.hk/tc-data/dataset" rel="external nofollow noopener noreferrer" target="_blank">資料一線通</a>，以多種檔案格式提供多個政府部門類別，機構的一些查詢資料，比如說天氣預報，中學教育統計資料。值得注意的是，這些檔案並不是 ODF，而是 xls, xml, csv, json, gif, txt, tif。。。</p>
<h2 id="使用-API"><a href="#使用-API" class="headerlink" title="使用 API"></a>使用 API</h2><p>第一眼看到的時候，我就想可不可以直接複製貼上測試一下，結果發現是不行的。。。</p>
<img src="https://i.imgur.com/cwI9gp7.png" width="600" title="auto">
<p>“歷史檔案文件列表應用程式界面” 其實這個名字會不會有點長，我在閱讀下文的時候看到這麼長的字也很難聯想到剛才有看過。而且如果直接在瀏覽器輸入第一句的話，只會返回 400 Bad Request。。。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  &quot;message&quot; : &quot;REQUEST ERROR: start parameter missing&quot;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="香港天文台提供的數據"><a href="#香港天文台提供的數據" class="headerlink" title="香港天文台提供的數據"></a>香港天文台提供的數據</h2><p>如果想要獲取香港天文台在平台上，2016年1月1日到1月2日的開放資料，就可以輸入這一句到命令行里：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl https://api.data.gov.hk/v1/historical-archive/list-files?start=20160101&amp;end=20160102&amp;provider=hk-hko</div></pre></td></tr></table></figure></p>
<p>返回的結果太長，prettify 後的檔案更加是高達 362 行。。。</p>
<p>有興趣的話，你可以透過<a href="https://gist.github.com/calpa/11b75ce631d9a3809e17fb6b9ed15d6b" rel="external nofollow noopener noreferrer" target="_blank">這個鏈接</a>看一下。。。</p>
<p>這個看起來不錯，有很多東西在裡面。但是，你可能會發現數據結構有點奇怪，一個數組去儲存所有的資料，這裡我就不展開了。</p>
<p>如果看到最後，你就會發現 <strong>file-count</strong> 提供文檔總數，其實直接計算一下 <strong>file</strong> 的長度就可以了，上面的例子共有21份文檔。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">file.length <span class="comment">// 21</span></div><div class="line">file-count <span class="comment">// 21</span></div></pre></td></tr></table></figure></p>
<img src="https://i.imgur.com/Hik48CC.png" width="600" title="auto 香港天文台開放數據">
<center>香港天文台開放數據網頁</center>

<p>你可以進去下載數據，比如說進入<a href="http://rss.weather.gov.hk/rss/CurrentWeather_uc.xml" rel="external nofollow noopener noreferrer" target="_blank">本港地區天氣報告</a>，但你會發現它把最重要的資料放了在 description 裡面，用一個 tr, td, td 的形式展現出來，這就不如你用 HTML 展現吧。。。</p>
<h2 id="XML"><a href="#XML" class="headerlink" title="XML"></a>XML</h2><blockquote>
<p>與許多HTML元素不同的是，XML元素的基礎是其功能，而非其格式。你不應該根據標記，就假定任何的格式或樣式。相反地， XML把版面配置留給樣規。樣規是獨立的文件，把元素配上樣式。</p>
</blockquote>
<p>如果寫 XML 的話，最重要是把資料都顯示出來，格式都是其次的。在 XML 中，我們可以自由地定義標籤，充分地表達自己的意思。也許，我應該之後寫一篇關於 XML 的文章。。。</p>
<p>本來，我是想繼續寫的，但是看到那些莫名其妙的查詢方法，以及查詢的<a href="https://data.gov.hk/tc-data/provider/hk-hko" rel="external nofollow noopener noreferrer" target="_blank">香港天文台開放數據網頁</a>都只有 xml 格式，我就簡短寫一下就算了。</p>
<p>如果你好奇為什麼我會提到 ODF 的話，你可以去看一下台灣政府是<a href="https://onepiece.nchu.edu.tw/cofsys/plsql/odf" rel="external nofollow noopener noreferrer" target="_blank">如何推動開放數據</a>。</p>
<h2 id="題外話"><a href="#題外話" class="headerlink" title="題外話"></a>題外話</h2><p>我也不知道為什麼<a href="http://www.ceo.gov.hk/chi/blog/rss/blog_rss.xml" rel="external nofollow noopener noreferrer" target="_blank">特首博客的RSS</a>會報錯。。。</p>
<h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><ol>
<li><a href="https://onepiece.nchu.edu.tw/cofsys/plsql/odf" rel="external nofollow noopener noreferrer" target="_blank">ODF 政府文件標準格式宣導​</a></li>
<li><a href="http://yes.nctu.edu.tw/lecture/web/xml/intro/chapter1.html" rel="external nofollow noopener noreferrer" target="_blank">國立交通大學 XML教學</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;經過 2017 年香港開源年會之後，我都沒有去看香港的開放數據做得怎麼樣。今天香港正懸掛八號風球，正好是一個機會去了解一下。香港政府有一個開
    
    </summary>
    
    
      <category term="API" scheme="https://calpa.me/Tags/API/"/>
    
      <category term="xml" scheme="https://calpa.me/Tags/xml/"/>
    
  </entry>
  
  <entry>
    <title>5分鐘製作 Markdown PowerPoint</title>
    <link href="https://calpa.me/2017/06/01/create-markdown-powerpoint-in-5-mins/"/>
    <id>https://calpa.me/2017/06/01/create-markdown-powerpoint-in-5-mins/</id>
    <published>2017-06-01T09:00:00.000Z</published>
    <updated>2017-06-06T16:27:26.000Z</updated>
    
    <content type="html"><![CDATA[<iframe width="100%" height="515" src="https://gitpitch.com/calpa/slides/master?grs=github&t=white" frameborder="0" allowfullscreen></iframe>

<h2 id="關於我"><a href="#關於我" class="headerlink" title="關於我"></a>關於我</h2><ul>
<li>自學 <span style=" color: #f48024">Web</span> 前端程序員</li>
<li>香港科技大學化學工程三年級學生</li>
<li>曾經參加過 6次 Hackathon</li>
<li>技術博客: <a href="https://calpa.me">https://calpa.me</a></li>
</ul>
<h2 id="以前製作-PowerPoint-的方法"><a href="#以前製作-PowerPoint-的方法" class="headerlink" title="以前製作 PowerPoint 的方法"></a>以前製作 PowerPoint 的方法</h2><p>Microsoft PowerPoint</p>
<p>Apache OpenOffice Impress</p>
<h2 id="Git-Pitch"><a href="#Git-Pitch" class="headerlink" title="Git Pitch"></a><span style="letter-spacing: 0.1em; color: #e49436; text-transform:none">Git</span> Pitch</h2><h2 id="前置技能"><a href="#前置技能" class="headerlink" title="前置技能"></a>前置技能</h2><ul>
<li>Github</li>
<li>Markdown</li>
</ul>
<h4 id="Github"><a href="#Github" class="headerlink" title="Github"></a>Github</h4><p><img src="https://i.imgur.com/Riz9ctd.png" height="200" width="200"></p>
<h4 id="Markdown"><a href="#Markdown" class="headerlink" title="Markdown"></a>Markdown</h4><h4 id="Markdown語法"><a href="#Markdown語法" class="headerlink" title="Markdown語法"></a>Markdown語法</h4><h5 id="標題"><a href="#標題" class="headerlink" title="標題"></a>標題</h5><figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="section"># h1</span></div><div class="line"><span class="section">## h2</span></div><div class="line"><span class="section">### h3</span></div><div class="line"><span class="section">#### h4</span></div><div class="line"><span class="section">##### h5</span></div></pre></td></tr></table></figure>
<h2 id="4個步驟"><a href="#4個步驟" class="headerlink" title="4個步驟"></a>4個步驟</h2><p><img src="https://i.imgur.com/HqSHVOy.png" alt="Imgur"></p>
<p><img src="https://i.imgur.com/ZwDgHFr.png" alt="Imgur"></p>
<p><img src="https://i.imgur.com/RLV4Ut0.png" alt="Imgur"></p>
<p><img src="https://i.imgur.com/uOoSrMa.png" alt="Imgur"></p>
<h3 id="GitPitch-Slideshow-URL"><a href="#GitPitch-Slideshow-URL" class="headerlink" title="GitPitch Slideshow URL"></a>GitPitch Slideshow URL</h3><p><a href="https://gitpitch.com/user/repo" rel="external nofollow noopener noreferrer" target="_blank">https://gitpitch.com/user/repo</a></p>
<p><img src="https://calpa.me/img/qrcode.png" height="200" width="200"></p>
]]></content>
    
    <summary type="html">
    
      &lt;iframe width=&quot;100%&quot; height=&quot;515&quot; src=&quot;https://gitpitch.com/calpa/slides/master?grs=github&amp;t=white&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe
    
    </summary>
    
    
      <category term="Markdown" scheme="https://calpa.me/Tags/Markdown/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript Array.map(parseInt) 錯誤解決方案</title>
    <link href="https://calpa.me/2017/05/31/javascript-array-map-parseint-solutions/"/>
    <id>https://calpa.me/2017/05/31/javascript-array-map-parseint-solutions/</id>
    <published>2017-05-31T03:06:00.000Z</published>
    <updated>2017-07-13T23:11:43.000Z</updated>
    
    <content type="html"><![CDATA[<p>如果我想轉換數組裡面的字符串為數字的話，很自然就會想到 <code>map</code> 和 <code>parseInt</code> 這兩個方法。但是用起來的時候卻不是我想要的結果。。。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = [<span class="string">"1"</span>, <span class="string">"2"</span>, <span class="string">"3"</span>, <span class="string">"4"</span>, <span class="string">"5"</span>];</div><div class="line"></div><div class="line"><span class="keyword">var</span> b = a.map(<span class="built_in">parseInt</span>);</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(b); <span class="comment">// [1, NaN, NaN, NaN, NaN]</span></div></pre></td></tr></table></figure>
<h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><p>如果我們細看 map 的參數，就會發現它的 callback 會有三個 arguments：<code>currentValue</code>, <code>index</code> 和 <code>array</code>。</p>
<p>對於 <code>parseInt</code> 來說， 它會接收<code>currentValue</code>和 <code>index</code>，並用 index 作為 index 進制。。。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">parseInt</span>(<span class="string">'1'</span>, <span class="number">0</span>); <span class="comment">// OK =&gt; 1</span></div><div class="line"><span class="built_in">parseInt</span>(<span class="string">'2'</span>, <span class="number">1</span>); <span class="comment">// 不合法的進制。。。</span></div><div class="line"><span class="built_in">parseInt</span>(<span class="string">'3'</span>, <span class="number">2</span>); <span class="comment">// NaN, 二進制沒有 3</span></div><div class="line"><span class="built_in">parseInt</span>(<span class="string">'4'</span>, <span class="number">3</span>); <span class="comment">// NaN, 三進制沒有 4</span></div><div class="line"><span class="built_in">parseInt</span>(<span class="string">'5'</span>, <span class="number">4</span>); <span class="comment">// NaN, 四進制沒有 5</span></div></pre></td></tr></table></figure></p>
<h2 id="解決方法"><a href="#解決方法" class="headerlink" title="解決方法"></a>解決方法</h2><ol>
<li><p>用<code>.map(parseFloat)</code>，因為它只接收一個參數。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> c = a.map(<span class="built_in">parseFloat</span>);</div></pre></td></tr></table></figure>
</li>
<li><p>用<code>.map(Number)</code></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> d = a.map(<span class="built_in">Number</span>);</div></pre></td></tr></table></figure>
</li>
<li><p>用<code>.map(num =&gt; parseInt(num))</code></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> e = a.map(<span class="function"><span class="params">num</span> =&gt;</span> <span class="built_in">parseInt</span>(num));</div></pre></td></tr></table></figure>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;如果我想轉換數組裡面的字符串為數字的話，很自然就會想到 &lt;code&gt;map&lt;/code&gt; 和 &lt;code&gt;parseInt&lt;/code&gt; 這兩個方法。但是用起來的時候卻不是我想要的結果。。。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;
    
    </summary>
    
    
      <category term="JavaScript" scheme="https://calpa.me/Tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>為什麼要寫技術博客？</title>
    <link href="https://calpa.me/2017/05/30/why-i-write-blog-posts/"/>
    <id>https://calpa.me/2017/05/30/why-i-write-blog-posts/</id>
    <published>2017-05-30T12:00:00.000Z</published>
    <updated>2017-05-30T14:26:17.000Z</updated>
    
    <content type="html"><![CDATA[<p>從第一篇<a href="https://calpa.me/2017/01/08/hello-world/">《Hello World》</a>文章，我已經開始寫博客半年了，一共寫三十多篇，平均一個禮拜出一篇文章。其實，我沒有想那麼多，直接就開始寫文章了。可能我的博客沒有其他人寫得那麼好，但是我依然堅持寫博客。每一篇文章是需要一點時間構思、撰寫，但是這點時間是很值得的。</p>
<h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><ol>
<li><p>重用問題解決方案<br>我們在寫代碼的時候，經常會遇到一些問題，不是那麼容易直接去解決，每次都是用同樣，或差不多的解決方法。如果每一次去 Google 這些問題，就會顯得有點浪費時間了。透過博客記錄下來，我們可以很方便地讓自己重用這些方案，同時讓別人避免造同樣的輪子。</p>
</li>
<li><p>學習知識</p>
<p>分享是學習知識的其中一種好方法。透過分享知識，我們可以整理碎片化的知識，並把它組合起來成為一篇文章。如果有小夥伴指出那篇文章的問題，大家可以交流一下，互相提升技術水平。</p>
</li>
<li><p>整理思維</p>
<p>作為一個 Web 前端程序員，經常會接觸網絡上日新月異的工具，知識。如果可以整理他們出來，就可以更好地讓自己摸清脈絡，對他們有更好的認識。</p>
</li>
<li><p>了解自己</p>
<p>就如同寫日記一樣，寫博客是一個不錯的方法去尋找自己的路。我們可能會有很多的興趣，但只有一樣或數樣是真愛。如果把自己的興趣和學習的歷程寫下來，就會知道什麼才是自己持之以恆想做的事情，自己的熱情在哪裡。</p>
</li>
<li><p>認識不同的讀者</p>
<p>如果博客可以吸引讀者，這就代表文章的質量開始上升。透過與不同的人交流，學習不同的思想。寫著寫著博客文章，我開始和國內，台灣的程序員打開了溝通的渠道，博客也有開始有來自世界各地，包括日本，美國的讀者。</p>
</li>
</ol>
<h2 id="最初的動機"><a href="#最初的動機" class="headerlink" title="最初的動機"></a>最初的動機</h2><p>以前看到一些大牛經常發文，我就想：可不可以有一天我也可以發文呢？一開始我是打算把自己看到的好文章節錄出來，以及記錄自己遇到的坑，然後讓自己日後重用。沒有想到的是，那篇<a href="https://calpa.me/2017/05/21/learn-javascript-in-six-steps/">《打好 JavaScript 的6個步驟》</a>會為博客在兩日之內帶來 2000 多的流量，讓我感到有點高興。今後應該會繼續寫博客，記錄一下自己學了什麼。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;從第一篇&lt;a href=&quot;https://calpa.me/2017/01/08/hello-world/&quot;&gt;《Hello World》&lt;/a&gt;文章，我已經開始寫博客半年了，一共寫三十多篇，平均一個禮拜出一篇文章。其實，我沒有想那麼多，直接就開始寫文章了。可能我的博客沒有其
    
    </summary>
    
    
      <category term="Blog" scheme="https://calpa.me/Tags/Blog/"/>
    
  </entry>
  
  <entry>
    <title>打好 JavaScript 基礎的6個步驟</title>
    <link href="https://calpa.me/2017/05/21/learn-javascript-in-six-steps/"/>
    <id>https://calpa.me/2017/05/21/learn-javascript-in-six-steps/</id>
    <published>2017-05-21T12:00:00.000Z</published>
    <updated>2017-07-02T14:15:29.000Z</updated>
    
    <content type="html"><![CDATA[<p>平日開發的時候，我們會選擇使用一些框架來避免重複製造輪子，減輕我們的工作量。然而，我們卻不能透過使用更好的工具，或者更換框架來解決一些基礎開發問題。因此打好基礎很重要，不但決定前端程序員解決基礎問題的能力，還決定了面對日新月異框架時的掌握能力。當我開發 React 應用的時候，遇到的問題多是我對於 JavaScript 的理解不夠充分。因此，我在這裡寫一下如何打好 JavaScript 基礎，希望拋磚引玉 XD</p>
<ol>
<li><p>看一些經典的書<br>JavaScript: 紅寶書 (JavaScript高級程序設計)，犀牛書 (JavaScript: The Definitive Guide)，You Don’t Know JS<br>計算機經典: 算法導論，SICP</p>
<img src="https://i.imgur.com/xm6R14W.jpg" width="300" title="JavaScript高級程序設計">
<img src="https://i.imgur.com/autEZuV.jpg" width="300" title="JavaScript: The Definitive Guide">
<img src="https://i.imgur.com/ajLLsUg.gif" width="300" title="You Don" alt="t Know JS">
</li>
<li><p>嘗試用不同的工具，增加自己的視野。<br>你可以做一些玩具，自己嘗試一下寫TODO APP 的不同寫法。</p>
</li>
<li><p>看工具的源碼：React, Vue, Underscore.js<br>這些開源項目的代碼都已經放在 Github，網絡上也有對它們的源碼分析，隨便一找就有了。透過閱讀代碼，可以學習一下代碼規範，理解什麼才是好的代碼。</p>
</li>
<li><p>自己把這些工具、框架的某些功能做出來。<br>你可以實現<a href="http://underscorejs.org/" rel="external nofollow noopener noreferrer" target="_blank">Underscore.js</a>裡面的一些方法，例如<code>_.uniq(array, [isSorted], [iteratee])</code> 數組去重方法，然後看一下自己和人家寫得有什麼分別，為什麼人家會這樣寫？它有運用到什麼設計模式？</p>
</li>
<li><p>看ECMAScript規範。<br>你可以閱讀<a href="https://tc39.github.io/ecma262" rel="external nofollow noopener noreferrer" target="_blank">ECMAScript 規範</a>，人家對於不同的數據類型和函數是怎樣定義的，思考一下為什麼需要這樣定義，為什麼不這樣定義。<br>為什麼<code>typeof null</code>會是<code>object</code>？不定義為<code>null</code>？</p>
</li>
<li><p>記錄你學了什麼知識並分享。<br>記錄一下自己學習了什麼知識，遇到了什麼坑。透過和其他人交流一下，可以了解到自己有什麼不足之處。其中一個方法是利用 Hexo 建立博客，可以透過修改主題練習HTML, JavaScript, CSS。我也是這樣寫博客的：<a href="https://calpa.me">https://calpa.me</a></p>
</li>
</ol>
<p>這裡就作為我的一個學習小總結，不繼續展開了。。。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;平日開發的時候，我們會選擇使用一些框架來避免重複製造輪子，減輕我們的工作量。然而，我們卻不能透過使用更好的工具，或者更換框架來解決一些基礎開發問題。因此打好基礎很重要，不但決定前端程序員解決基礎問題的能力，還決定了面對日新月異框架時的掌握能力。當我開發 React 應用的時
    
    </summary>
    
    
      <category term="JavaScript" scheme="https://calpa.me/Tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>利用 ECMAScript 学习如何判断数据类型</title>
    <link href="https://calpa.me/2017/05/18/javascript-data-structures/"/>
    <id>https://calpa.me/2017/05/18/javascript-data-structures/</id>
    <published>2017-05-18T06:00:00.000Z</published>
    <updated>2017-05-18T06:08:33.000Z</updated>
    
    <content type="html"><![CDATA[<p>每一种编程语言都有数据结构，但他们各有不同之处。JavaScript 是一种动态语言，变量的类型不用提前声明，你可以使用同一个变量来保存不同的数据类型。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = <span class="string">'apple'</span>; <span class="comment">// String type</span></div><div class="line"><span class="keyword">var</span> a = <span class="number">42</span>; <span class="comment">// Number type</span></div><div class="line"><span class="keyword">var</span> a = <span class="literal">true</span>; <span class="comment">// Boolean type</span></div></pre></td></tr></table></figure></p>
<p>这就和Python的写法差不多:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">a = <span class="string">'apple'</span> // String type</div><div class="line">a = <span class="number">42</span> // Number type</div><div class="line">a = <span class="keyword">True</span> // Boolean type</div></pre></td></tr></table></figure></p>
<h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><p><a href="https://tc39.github.io/ecma262/#sec-ecmascript-overview" rel="external nofollow noopener noreferrer" target="_blank">ECMAScript 标準</a>明确定义了7种数据类型：6种原始类型 (Primitive value) 和Object。</p>
<img src="/img/javascript-data-structures.svg" width="300" title="auto JavaScript Data Structure">
<p>原始数据类型：</p>
<ol>
<li>Undefined</li>
<li>Null</li>
<li>Boolean</li>
<li>Number</li>
<li>String</li>
<li>Symbol (ECMAScript 2015)</li>
</ol>
<h2 id="判断方法"><a href="#判断方法" class="headerlink" title="判断方法"></a>判断方法</h2><p>我们可以透过使用<code>typeof</code>和<code>Object.prototype.toString()</code>来判断数据类型。</p>
<h3 id="typeof"><a href="#typeof" class="headerlink" title="typeof"></a>typeof</h3><p>在一开始设计 JavaScript 时，数值是由一个标签以及实际数据值表示的。对于基本类型，标签是1；而对于对象类型，标签是0。由于null代表的是空指针(里面都是0)，null的类型标签会是0。因此<code>typeof null</code>就会返回”object”;</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typeof</span> <span class="literal">undefined</span>; <span class="comment">// "undefined"</span></div><div class="line"><span class="keyword">typeof</span> <span class="built_in">Boolean</span>;   <span class="comment">// "function"</span></div><div class="line"><span class="keyword">typeof</span> <span class="literal">true</span>;      <span class="comment">// "boolean"</span></div><div class="line"><span class="keyword">typeof</span> <span class="number">42</span>;        <span class="comment">// "number"</span></div><div class="line"><span class="keyword">typeof</span> <span class="string">"42"</span>;      <span class="comment">// "string"</span></div><div class="line"><span class="keyword">typeof</span> <span class="built_in">Symbol</span>();  <span class="comment">// "symbol"</span></div></pre></td></tr></table></figure>
<p>我们可以看一下ECMAScript是怎样定义typeof的：</p>
<ol>
<li>Let val be the result of evaluating UnaryExpression.</li>
<li>If Type(val) is Reference, then<br>a. If IsUnresolvableReference(val) is true, return “undefined”.</li>
<li>Set val to ? GetValue(val).</li>
<li>Return a String according to Table 35.</li>
</ol>
<p>Table 35: typeof Operator Results</p>
<table>
<thead>
<tr>
<th style="text-align:left">Typeof val</th>
<th style="text-align:left">结果</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">Item One</td>
<td style="text-align:left">Item Two</td>
</tr>
<tr>
<td style="text-align:left">Type of val</td>
<td style="text-align:left">Result</td>
</tr>
<tr>
<td style="text-align:left">Undefined</td>
<td style="text-align:left">“undefined”</td>
</tr>
<tr>
<td style="text-align:left">Null</td>
<td style="text-align:left">“object”</td>
</tr>
<tr>
<td style="text-align:left">Boolean</td>
<td style="text-align:left">“boolean”</td>
</tr>
<tr>
<td style="text-align:left">Number</td>
<td style="text-align:left">“number”</td>
</tr>
<tr>
<td style="text-align:left">String</td>
<td style="text-align:left">“string”</td>
</tr>
<tr>
<td style="text-align:left">Symbol</td>
<td style="text-align:left">“symbol”</td>
</tr>
<tr>
<td style="text-align:left">Object (ordinary and does not implement [[Call]])</td>
<td style="text-align:left">“object”</td>
</tr>
<tr>
<td style="text-align:left">Object (standard exotic and does not implement [[Call]])</td>
<td style="text-align:left">“object”</td>
</tr>
<tr>
<td style="text-align:left">Object (implements [[Call]])</td>
<td style="text-align:left">“function”</td>
</tr>
<tr>
<td style="text-align:left">Object (non-standard exotic and does not implement [[Call]])</td>
<td style="text-align:left">Implementation-defined. Must not be “undefined”, “boolean”,  “function”, “number”, “symbol”, or “string”.</td>
</tr>
</tbody>
</table>
<p>另外，如果直接用<code>typeof</code>来判断 NaN 的话，它会返回<code>&quot;number&quot;</code>，对于 NaN 我们可以用<code>isNaN</code>方法来判断是否一个数字。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typeof</span> <span class="literal">NaN</span>; <span class="comment">// "number"</span></div><div class="line"><span class="built_in">isNaN</span>(<span class="literal">NaN</span>); <span class="comment">// true</span></div></pre></td></tr></table></figure></p>
<h3 id="Object-prototype-toString"><a href="#Object-prototype-toString" class="headerlink" title="Object.prototype.toString()"></a>Object.prototype.toString()</h3><p>我们可以利用<code>Object.prototype.toString.call()</code>或者<code>Object.prototype.toString.apply()</code>这两个方法判断 Object 的类型，以及 null：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Object</span>.prototype.toString.call(<span class="literal">undefined</span>);   <span class="comment">// "[object Undefined]"</span></div><div class="line"><span class="built_in">Object</span>.prototype.toString.call(<span class="keyword">new</span> <span class="built_in">Date</span>);    <span class="comment">// "[object Date]"</span></div><div class="line"><span class="built_in">Object</span>.prototype.toString.call(<span class="keyword">new</span> <span class="built_in">String</span>);  <span class="comment">// "[object String]"</span></div><div class="line"><span class="built_in">Object</span>.prototype.toString.call(<span class="built_in">Math</span>);        <span class="comment">// "[object Math]"</span></div><div class="line"><span class="built_in">Object</span>.prototype.toString.call(<span class="literal">null</span>);        <span class="comment">// "[object Null]"</span></div></pre></td></tr></table></figure></p>
<p>ECMAScript 19.1.3.6 明确定义 Object.prototype.toString()：</p>
<ol>
<li>If the <code>this</code> value is <code>undefined</code>, return <code>&quot;[object Undefined]&quot;</code>.</li>
<li>If the <code>this</code> value is <code>null</code>, return <code>&quot;[object Null]&quot;</code>.</li>
<li>Let <code>O</code> be ! <a href="https://tc39.github.io/ecma262/#sec-toobject" rel="external nofollow noopener noreferrer" target="_blank">ToObject</a>(<code>this</code> value).</li>
<li>Let <code>isArray</code> be ? <a href="https://tc39.github.io/ecma262/#sec-isarray" rel="external nofollow noopener noreferrer" target="_blank">IsArray</a>(<code>O</code>).</li>
<li>If <code>isArray</code> is <code>true</code>, let <code>builtinTag</code> be <code>&quot;Array&quot;</code>.</li>
<li>Else if <code>O</code> is a String exotic object, let <code>builtinTag</code> be <code>&quot;String&quot;</code>.</li>
<li>Else if <code>O</code> has a [[ParameterMap]] internal slot, let <code>builtinTag</code> be <code>&quot;Arguments&quot;</code>.</li>
<li>Else if <code>O</code> has a [[Call]] internal method, let <code>builtinTag</code> be <code>&quot;Function&quot;</code>.</li>
<li>Else if <code>O</code> has an [[ErrorData]] internal slot, let <code>builtinTag</code> be <code>&quot;Error&quot;</code>.</li>
<li>Else if <code>O</code> has a [[BooleanData]] internal slot, let <code>builtinTag</code> be <code>&quot;Boolean&quot;</code>.</li>
<li>Else if <code>O</code> has a [[NumberData]] internal slot, let <code>builtinTag</code> be <code>&quot;Number&quot;</code>.</li>
<li>Else if <code>O</code> has a [[DateValue]] internal slot, let <code>builtinTag</code> be <code>&quot;Date&quot;</code>.</li>
<li>Else if <code>O</code> has a [[RegExpMatcher]] internal slot, let <code>builtinTag</code> be <code>&quot;RegExp&quot;</code>.</li>
<li>Else, let <code>builtinTag</code> be <code>&quot;Object&quot;</code>.</li>
<li>Let <code>tag</code> be ? <a href="https://tc39.github.io/ecma262/#sec-get-o-p" rel="external nofollow noopener noreferrer" target="_blank">Get</a>(<code>O</code>, @@toStringTag).</li>
<li>If <a href="https://tc39.github.io/ecma262/#sec-ecmascript-data-types-and-values" rel="external nofollow noopener noreferrer" target="_blank">Type</a>(<code>tag</code>) is not String, let <code>tag</code> be <code>builtinTag</code>.</li>
<li>Return the String that is the result of concatenating <code>&quot;[object &quot;</code>, <code>tag</code>, and <code>&quot;]&quot;</code>.</li>
</ol>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ol>
<li><a href="https://tc39.github.io/ecma262/#sec-ecmascript-overview" rel="external nofollow noopener noreferrer" target="_blank">ECMAScript® 2018 Language Specification</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;每一种编程语言都有数据结构，但他们各有不同之处。JavaScript 是一种动态语言，变量的类型不用提前声明，你可以使用同一个变量来保存不同的数据类型。&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class
    
    </summary>
    
    
      <category term="JavaScript" scheme="https://calpa.me/Tags/JavaScript/"/>
    
      <category term="ECMAScript" scheme="https://calpa.me/Tags/ECMAScript/"/>
    
  </entry>
  
  <entry>
    <title>React 組件生命週期 - 加載組件</title>
    <link href="https://calpa.me/2017/05/16/react-component-lifecycle/"/>
    <id>https://calpa.me/2017/05/16/react-component-lifecycle/</id>
    <published>2017-05-16T14:40:00.000Z</published>
    <updated>2017-05-18T06:07:19.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="組件"><a href="#組件" class="headerlink" title="組件"></a>組件</h2><p><code>React</code>提供<code>React.Component</code>，我們可以透過使用組件，拆分UI為可以重複使用的獨立部分。<code>React.Component</code>是一個抽象的base class。我們甚少直接運用<code>React.Component</code>，通常是透過創建一個子類，並使用<code>render()</code>方法。</p>
<p>例子：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Greeting</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">return</span> &lt;h1&gt;Hello, &#123;this.props.name&#125;&lt;/h1&gt;;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>如果你不選擇使用ES6，你可以使用模組<code>create-react-class</code>。你可以參考<a href="https://facebook.github.io/react/docs/react-without-es6.html" rel="external nofollow noopener noreferrer" target="_blank">React Without ES6</a>。<br>下面這一段和ES6的寫法效果一樣：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> createReactClass = <span class="built_in">require</span>(<span class="string">'create-react-class'</span>);</div><div class="line"><span class="keyword">var</span> Greeting = createReactClass(&#123;</div><div class="line">  <span class="attr">render</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> &lt;h1&gt;Hello, &#123;this.props.name&#125;&lt;/h1&gt;;</div><div class="line">  &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<h2 id="組件生命週期"><a href="#組件生命週期" class="headerlink" title="組件生命週期"></a>組件生命週期</h2><p>每一個組件都會有幾個生命週期的方法，你可以在程序運行的指定時間，透過覆蓋他們來運行特定代碼。對於這些方法，我們會用<code>will-</code>來表示它會在某些事情發生之前的一刻被調用，而<code>did-</code>則是表示它會在某些事情發生之後的一刻被調用。本文會細說加載組件中發生了什麼事情。</p>
<h3 id="加載-Mounting"><a href="#加載-Mounting" class="headerlink" title="加載 (Mounting)"></a>加載 (Mounting)</h3><ol>
<li><code>constructor()</code></li>
<li><code>componentWillMount()</code></li>
<li><code>render()</code></li>
<li><code>componentDidMount()</code></li>
</ol>
<h3 id="更新-Updating"><a href="#更新-Updating" class="headerlink" title="更新 (Updating)"></a>更新 (Updating)</h3><p>當 props 或者 state 更新的時候，下面這些方法會被調用：</p>
<ol>
<li>componentWillReceiveProps()</li>
<li>shouldComponentUpdate()</li>
<li>componentWillUpdate()</li>
<li>render()</li>
<li>componentDidUpdate()</li>
</ol>
<h3 id="斷開連接-Unmounting"><a href="#斷開連接-Unmounting" class="headerlink" title="斷開連接 (Unmounting)"></a>斷開連接 (Unmounting)</h3><p>當組件脫離DOM的時候，下面這個方法回被調用：</p>
<ol>
<li>componentWillUnmount()</li>
</ol>
<h3 id="其他內置方法"><a href="#其他內置方法" class="headerlink" title="其他內置方法"></a>其他內置方法</h3><ol>
<li>setState()</li>
<li>forceUpdate()</li>
</ol>
<p>我們會在下文討論一下React是如何加載組件。</p>
<img src="/img/react-mount.svg" width="300" title="auto React LifeCycle Mount">
<h4 id="constructor-NaN"><a href="#constructor-NaN" class="headerlink" title="constructor()"></a>constructor()</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">constructor</span>(props)</div></pre></td></tr></table></figure>
<p>在React加載組件之前，它會調用<code>constructor</code>。你可以在<code>constructor</code>中去賦予組件的初始<code>state</code>。如果你使用<code>props</code>創造初始<code>state</code>的話，這也是可以接受的。這會很有效地<code>fork</code>組件的<code>props</code>，然後賦予初始<code>state</code>的值。</p>
<p>有效的<code>constructor</code>例子：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">constructor</span>(props) &#123;</div><div class="line">  <span class="keyword">super</span>(props);</div><div class="line">  <span class="keyword">this</span>.state = &#123;</div><div class="line">    <span class="attr">color</span>: props.initialColor</div><div class="line">  &#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h5 id="注意事項"><a href="#注意事項" class="headerlink" title="注意事項"></a>注意事項</h5><ol>
<li>如果你不需要賦予初始<code>state</code>，你不需要在 React 的組件中植入<code>constructor</code>。</li>
<li>當你使用在<code>React.Component</code>的子類中加載<code>constructor()</code>方法時，你應該第一時間調用<code>super(props)</code>，而不是在任何statement之後。不然，我們獲取<code>this.props</code>值的時候，它會是<code>undefined</code>。</li>
<li>在一些類似上面的例子，<code>state</code>未必會及時與任何的<code>props</code>更新。如果你需要同步<code>state</code>的話，你其實是想要<a href="https://facebook.github.io/react/docs/lifting-state-up.html" rel="external nofollow noopener noreferrer" target="_blank">lift the state up</a>。</li>
</ol>
<h4 id="componentWillMount"><a href="#componentWillMount" class="headerlink" title="componentWillMount()"></a>componentWillMount()</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">componentWillMount()</div></pre></td></tr></table></figure>
<p>它會在組件<code>render()</code>之前執行一次，然後不能再執行。如果在這裡定義了<code>setState</code>方法，頁面只會在加載之前更新一次，不會重複渲染。React 官方推薦使用<code>constructor()</code>代替這個方法。</p>
<h4 id="render"><a href="#render" class="headerlink" title="render()"></a>render()</h4><p><code>React.Component</code>必須有這個方法，即使你返回<code>null</code>，或者<code>false</code>。當你返回<code>null</code>，或者<code>false</code>的時候，<code>ReactDOM.findDOMNode(this)</code> 會返回<code>null</code>。</p>
<p>當它被調用的時候，它會檢查<code>this.props</code>和<code>this.state</code>，然後返回一個單獨的 React 元素。這個元素會是一個純正的<code>DOM</code>組件，例如<div>，或者自定義的 composite 組件。</div></p>
<h5 id="注意事項-1"><a href="#注意事項-1" class="headerlink" title="注意事項"></a>注意事項</h5><ol>
<li><code>render()</code>方法應該是<code>pure</code>：它不會改寫任何組件的<code>state</code>。每一次調用它都會返回同樣的結果。它不會直接接觸到瀏覽器層面。</li>
<li>如果你需要接觸到瀏覽器層面，你應該在<code>componentDidMount()</code>或者其他生命週期方法中接觸瀏覽器。</li>
<li>保持<code>render()</code>方法 pure 來讓組件更加容易被人理解。</li>
</ol>
<h4 id="componentDidMount"><a href="#componentDidMount" class="headerlink" title="componentDidMount()"></a>componentDidMount()</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">componentDidMount()</div></pre></td></tr></table></figure>
<p>它會在組件加載之後執行一次。如果你的初始程序需要DOM nodes，你應該在這裡寫。如果你需要從其他地方加載資料，這裡也是一個不錯的地方去執行網絡請求。如果在這裡定義了<code>setState</code>方法，會觸發重複渲染。</p>
<h4 id="測試代碼"><a href="#測試代碼" class="headerlink" title="測試代碼"></a>測試代碼</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Greeting</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line">  _log(method, args) &#123;</div><div class="line">    <span class="built_in">console</span>.log(method, args);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">constructor</span>(props) &#123;</div><div class="line">    <span class="keyword">super</span>(props);</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'constructor'</span>, props);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">this</span>._log(<span class="string">'render'</span>, <span class="keyword">this</span>.props.name);</div><div class="line">    <span class="keyword">return</span> &lt;h1&gt;Hello, &#123;this.props.name&#125;&lt;/h1&gt;;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  componentWillMount() &#123;</div><div class="line">    <span class="keyword">this</span>._log(<span class="string">'componentWillMount'</span>);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  componentDidMount() &#123;</div><div class="line">    <span class="keyword">this</span>._log(<span class="string">'componentDidMount'</span>);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">ReactDOM.render(</div><div class="line">  &lt;Greeting name="Calpa" /&gt;,</div><div class="line">  document.getElementById('app')</div><div class="line">);</div></pre></td></tr></table></figure>
<p>Console Output:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&quot;constructor&quot; Object &#123;</div><div class="line">  name: &quot;Calpa&quot;</div><div class="line">&#125;</div><div class="line">&quot;componentWillMount&quot; undefined</div><div class="line">&quot;render&quot; &quot;Calpa&quot;</div><div class="line">&quot;componentDidMount&quot; undefined</div></pre></td></tr></table></figure></p>
<p>你可以在<a href="https://codepen.io/calpa/full/xdJrQm/" rel="external nofollow noopener noreferrer" target="_blank">CodePen</a>中獲取，並測試這段代碼。</p>
<p>不知道拿哪一張當封面好。。。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;組件&quot;&gt;&lt;a href=&quot;#組件&quot; class=&quot;headerlink&quot; title=&quot;組件&quot;&gt;&lt;/a&gt;組件&lt;/h2&gt;&lt;p&gt;&lt;code&gt;React&lt;/code&gt;提供&lt;code&gt;React.Component&lt;/code&gt;，我們可以透過使用組件，拆分UI為可以重複使
    
    </summary>
    
    
      <category term="Web" scheme="https://calpa.me/Tags/Web/"/>
    
      <category term="React" scheme="https://calpa.me/Tags/React/"/>
    
  </entry>
  
  <entry>
    <title>初探正則表達式</title>
    <link href="https://calpa.me/2017/05/06/introduction-to-regular-expression/"/>
    <id>https://calpa.me/2017/05/06/introduction-to-regular-expression/</id>
    <published>2017-05-06T12:13:00.000Z</published>
    <updated>2017-05-18T06:07:19.000Z</updated>
    
    <content type="html"><![CDATA[<p>正則表達式是一個非常簡單的語法，但它也是神兵利器，可以說是程序員必須要理解的工具之一。它就像一本會不斷成長的寶刀，隨著程序員對它的理解，它的威力也跟著增強。</p>
<p>一些當下熱門的編輯器(Atom, Sublime)或者 IDE (WebStorm)都支持正則表達式尋找。如果你有瞭解過JavaScript中的方法 (exec, test, match, search, replace, split)的話，做下面的題目時會更加得心應手。</p>
<h2 id="任務目的"><a href="#任務目的" class="headerlink" title="任務目的"></a>任務目的</h2><ol>
<li>掌握正則表達式編寫規則</li>
<li>瞭解正則表達式的特殊字元</li>
<li>瞭解JavaScript提供的正則表達式相關方法</li>
<li>能用正則表達式做一些簡單文本或者數字校驗</li>
</ol>
<h2 id="任務描述"><a href="#任務描述" class="headerlink" title="任務描述"></a>任務描述</h2><ol>
<li><p>編寫一個匹配URL的正則表達式，測試用例參照但不限於：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">https://calpa.me/2017/05/06/introduction-to-regular-expression/</div><div class="line">https://google.com</div><div class="line">https://github.com/leviding/T-Plan/blob/master/tasks/task0005/README.md</div><div class="line">http://blog.csdn.net/</div></pre></td></tr></table></figure>
</li>
<li><p>編寫一個驗證電子郵箱地址的正則表達式，測試用例參照但不限於：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">myEmail@gmail.com</div><div class="line">steve.jobs@apple.com</div></pre></td></tr></table></figure>
</li>
</ol>
<p>完成任務之後，可以對比別人的實現方案，但不建議未嘗試就直接搜索答案。<br>在正則表達式的世界中，一個問題往往不止一種方案，可以嘗試多種方法。</p>
<h2 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h2><p>你可以想利用一些工具，例如在線的正則表達式工具 (<a href="http://regexr.com/" rel="external nofollow noopener noreferrer" target="_blank">RegExr</a>, <a href="https://regex101.com/" rel="external nofollow noopener noreferrer" target="_blank">Regex101</a>)來幫助學習、編寫正則表達式。</p>
<h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><ol>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions" rel="external nofollow noopener noreferrer" target="_blank">MDN Regular Expressions</a>: 瞭解JavaScript中正則表達式的基本知識</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;正則表達式是一個非常簡單的語法，但它也是神兵利器，可以說是程序員必須要理解的工具之一。它就像一本會不斷成長的寶刀，隨著程序員對它的理解，它的威力也跟著增強。&lt;/p&gt;
&lt;p&gt;一些當下熱門的編輯器(Atom, Sublime)或者 IDE (WebStorm)都支持正則表達式尋
    
    </summary>
    
    
      <category term="JavaScript" scheme="https://calpa.me/Tags/JavaScript/"/>
    
      <category term="Regular Expression" scheme="https://calpa.me/Tags/Regular-Expression/"/>
    
  </entry>
  
  <entry>
    <title>CSS垂直置中的4種方法</title>
    <link href="https://calpa.me/2017/05/06/vertical-align-with-css/"/>
    <id>https://calpa.me/2017/05/06/vertical-align-with-css/</id>
    <published>2017-05-06T04:59:00.000Z</published>
    <updated>2017-05-06T06:33:18.000Z</updated>
    
    <content type="html"><![CDATA[<p>這是一道送分題，如果想要垂直置中元素的話，起碼會有四種方法：<strong>padding</strong>, <strong>line-height</strong>, <strong>table</strong> 和 <strong>Flexbox</strong>。使用Flexbox的話，日後要更改元素的位置會非常方便。</p>
<h2 id="padding"><a href="#padding" class="headerlink" title="padding"></a>padding</h2><p>如果你要置中的元素是<code>inine</code>或者是<code>inline-*</code>的話，比如說文字和鏈接，你可以用<strong>padding</strong>來實現垂直置中：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">.vCenter &#123;</div><div class="line">  padding-top: 30px;</div><div class="line">  padding-bottom: 30px;</div><div class="line">  background: #eee;</div><div class="line">  text-align: center;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>因為<code>padding-top</code>和<code>padding-bottom</code>的數值是一樣，所以我們可以透過這個方法來實現垂直置中。</p>
<iframe height="265" scrolling="no" title="padding 垂直置中" src="//codepen.io/calpa/embed/pPdowv/?height=265&theme-id=0&default-tab=css,result&embed-version=2" frameborder="no" allowtransparency="true" allowfullscreen="true" style="width: 100%;">See the Pen <a href="https://codepen.io/calpa/pen/pPdowv/" rel="external nofollow noopener noreferrer" target="_blank">padding 垂直置中</a> by Calpa Liu (<a href="http://codepen.io/calpa" rel="external nofollow noopener noreferrer" target="_blank">@calpa</a>) on <a href="http://codepen.io" rel="external nofollow noopener noreferrer" target="_blank">CodePen</a>.<br></iframe>

<h2 id="line-height"><a href="#line-height" class="headerlink" title="line-height"></a>line-height</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">.anotherCenter &#123;</div><div class="line">  height: 100px;</div><div class="line">  line-height: 100px;</div><div class="line">  background: #6cf;</div><div class="line">  text-align: center;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果你不想用<code>padding</code>來實現垂直置中的話，你可以利用<code>line-height</code>等於<code>height</code>。</p>
<iframe height="265" scrolling="no" title="line-height 垂直置中" src="//codepen.io/calpa/embed/JNOjJJ/?height=265&theme-id=0&default-tab=css,result&embed-version=2" frameborder="no" allowtransparency="true" allowfullscreen="true" style="width: 100%;">See the Pen <a href="https://codepen.io/calpa/pen/JNOjJJ/" rel="external nofollow noopener noreferrer" target="_blank">line-height 垂直置中</a> by Calpa Liu (<a href="http://codepen.io/calpa" rel="external nofollow noopener noreferrer" target="_blank">@calpa</a>) on <a href="http://codepen.io" rel="external nofollow noopener noreferrer" target="_blank">CodePen</a>.<br></iframe>

<h2 id="table"><a href="#table" class="headerlink" title="table"></a>table</h2><p>你可以透過<code>valign</code>來控制位置。</p>
<p>另外，你可以利用<code>display: table-cell</code>來改變顯示的方式。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">.fakeTable &#123;</div><div class="line">  height: 200px;</div><div class="line">  width: 200px;</div><div class="line">  display: table-cell;</div><div class="line">  border: 1px solid black;</div><div class="line">  text-align: center;</div><div class="line">  vertical-align: middle;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<iframe height="265" scrolling="no" title="Table 垂直置中" src="//codepen.io/calpa/embed/xdPxLr/?height=265&theme-id=0&default-tab=html,result&embed-version=2" frameborder="no" allowtransparency="true" allowfullscreen="true" style="width: 100%;">See the Pen <a href="http://codepen.io/calpa/pen/xdPxLr/" rel="external nofollow noopener noreferrer" target="_blank">Table 垂直置中</a> by Calpa Liu (<a href="http://codepen.io/calpa" rel="external nofollow noopener noreferrer" target="_blank">@calpa</a>) on <a href="http://codepen.io" rel="external nofollow noopener noreferrer" target="_blank">CodePen</a>.<br></iframe>

<h2 id="Flexbox"><a href="#Flexbox" class="headerlink" title="Flexbox"></a>Flexbox</h2><p>另外，你也可以使用<strong>Flexbox</strong>來實現垂直置中，只需要寫justify-content和align-items就可以了。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">.vertical-center &#123;</div><div class="line">  display: flex;</div><div class="line">  flex-direction: column;</div><div class="line">  justify-content: center;</div><div class="line">  align-items: center;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<iframe height="265" scrolling="no" title="FlexBox 垂直置中" src="//codepen.io/calpa/embed/NjwWjV/?height=265&theme-id=0&default-tab=css,result&embed-version=2" frameborder="no" allowtransparency="true" allowfullscreen="true" style="width: 100%;">See the Pen <a href="https://codepen.io/calpa/pen/NjwWjV/" rel="external nofollow noopener noreferrer" target="_blank">FlexBox 垂直置中</a> by Calpa Liu (<a href="http://codepen.io/calpa" rel="external nofollow noopener noreferrer" target="_blank">@calpa</a>) on <a href="http://codepen.io" rel="external nofollow noopener noreferrer" target="_blank">CodePen</a>.<br></iframe>

<h2 id="延伸閱讀"><a href="#延伸閱讀" class="headerlink" title="延伸閱讀"></a>延伸閱讀</h2><ol>
<li><a href="https://css-tricks.com/snippets/css/a-guide-to-flexbox/" rel="external nofollow noopener noreferrer" target="_blank">A Complete Guide to Flexbox | CSS-Tricks</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Flexible_Box_Layout/Using_CSS_flexible_boxes" rel="external nofollow noopener noreferrer" target="_blank">Using CSS Flexible Boxes - CSS | MDN</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;這是一道送分題，如果想要垂直置中元素的話，起碼會有四種方法：&lt;strong&gt;padding&lt;/strong&gt;, &lt;strong&gt;line-height&lt;/strong&gt;, &lt;strong&gt;table&lt;/strong&gt; 和 &lt;strong&gt;Flexbox&lt;/strong&gt;。使
    
    </summary>
    
    
      <category term="CSS" scheme="https://calpa.me/Tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript 數組去重</title>
    <link href="https://calpa.me/2017/05/05/javascript-array/"/>
    <id>https://calpa.me/2017/05/05/javascript-array/</id>
    <published>2017-05-05T14:53:00.000Z</published>
    <updated>2017-05-18T06:07:19.000Z</updated>
    
    <content type="html"><![CDATA[<p>顧著做化工模擬功課，差點忘記怎樣寫代碼。。。</p>
<h1 id="內置方法"><a href="#內置方法" class="headerlink" title="內置方法"></a>內置方法</h1><p>使用JavaScript內置的去重複方法<code>Set()</code>，比如說：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">let arr = [1, 2, 3, 3, 4, 5];</div><div class="line">Array.from(new Set(arr)); // [1, 2, 3, 4, 5]</div><div class="line">[...new Set(arr)]; // [1, 2, 3, 4, 5]</div></pre></td></tr></table></figure>
<h2 id="第一時間會想到的方法"><a href="#第一時間會想到的方法" class="headerlink" title="第一時間會想到的方法"></a>第一時間會想到的方法</h2><ol>
<li>雙重遍歷</li>
<li>使用hash table</li>
</ol>
<h2 id="Underscore"><a href="#Underscore" class="headerlink" title="Underscore"></a>Underscore</h2><p>最後來看一下underscore是如何實現unique()方法吧。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">_.uniq = _.unique = function(array, isSorted, iteratee, context) &#123;</div><div class="line">  // 如果數組不是已經排序</div><div class="line">  if (!_.isBoolean(isSorted)) &#123;</div><div class="line">    // 將function(array, isSorted, iteratee, context)</div><div class="line">    // 換成function(array, false, isSorted, iteratee)</div><div class="line">    context = iteratee;</div><div class="line">    iteratee = isSorted;</div><div class="line">    isSorted = false;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  // 如果存在iteratee</div><div class="line">  if (iteratee != null) iteratee = cb(iteratee, context);</div><div class="line">  var result = [];</div><div class="line">  var seen = [];</div><div class="line">  for (var i = 0, length = getLength(array); i &lt; length; i++) &#123;</div><div class="line">    var value = array[i],</div><div class="line">        computed = iteratee ? iteratee(value, i, array) : value;</div><div class="line">    // 如果已經排序，就直接增加數值(第一個值)。</div><div class="line">    // 非0 就是 true</div><div class="line">    // 或者see不是computed</div><div class="line">    if (isSorted) &#123;</div><div class="line">      if (!i || seen !== computed) result.push(value);</div><div class="line">      seen = computed;</div><div class="line">    &#125; else if (iteratee) &#123;</div><div class="line">      // 使用_.contains查詢數組裡面是否擁有這個值</div><div class="line">      if (!_.contains(seen, computed)) &#123;</div><div class="line">        seen.push(computed);</div><div class="line">        result.push(value);</div><div class="line">      &#125;</div><div class="line">    &#125; else if (!_.contains(result, value)) &#123;</div><div class="line">      result.push(value);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  return result;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;顧著做化工模擬功課，差點忘記怎樣寫代碼。。。&lt;/p&gt;
&lt;h1 id=&quot;內置方法&quot;&gt;&lt;a href=&quot;#內置方法&quot; class=&quot;headerlink&quot; title=&quot;內置方法&quot;&gt;&lt;/a&gt;內置方法&lt;/h1&gt;&lt;p&gt;使用JavaScript內置的去重複方法&lt;code&gt;Set()&lt;
    
    </summary>
    
    
      <category term="JavaScript" scheme="https://calpa.me/Tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>Redux push()是怎樣寫的？</title>
    <link href="https://calpa.me/2017/05/03/redux-array-push-function/"/>
    <id>https://calpa.me/2017/05/03/redux-array-push-function/</id>
    <published>2017-05-03T15:20:00.000Z</published>
    <updated>2017-05-18T06:07:19.000Z</updated>
    
    <content type="html"><![CDATA[<p>本來你可以直接改寫原本的數組，比如利用這個方法：<code>arr.push(item)</code>。<br>但在Redux裡面不可以這樣寫，因為會改寫原本數組，違反了immutable的原則。<br>因此，要這樣寫： <code>arr: [...state.arr, action.newItem]</code>。</p>
<p>例子：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">import &#123; ADD_ITEM &#125; from &apos;../Actions/UserActions&apos;</div><div class="line">const initialUserState = &#123;</div><div class="line">  arr: []</div><div class="line">&#125;</div><div class="line"></div><div class="line">export default function userState(state = initialUserState, action) &#123;</div><div class="line">  console.log(arr);</div><div class="line">  switch (action.type) &#123;</div><div class="line">    case ADD_ITEM:</div><div class="line">      return &#123;</div><div class="line">        ...state,</div><div class="line">        arr: [...state.arr, action.newItem]</div><div class="line">      &#125;</div><div class="line"></div><div class="line">    default:</div><div class="line">      return state;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>另外，你也可以利用<code>concat()</code>方法。</p>
<h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><ol>
<li><a href="http://stackoverflow.com/questions/40911194/how-do-i-add-an-element-to-array-in-reducer-of-react-native-redux" rel="external nofollow noopener noreferrer" target="_blank">How do I add an element to array in reducer of React native redux? - stackoverflow</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本來你可以直接改寫原本的數組，比如利用這個方法：&lt;code&gt;arr.push(item)&lt;/code&gt;。&lt;br&gt;但在Redux裡面不可以這樣寫，因為會改寫原本數組，違反了immutable的原則。&lt;br&gt;因此，要這樣寫： &lt;code&gt;arr: [...state.arr, 
    
    </summary>
    
    
      <category term="JavaScript" scheme="https://calpa.me/Tags/JavaScript/"/>
    
      <category term="Redux" scheme="https://calpa.me/Tags/Redux/"/>
    
  </entry>
  
  <entry>
    <title>如何製作svg sprite</title>
    <link href="https://calpa.me/2017/05/02/how-to-generate-svg-sprite/"/>
    <id>https://calpa.me/2017/05/02/how-to-generate-svg-sprite/</id>
    <published>2017-05-02T08:51:00.000Z</published>
    <updated>2017-05-03T15:19:27.000Z</updated>
    
    <content type="html"><![CDATA[<p>使用SVG Sprite的好處是可以減少HTTP Request。</p>
<h2 id="製作方法"><a href="#製作方法" class="headerlink" title="製作方法"></a>製作方法</h2><p>你可以選擇手動把一張一張圖合在一起，也可以使用gulp-svg-sprite自動生成雪碧圖。</p>
<p>另外，你可以使用<a href="http://jkphl.github.io/svg-sprite/" rel="external nofollow noopener noreferrer" target="_blank">svg-sprite設置</a>幫助寫JSON, Node.js, Gruntfile 或者 Gulpfile的設定檔案。</p>
<h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><p>其中一種方法是使用<code>&lt;use&gt;</code>。我們可以如同平常一樣使用svg，唯一分別是裡面的內容換成<code>&lt;use&gt;</code>，然後把鏈接加上id來調用圖像。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;svg&gt;</div><div class="line">  &lt;use href=&quot;img/sprite.svg#item&quot;&gt;&lt;/use&gt;</div><div class="line">&lt;/svg&gt;</div></pre></td></tr></table></figure>
<h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><p><a href="https://github.com/jkphl/gulp-svg-sprite" rel="external nofollow noopener noreferrer" target="_blank">Github Repo: gulp-svg-sprite</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;使用SVG Sprite的好處是可以減少HTTP Request。&lt;/p&gt;
&lt;h2 id=&quot;製作方法&quot;&gt;&lt;a href=&quot;#製作方法&quot; class=&quot;headerlink&quot; title=&quot;製作方法&quot;&gt;&lt;/a&gt;製作方法&lt;/h2&gt;&lt;p&gt;你可以選擇手動把一張一張圖合在一起，也可以
    
    </summary>
    
    
      <category term="SVG" scheme="https://calpa.me/Tags/SVG/"/>
    
  </entry>
  
  <entry>
    <title>CreateListFromArrayLike called on non-object 報錯的解決方法</title>
    <link href="https://calpa.me/2017/05/01/CreateListFromArrayLike-problem-solution/"/>
    <id>https://calpa.me/2017/05/01/CreateListFromArrayLike-problem-solution/</id>
    <published>2017-05-01T14:50:00.000Z</published>
    <updated>2017-05-18T06:07:19.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="解決方法"><a href="#解決方法" class="headerlink" title="解決方法"></a>解決方法</h2><p>仔細再看一下到底你是如何調用<code>apply</code>的。。。</p>
<p>你可能在使用Function.prototype.apply的時候不夠熟練，把<code>call</code>和<code>apply</code>的用法混在一起。。。。<code>call</code>是用0個或者更多的arguments，而<code>apply</code>則是用一個數組。</p>
<h2 id="錯誤例子"><a href="#錯誤例子" class="headerlink" title="錯誤例子"></a>錯誤例子</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Math.max.apply(null, 1, 2, 3);</div><div class="line">// Uncaught TypeError: CreateListFromArrayLike called on non-object</div></pre></td></tr></table></figure>
<h2 id="正確例子"><a href="#正確例子" class="headerlink" title="正確例子"></a>正確例子</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Math.max.call(null, 1, 2, 3); // 3</div><div class="line">Math.max.apply(null, [1, 2, 5, 10]); // 10</div></pre></td></tr></table></figure>
<h2 id="細節"><a href="#細節" class="headerlink" title="細節"></a>細節</h2><p>當調用<code>Function.prototype.apply</code>的時候，它會調用內置抽象操作：<code>CreateListFromArrayLike</code>。</p>
<h2 id="CreateListFromArrayLike"><a href="#CreateListFromArrayLike" class="headerlink" title="CreateListFromArrayLike"></a>CreateListFromArrayLike</h2><p><code>CreateListFromArrayLike ( obj [ , elementTypes ] )</code></p>
<p>CreateListFromArrayLike 是一個ECMAScript的內置抽象操作 (Abstract Operation)，用於建立一個List的值，它的元素由類似數組的對象的索引屬性提供。<code>elementTypes</code>是一個List，只允許自身建立的<code>list</code>擁有ECMAScript Language 類型的值，比如<code>undefined, null, boolean</code>等。在調用的時候，它會執行以下步驟:</p>
<ol>
<li>如果沒有定義<code>elementTypes</code>的話，它會被定義為« Undefined, Null, Boolean, String, Symbol, Number, Object »。</li>
<li>如果<code>Type(obj)</code>的類型不是Object，拋出TypeError 錯誤。</li>
<li>定義<code>len</code>為<code>obj</code>的length。</li>
<li>建立一個空的List <code>list</code>。</li>
<li>定義<code>index</code>為0</li>
<li>當index小於len的時候，重複以下步驟：<ol>
<li>定義<code>indexName</code>為!ToString(index)</li>
<li>定義<code>next</code> 為?Get(obj, indexName)</li>
<li>如果<code>Type(next)</code>的類型不存在於<code>elementType</code>裡面，拋出TypeError 錯誤。</li>
<li>在<code>list</code>的最後增加next //<code>list.push(next)</code></li>
<li><code>index</code>的值加1</li>
</ol>
</li>
<li>返回<code>list</code></li>
</ol>
<h2 id="延伸閱讀"><a href="#延伸閱讀" class="headerlink" title="延伸閱讀"></a>延伸閱讀</h2><ol>
<li>看V8是怎樣實現<code>Function.prototype.apply</code></li>
<li>看V8是怎樣實現<code>CreateListFromArrayLike</code></li>
</ol>
<h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><ol>
<li><a href="https://tc39.github.io/ecma262/#sec-function.prototype.apply" rel="external nofollow noopener noreferrer" target="_blank">Function.prototype.apply - ECMAScript 2018</a></li>
<li>踩過的坑。。。</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;解決方法&quot;&gt;&lt;a href=&quot;#解決方法&quot; class=&quot;headerlink&quot; title=&quot;解決方法&quot;&gt;&lt;/a&gt;解決方法&lt;/h2&gt;&lt;p&gt;仔細再看一下到底你是如何調用&lt;code&gt;apply&lt;/code&gt;的。。。&lt;/p&gt;
&lt;p&gt;你可能在使用Function.pro
    
    </summary>
    
    
      <category term="JavaScript" scheme="https://calpa.me/Tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>Hello World的四+N種方法</title>
    <link href="https://calpa.me/2017/04/27/n-ways-to-output-hello-world/"/>
    <id>https://calpa.me/2017/04/27/n-ways-to-output-hello-world/</id>
    <published>2017-04-27T06:34:00.000Z</published>
    <updated>2017-05-18T06:07:19.000Z</updated>
    
    <content type="html"><![CDATA[<p>在這些時候，我可以附和著笑，老闆是決不責備的。而且老闆見了他，也每每這樣問他，引人發笑。他自己知道不能和他們談天，便只好向孩子說話。有一回對我說道：「你讀過書麼？」我略略點一點頭。他說：「讀過書，。。。我便考你一考。代碼的Hello World，怎樣寫的？」他等了許久，很懇切的說道：「不能寫罷？。。。我教給你，記著！這些字應該記著。將來做老闆的時候，Debug要用。」我暗想我和老闆的等級還很遠呢，而且我們老闆也從不將代碼上傳；又好笑，又不耐煩，懶懶的答他道：「誰要你教，不就是用alert輸出嘛」他顯出極高興的樣子，將兩個指頭的長指甲敲著鍵盤，點頭說：「對呀對呀！。。。Hello World有四樣寫法，你知道麼？」我愈不耐煩了，努著嘴走遠。他剛用指甲蘸了酒，想在鍵盤上打字，見我毫不熱心，便又歎一口氣，顯出極惋惜的樣子。</p>
<h2 id="alert"><a href="#alert" class="headerlink" title="alert()"></a>alert()</h2><p><code>alert(&quot;Hello, World!!&quot;);</code></p>
<h2 id="document-write"><a href="#document-write" class="headerlink" title="document.write()"></a>document.write()</h2><p>直接輸出<code>Hello, World!</code>到document:<br><code>document.write(&#39;Hello, World!&#39;);</code></p>
<h2 id="document-writeln"><a href="#document-writeln" class="headerlink" title="document.writeln()"></a>document.writeln()</h2><p>在現有的document上增加<code>Hello, World!</code>這一行：</p>
<p><code>document.writeln(&#39;Hello, World!&#39;);</code></p>
<h2 id="Function-constructor"><a href="#Function-constructor" class="headerlink" title="Function constructor"></a>Function constructor</h2><p>使用Function constructor, 以及 Immediately-Invoked Function Expression (IIFE):<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">new Function ([arg1[, arg2[, ...argN]],] functionBody);</div><div class="line">(new Function (&apos;console.log(&quot;Hello, World&quot;)&apos;))();</div></pre></td></tr></table></figure></p>
<p>順帶一提，以下三種寫法，結果都是一樣的。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">new Function(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;return a+b+c;&quot;); // 每一個arugument都用,分開</div><div class="line">new Function(&quot;a, b, c&quot;, &quot;return a+b+c;&quot;);      </div><div class="line">new Function(&quot;a,b&quot;, &quot;c&quot;, &quot;return a+b+c;&quot;);</div></pre></td></tr></table></figure></p>
<p>輸出：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">function anonymous(a, b, c</div><div class="line">/*``*/) &#123;</div><div class="line">return a+b+c;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="Function-declaration"><a href="#Function-declaration" class="headerlink" title="Function declaration"></a>Function declaration</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">function sayHello() &#123;</div><div class="line">  console.log(&apos;Hello, World!&apos;);</div><div class="line">&#125;</div><div class="line"></div><div class="line">sayHello(); // Hello, World!</div><div class="line">sayHello    // function sayHello() &#123;</div><div class="line">        //   console.log(&apos;Hello, World!&apos;);</div><div class="line">        // &#125;</div></pre></td></tr></table></figure>
<h2 id="Arrow-Function"><a href="#Arrow-Function" class="headerlink" title="Arrow Function"></a>Arrow Function</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">() =&gt; &#123; console.log(&apos;Hello, World!&apos;)&#125;;</div><div class="line">(() =&gt; &#123; console.log(&apos;Hello, World!&apos;)&#125;)(); // Hello, World!</div></pre></td></tr></table></figure>
<h2 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h2><p>先定義一個Promise：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">var helloPromise = new Promise(function(resolve)&#123;</div><div class="line">    resolve(&quot;Hello, World!&quot;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>如果resolve成功的話，就會輸出”Hello, World!”:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">helloPromise.then(function (value) &#123;</div><div class="line">  console.log(value);</div><div class="line">&#125;).catch(function (error) &#123;</div><div class="line">  console.log(error);</div><div class="line">&#125;); // Hello, World!</div></pre></td></tr></table></figure></p>
<p>當然，你也可以利用Arrow Function這樣寫：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">let helloPromise = new Promise((resolve) =&gt; &#123;</div><div class="line">  resolve(&quot;Hello, World!&quot;);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">helloPromise.then((value) =&gt; &#123;</div><div class="line">  console.log(value);</div><div class="line">&#125;).catch((error) =&gt; &#123;</div><div class="line">  console.log(error);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>有幾回，鄰舍孩子聽得笑聲，也趕熱鬧，圍住了他。他便給他們看代碼，一人一段。孩子看完代碼，仍然不散，眼睛都望著屏幕。他著了慌，伸開五指將屏幕罩住，彎腰下去說道：「不多了，我已經不多了。」直起身又看一看代碼，自己搖頭說：「不多不多！多乎哉？不多也。」於是這一群孩子都在笑聲裏走散了。</p>
<p>他是這樣的使人快活，可是沒有他，別人也便這麼過。</p>
<p>自此以後，又長久沒有看見爪哇文。到了年關，掌櫃取下粉板說：「爪哇文還欠十九行代碼呢！」到第二年的端午，又說「爪哇文還欠十九行代碼呢！」到中秋可是沒有說，再到年關也沒有看見他。</p>
<h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><p><a href="https://tc39.github.io/ecma262/#sec-function-p1-p2-pn-body" rel="external nofollow noopener noreferrer" target="_blank">Function constructor - ECMAScript® 2018 Language Specification</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在這些時候，我可以附和著笑，老闆是決不責備的。而且老闆見了他，也每每這樣問他，引人發笑。他自己知道不能和他們談天，便只好向孩子說話。有一回對我說道：「你讀過書麼？」我略略點一點頭。他說：「讀過書，。。。我便考你一考。代碼的Hello World，怎樣寫的？」他等了許久，很懇
    
    </summary>
    
    
      <category term="JavaScript" scheme="https://calpa.me/Tags/JavaScript/"/>
    
  </entry>
  
</feed>
