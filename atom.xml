<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Calpa</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://calpa.github.io/"/>
  <updated>2017-01-20T11:52:26.000Z</updated>
  <id>http://calpa.github.io/</id>
  
  <author>
    <name>Calpa</name>
    <email>calpaliu@gmail.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>HTML5 Web Storage</title>
    <link href="http://calpa.github.io/2017/01/20/localstorage/"/>
    <id>http://calpa.github.io/2017/01/20/localstorage/</id>
    <published>2017-01-20T11:37:38.000Z</published>
    <updated>2017-01-20T11:52:26.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Storage"><a href="#Storage" class="headerlink" title="Storage"></a>Storage</h1><ul>
<li>HTML5 的 <strong>Web Storage</strong> 包括了兩種儲存方式：<strong>localStorage</strong>及<strong>sessionStorage</strong>。</li>
<li>儲存在Storage中的資料，以key-value pair的形式保存。</li>
<li>Cookie的佔用空間非常小，大小限制于4KB左右，常見的用途是保存賬號登錄信息與登錄狀態。</li>
<li>使用Storage物件時，可以寫<code>localStorage</code>代替<code>window.localStorage</code>。</li>
</ul>
<h2 id="localStorage"><a href="#localStorage" class="headerlink" title="localStorage"></a>localStorage</h2><p>即使用戶關閉瀏覽器，頁面數據依然存在。下一次用戶打開該頁面，便能夠使用該資料。舉個例子，當localStorage擁有userdata，瀏覽器可以獲取用戶資料，瀏覽器會導航用戶到登入後的畫面。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">if (localStorage.getItem(&apos;userdata&apos;)) &#123;</div><div class="line">  login();</div><div class="line">&#125; else &#123;</div><div class="line">  register();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="sessionStorage"><a href="#sessionStorage" class="headerlink" title="sessionStorage"></a>sessionStorage</h2><p>sessionStorage與localStorage相似，但如果用戶關閉當前頁面，sessionStorage中的數據就會被清空。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">window.sessionStorage.setItem(&quot;username&quot;, &quot;calpa&quot;);</div><div class="line">window.sessionStorage.getItem(&quot;username&quot;); // calpa</div></pre></td></tr></table></figure>
<h1 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h1><h2 id="儲存"><a href="#儲存" class="headerlink" title="儲存"></a>儲存</h2><p>儲存資料的時候，可以利用Storage物件內的<code>setItem()</code>方法。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">localStorage.setItem(3, 3);</div><div class="line">sessionStorage.setItem(&quot;username&quot;, &quot;calpa&quot;);</div></pre></td></tr></table></figure></p>
<h2 id="獲取"><a href="#獲取" class="headerlink" title="獲取"></a>獲取</h2><p>獲取資料的時候，則會用到<code>getItem()</code>方法。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">let username = localStorage.getItem(&quot;username&quot;);</div></pre></td></tr></table></figure></p>
<p>如果key不是string的話，獲取資料時會出現問題。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">localStorage.3 = 3; // Uncaught SyntaxError: Unexpected number</div></pre></td></tr></table></figure></p>
<h2 id="清除"><a href="#清除" class="headerlink" title="清除"></a>清除</h2><p>清除某個資料，可以用<code>removeItem()</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">window.localStorage.removeItem(&quot;username&quot;);</div></pre></td></tr></table></figure></p>
<p>清除所有資料，可以用<code>clear()</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">window.localStorage.clear();</div><div class="line">window.sessionStorage.clear();</div></pre></td></tr></table></figure></p>
<h1 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h1><ol>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Storage_API/Using_the_Web_Storage_API" target="_blank" rel="external">Using the Web Storage API</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Storage&quot;&gt;&lt;a href=&quot;#Storage&quot; class=&quot;headerlink&quot; title=&quot;Storage&quot;&gt;&lt;/a&gt;Storage&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;HTML5 的 &lt;strong&gt;Web Storage&lt;/strong&gt; 包括了兩種儲存
    
    </summary>
    
    
      <category term="web" scheme="http://calpa.github.io/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>初探Javascript變量提升</title>
    <link href="http://calpa.github.io/2017/01/14/hoisting/"/>
    <id>http://calpa.github.io/2017/01/14/hoisting/</id>
    <published>2017-01-14T12:09:35.000Z</published>
    <updated>2017-01-14T13:08:48.000Z</updated>
    
    <content type="html"><![CDATA[<p>在Javascript中，hoisting是一個容易犯錯的地方。<br>在一段scope裡面，沒有定義變量就使用變量的話會彈出Reference Error。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"> // ReferenceError: poi is not defined</div><div class="line">console.log(poi);</div></pre></td></tr></table></figure></p>
<hr>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">var name;</div><div class="line">console.log(name); // undefined</div><div class="line">name = &apos;calpa&apos;</div><div class="line">console.log(name); // calpa</div></pre></td></tr></table></figure>
<p>由於Javascript的解釋器會提前把所有變量函數定義，所以上面這一段代碼會變成這一段：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">console.log(name); // undefined</div><div class="line">var name = &apos;calpa&apos;;</div><div class="line">console.log(name); // calpa</div></pre></td></tr></table></figure></p>
<p>另外，Javascript也會出現這樣的問題。。。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">var name = &apos;calpa&apos;;</div><div class="line">(function () &#123;</div><div class="line">    // My name is undefined</div><div class="line">    console.log(&quot;My name is &quot; + name); </div><div class="line">    var name = &apos;poi&apos;;</div><div class="line">    // My name is poi</div><div class="line">    console.log(&quot;My name is &quot; + name); // poi</div><div class="line">&#125;)();</div></pre></td></tr></table></figure></p>
<p>簡單來說，在寫Javascript時，我們應該提前在檔案開始位置定義變量。</p>
<hr>
<p>參考資料：</p>
<ol>
<li><a href="http://adripofjavascript.com/blog/drips/variable-and-function-hoisting" target="_blank" rel="external">Variable and Function Hoisting in JavaScript</a></li>
<li><a href="http://jinlong.github.io/2013/09/11/var-and-fun-hoisting/" target="_blank" rel="external">JavaScript 中的变量和函数提升</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在Javascript中，hoisting是一個容易犯錯的地方。&lt;br&gt;在一段scope裡面，沒有定義變量就使用變量的話會彈出Reference Error。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;
    
    </summary>
    
    
      <category term="Javascript" scheme="http://calpa.github.io/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>建立一個404 Page</title>
    <link href="http://calpa.github.io/2017/01/08/hexo-404-page/"/>
    <id>http://calpa.github.io/2017/01/08/hexo-404-page/</id>
    <published>2017-01-08T03:02:58.000Z</published>
    <updated>2017-01-15T08:02:26.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="建立方法"><a href="#建立方法" class="headerlink" title="建立方法"></a>建立方法</h1><ol>
<li>在Terminal輸入 <code>hexo new page 404</code></li>
<li>然後打開儲存404檔案的位置，比如說：<code>/source/404/index.md</code></li>
<li>在這個檔案最頂部寫下<code>permalink: /404.html</code>就可以了。</li>
</ol>
<h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><ol>
<li><a href="https://help.github.com/articles/creating-a-custom-404-page-for-your-github-pages-site/" target="_blank" rel="external">Creating a custom 404 page for your GitHub Pages site</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;建立方法&quot;&gt;&lt;a href=&quot;#建立方法&quot; class=&quot;headerlink&quot; title=&quot;建立方法&quot;&gt;&lt;/a&gt;建立方法&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;在Terminal輸入 &lt;code&gt;hexo new page 404&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;然後打開
    
    </summary>
    
    
      <category term="hexo" scheme="http://calpa.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://calpa.github.io/2017/01/08/hello-world/"/>
    <id>http://calpa.github.io/2017/01/08/hello-world/</id>
    <published>2017-01-08T02:00:00.000Z</published>
    <updated>2017-01-08T02:39:21.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h1><p>這是一個用hexo建構的blog，我找了一會hexo的主題，最後選擇了 <a href="https://github.com/Haojen/hexo-theme-Anisina" target="_blank" rel="external">Anisina</a></p>
<p>我修改了<code>_config.yml</code>裡面的<code>post-default-img</code> 以及 <code>post-default-img-mobile</code>。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Hello-World&quot;&gt;&lt;a href=&quot;#Hello-World&quot; class=&quot;headerlink&quot; title=&quot;Hello World&quot;&gt;&lt;/a&gt;Hello World&lt;/h1&gt;&lt;p&gt;這是一個用hexo建構的blog，我找了一會hexo的主題，最後選擇
    
    </summary>
    
    
      <category term="hexo" scheme="http://calpa.github.io/tags/hexo/"/>
    
      <category term="theme" scheme="http://calpa.github.io/tags/theme/"/>
    
  </entry>
  
</feed>
