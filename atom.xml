<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Calpa</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://calpa.me/"/>
  <updated>2017-05-05T15:14:13.000Z</updated>
  <id>https://calpa.me/</id>
  
  <author>
    <name>Calpa</name>
    <email>calpaliu@gmail.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JavaScript 數組去重</title>
    <link href="https://calpa.me/2017/05/05/javascript-array/"/>
    <id>https://calpa.me/2017/05/05/javascript-array/</id>
    <published>2017-05-05T14:53:00.000Z</published>
    <updated>2017-05-05T15:14:13.000Z</updated>
    
    <content type="html"><![CDATA[<p>顧著做化工模擬功課，差點忘記怎樣寫代碼。。。</p>
<h1 id="內置方法"><a href="#內置方法" class="headerlink" title="內置方法"></a>內置方法</h1><p>使用JavaScript內置的去重複方法<code>Set()</code>，比如說：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">let arr = [1, 2, 3, 3, 4, 5];</div><div class="line">Array.from(new Set(arr)); // [1, 2, 3, 4, 5]</div><div class="line">[...new Set(arr)]; // [1, 2, 3, 4, 5]</div></pre></td></tr></table></figure>
<h2 id="第一時間會想到的方法"><a href="#第一時間會想到的方法" class="headerlink" title="第一時間會想到的方法"></a>第一時間會想到的方法</h2><ol>
<li>雙重遍歷</li>
<li>使用hash table</li>
</ol>
<h2 id="Underscore"><a href="#Underscore" class="headerlink" title="Underscore"></a>Underscore</h2><p>最後來看一下underscore是如何實現unique()方法吧。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">_.uniq = _.unique = function(array, isSorted, iteratee, context) &#123;</div><div class="line">  // 如果數組不是已經排序</div><div class="line">  if (!_.isBoolean(isSorted)) &#123;</div><div class="line">    // 將function(array, isSorted, iteratee, context)</div><div class="line">    // 換成function(array, false, isSorted, iteratee)</div><div class="line">    context = iteratee;</div><div class="line">    iteratee = isSorted;</div><div class="line">    isSorted = false;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  // 如果存在iteratee</div><div class="line">  if (iteratee != null) iteratee = cb(iteratee, context);</div><div class="line">  var result = [];</div><div class="line">  var seen = [];</div><div class="line">  for (var i = 0, length = getLength(array); i &lt; length; i++) &#123;</div><div class="line">    var value = array[i],</div><div class="line">        computed = iteratee ? iteratee(value, i, array) : value;</div><div class="line">    // 如果已經排序，就直接增加數值(第一個值)。</div><div class="line">    // 非0 就是 true</div><div class="line">    // 或者see不是computed</div><div class="line">    if (isSorted) &#123;</div><div class="line">      if (!i || seen !== computed) result.push(value);</div><div class="line">      seen = computed;</div><div class="line">    &#125; else if (iteratee) &#123;</div><div class="line">      // 使用_.contains查詢數組裡面是否擁有這個值</div><div class="line">      if (!_.contains(seen, computed)) &#123;</div><div class="line">        seen.push(computed);</div><div class="line">        result.push(value);</div><div class="line">      &#125;</div><div class="line">    &#125; else if (!_.contains(result, value)) &#123;</div><div class="line">      result.push(value);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  return result;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;顧著做化工模擬功課，差點忘記怎樣寫代碼。。。&lt;/p&gt;
&lt;h1 id=&quot;內置方法&quot;&gt;&lt;a href=&quot;#內置方法&quot; class=&quot;headerlink&quot; title=&quot;內置方法&quot;&gt;&lt;/a&gt;內置方法&lt;/h1&gt;&lt;p&gt;使用JavaScript內置的去重複方法&lt;code&gt;Set()&lt;
    
    </summary>
    
    
      <category term="JavaScript" scheme="https://calpa.me/Tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>Redux push()是怎樣寫的？</title>
    <link href="https://calpa.me/2017/05/03/redux-array-push-function/"/>
    <id>https://calpa.me/2017/05/03/redux-array-push-function/</id>
    <published>2017-05-03T15:20:00.000Z</published>
    <updated>2017-05-03T15:28:29.000Z</updated>
    
    <content type="html"><![CDATA[<p>本來你可以直接改寫原本的數組，比如利用這個方法：<code>arr.push(item)</code>。<br>但在Redux裡面不可以這樣寫，因為會改寫原本數組，違反了immutable的原則。<br>因此，要這樣寫： <code>arr: [...state.arr, action.newItem]</code>。</p>
<p>例子：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">import &#123; ADD_ITEM &#125; from &apos;../Actions/UserActions&apos;</div><div class="line">const initialUserState = &#123;</div><div class="line">  arr: []</div><div class="line">&#125;</div><div class="line"></div><div class="line">export default function userState(state = initialUserState, action) &#123;</div><div class="line">  console.log(arr);</div><div class="line">  switch (action.type) &#123;</div><div class="line">    case ADD_ITEM:</div><div class="line">      return &#123;</div><div class="line">        ...state,</div><div class="line">        arr: [...state.arr, action.newItem]</div><div class="line">      &#125;</div><div class="line"></div><div class="line">    default:</div><div class="line">      return state;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>另外，你也可以利用<code>concat()</code>方法。</p>
<h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><ol>
<li><a href="http://stackoverflow.com/questions/40911194/how-do-i-add-an-element-to-array-in-reducer-of-react-native-redux" rel="external nofollow noopener noreferrer" target="_blank">How do I add an element to array in reducer of React native redux? - stackoverflow</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本來你可以直接改寫原本的數組，比如利用這個方法：&lt;code&gt;arr.push(item)&lt;/code&gt;。&lt;br&gt;但在Redux裡面不可以這樣寫，因為會改寫原本數組，違反了immutable的原則。&lt;br&gt;因此，要這樣寫： &lt;code&gt;arr: [...state.arr, 
    
    </summary>
    
    
      <category term="JavaScript" scheme="https://calpa.me/Tags/JavaScript/"/>
    
      <category term="Redux" scheme="https://calpa.me/Tags/Redux/"/>
    
  </entry>
  
  <entry>
    <title>如何製作svg sprite</title>
    <link href="https://calpa.me/2017/05/02/how-to-generate-svg-sprite/"/>
    <id>https://calpa.me/2017/05/02/how-to-generate-svg-sprite/</id>
    <published>2017-05-02T08:51:00.000Z</published>
    <updated>2017-05-03T15:19:27.000Z</updated>
    
    <content type="html"><![CDATA[<p>使用SVG Sprite的好處是可以減少HTTP Request。</p>
<h2 id="製作方法"><a href="#製作方法" class="headerlink" title="製作方法"></a>製作方法</h2><p>你可以選擇手動把一張一張圖合在一起，也可以使用gulp-svg-sprite自動生成雪碧圖。</p>
<p>另外，你可以使用<a href="http://jkphl.github.io/svg-sprite/" rel="external nofollow noopener noreferrer" target="_blank">svg-sprite設置</a>幫助寫JSON, Node.js, Gruntfile 或者 Gulpfile的設定檔案。</p>
<h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><p>其中一種方法是使用<code>&lt;use&gt;</code>。我們可以如同平常一樣使用svg，唯一分別是裡面的內容換成<code>&lt;use&gt;</code>，然後把鏈接加上id來調用圖像。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;svg&gt;</div><div class="line">  &lt;use href=&quot;img/sprite.svg#item&quot;&gt;&lt;/use&gt;</div><div class="line">&lt;/svg&gt;</div></pre></td></tr></table></figure>
<h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><p><a href="https://github.com/jkphl/gulp-svg-sprite" rel="external nofollow noopener noreferrer" target="_blank">Github Repo: gulp-svg-sprite</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;使用SVG Sprite的好處是可以減少HTTP Request。&lt;/p&gt;
&lt;h2 id=&quot;製作方法&quot;&gt;&lt;a href=&quot;#製作方法&quot; class=&quot;headerlink&quot; title=&quot;製作方法&quot;&gt;&lt;/a&gt;製作方法&lt;/h2&gt;&lt;p&gt;你可以選擇手動把一張一張圖合在一起，也可以
    
    </summary>
    
    
      <category term="SVG" scheme="https://calpa.me/Tags/SVG/"/>
    
  </entry>
  
  <entry>
    <title>CreateListFromArrayLike called on non-object 報錯的解決方法</title>
    <link href="https://calpa.me/2017/05/01/CreateListFromArrayLike-problem-solution/"/>
    <id>https://calpa.me/2017/05/01/CreateListFromArrayLike-problem-solution/</id>
    <published>2017-05-01T14:50:00.000Z</published>
    <updated>2017-05-01T15:12:06.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="解決方法"><a href="#解決方法" class="headerlink" title="解決方法"></a>解決方法</h2><p>仔細再看一下到底你是如何調用<code>apply</code>的。。。</p>
<p>你可能在使用Function.prototype.apply的時候不夠熟練，把<code>call</code>和<code>apply</code>的用法混在一起。。。。<code>call</code>是用0個或者更多的arguments，而<code>apply</code>則是用一個數組。</p>
<h2 id="錯誤例子"><a href="#錯誤例子" class="headerlink" title="錯誤例子"></a>錯誤例子</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Math.max.apply(null, 1, 2, 3);</div><div class="line">// Uncaught TypeError: CreateListFromArrayLike called on non-object</div></pre></td></tr></table></figure>
<h2 id="正確例子"><a href="#正確例子" class="headerlink" title="正確例子"></a>正確例子</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Math.max.call(null, 1, 2, 3); // 3</div><div class="line">Math.max.apply(null, [1, 2, 5, 10]); // 10</div></pre></td></tr></table></figure>
<h2 id="細節"><a href="#細節" class="headerlink" title="細節"></a>細節</h2><p>當調用<code>Function.prototype.apply</code>的時候，它會調用內置抽象操作：<code>CreateListFromArrayLike</code>。</p>
<h2 id="CreateListFromArrayLike"><a href="#CreateListFromArrayLike" class="headerlink" title="CreateListFromArrayLike"></a>CreateListFromArrayLike</h2><p><code>CreateListFromArrayLike ( obj [ , elementTypes ] )</code></p>
<p>CreateListFromArrayLike 是一個ECMAScript的內置抽象操作 (Abstract Operation)，用於建立一個List的值，它的元素由類似數組的對象的索引屬性提供。<code>elementTypes</code>是一個List，只允許自身建立的<code>list</code>擁有ECMAScript Language 類型的值，比如<code>undefined, null, boolean</code>等。在調用的時候，它會執行以下步驟:</p>
<ol>
<li>如果沒有定義<code>elementTypes</code>的話，它會被定義為« Undefined, Null, Boolean, String, Symbol, Number, Object »。</li>
<li>如果<code>Type(obj)</code>的類型不是Object，拋出TypeError 錯誤。</li>
<li>定義<code>len</code>為<code>obj</code>的length。</li>
<li>建立一個空的List <code>list</code>。</li>
<li>定義<code>index</code>為0</li>
<li>當index小於len的時候，重複以下步驟：<ol>
<li>定義<code>indexName</code>為!ToString(index)</li>
<li>定義<code>next</code> 為?Get(obj, indexName)</li>
<li>如果<code>Type(next)</code>的類型不存在於<code>elementType</code>裡面，拋出TypeError 錯誤。</li>
<li>在<code>list</code>的最後增加next //<code>list.push(next)</code></li>
<li><code>index</code>的值加1</li>
</ol>
</li>
<li>返回<code>list</code></li>
</ol>
<h2 id="延伸閱讀"><a href="#延伸閱讀" class="headerlink" title="延伸閱讀"></a>延伸閱讀</h2><ol>
<li>看V8是怎樣實現<code>Function.prototype.apply</code></li>
<li>看V8是怎樣實現<code>CreateListFromArrayLike</code></li>
</ol>
<h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><ol>
<li><a href="https://tc39.github.io/ecma262/#sec-function.prototype.apply" rel="external nofollow noopener noreferrer" target="_blank">Function.prototype.apply - ECMAScript 2018</a></li>
<li>踩過的坑。。。</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;解決方法&quot;&gt;&lt;a href=&quot;#解決方法&quot; class=&quot;headerlink&quot; title=&quot;解決方法&quot;&gt;&lt;/a&gt;解決方法&lt;/h2&gt;&lt;p&gt;仔細再看一下到底你是如何調用&lt;code&gt;apply&lt;/code&gt;的。。。&lt;/p&gt;
&lt;p&gt;你可能在使用Function.pro
    
    </summary>
    
    
      <category term="JavaScript" scheme="https://calpa.me/Tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>Hello World的四+N種方法</title>
    <link href="https://calpa.me/2017/04/27/n-ways-to-output-hello-world/"/>
    <id>https://calpa.me/2017/04/27/n-ways-to-output-hello-world/</id>
    <published>2017-04-27T06:34:00.000Z</published>
    <updated>2017-04-28T14:02:32.000Z</updated>
    
    <content type="html"><![CDATA[<p>在這些時候，我可以附和著笑，老闆是決不責備的。而且老闆見了他，也每每這樣問他，引人發笑。他自己知道不能和他們談天，便只好向孩子說話。有一回對我說道：「你讀過書麼？」我略略點一點頭。他說：「讀過書，。。。我便考你一考。代碼的Hello World，怎樣寫的？」他等了許久，很懇切的說道：「不能寫罷？。。。我教給你，記著！這些字應該記著。將來做老闆的時候，Debug要用。」我暗想我和老闆的等級還很遠呢，而且我們老闆也從不將代碼上傳；又好笑，又不耐煩，懶懶的答他道：「誰要你教，不就是用alert輸出嘛」他顯出極高興的樣子，將兩個指頭的長指甲敲著鍵盤，點頭說：「對呀對呀！。。。Hello World有四樣寫法，你知道麼？」我愈不耐煩了，努著嘴走遠。他剛用指甲蘸了酒，想在鍵盤上打字，見我毫不熱心，便又歎一口氣，顯出極惋惜的樣子。</p>
<h2 id="alert"><a href="#alert" class="headerlink" title="alert()"></a>alert()</h2><p><code>alert(&quot;Hello, World!!&quot;);</code></p>
<h2 id="document-write"><a href="#document-write" class="headerlink" title="document.write()"></a>document.write()</h2><p>直接輸出<code>Hello, World!</code>到document:<br><code>document.write(&#39;Hello, World!&#39;);</code></p>
<h2 id="document-writeln"><a href="#document-writeln" class="headerlink" title="document.writeln()"></a>document.writeln()</h2><p>在現有的document上增加<code>Hello, World!</code>這一行：</p>
<p><code>document.writeln(&#39;Hello, World!&#39;);</code></p>
<h2 id="Function-constructor"><a href="#Function-constructor" class="headerlink" title="Function constructor"></a>Function constructor</h2><p>使用Function constructor, 以及 Immediately-Invoked Function Expression (IIFE):<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">new Function ([arg1[, arg2[, ...argN]],] functionBody);</div><div class="line">(new Function (&apos;console.log(&quot;Hello, World&quot;)&apos;))();</div></pre></td></tr></table></figure></p>
<p>順帶一提，以下三種寫法，結果都是一樣的。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">new Function(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;return a+b+c;&quot;); // 每一個arugument都用,分開</div><div class="line">new Function(&quot;a, b, c&quot;, &quot;return a+b+c;&quot;);      </div><div class="line">new Function(&quot;a,b&quot;, &quot;c&quot;, &quot;return a+b+c;&quot;);</div></pre></td></tr></table></figure></p>
<p>輸出：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">function anonymous(a, b, c</div><div class="line">/*``*/) &#123;</div><div class="line">return a+b+c;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="Function-declaration"><a href="#Function-declaration" class="headerlink" title="Function declaration"></a>Function declaration</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">function sayHello() &#123;</div><div class="line">  console.log(&apos;Hello, World!&apos;);</div><div class="line">&#125;</div><div class="line"></div><div class="line">sayHello(); // Hello, World!</div><div class="line">sayHello    // function sayHello() &#123;</div><div class="line">        //   console.log(&apos;Hello, World!&apos;);</div><div class="line">        // &#125;</div></pre></td></tr></table></figure>
<h2 id="Arrow-Function"><a href="#Arrow-Function" class="headerlink" title="Arrow Function"></a>Arrow Function</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">() =&gt; &#123; console.log(&apos;Hello, World!&apos;)&#125;;</div><div class="line">(() =&gt; &#123; console.log(&apos;Hello, World!&apos;)&#125;)(); // Hello, World!</div></pre></td></tr></table></figure>
<h2 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h2><p>先定義一個Promise：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">var helloPromise = new Promise(function(resolve)&#123;</div><div class="line">    resolve(&quot;Hello, World!&quot;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>如果resolve成功的話，就會輸出”Hello, World!”:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">helloPromise.then(function (value) &#123;</div><div class="line">  console.log(value);</div><div class="line">&#125;).catch(function (error) &#123;</div><div class="line">  console.log(error);</div><div class="line">&#125;); // Hello, World!</div></pre></td></tr></table></figure></p>
<p>當然，你也可以利用Arrow Function這樣寫：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">let helloPromise = new Promise((resolve) =&gt; &#123;</div><div class="line">  resolve(&quot;Hello, World!&quot;);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">helloPromise.then((value) =&gt; &#123;</div><div class="line">  console.log(value);</div><div class="line">&#125;).catch((error) =&gt; &#123;</div><div class="line">  console.log(error);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>有幾回，鄰舍孩子聽得笑聲，也趕熱鬧，圍住了他。他便給他們看代碼，一人一段。孩子看完代碼，仍然不散，眼睛都望著屏幕。他著了慌，伸開五指將屏幕罩住，彎腰下去說道：「不多了，我已經不多了。」直起身又看一看代碼，自己搖頭說：「不多不多！多乎哉？不多也。」於是這一群孩子都在笑聲裏走散了。</p>
<p>他是這樣的使人快活，可是沒有他，別人也便這麼過。</p>
<p>自此以後，又長久沒有看見爪哇文。到了年關，掌櫃取下粉板說：「爪哇文還欠十九行代碼呢！」到第二年的端午，又說「爪哇文還欠十九行代碼呢！」到中秋可是沒有說，再到年關也沒有看見他。</p>
<h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><p><a href="https://tc39.github.io/ecma262/#sec-function-p1-p2-pn-body" rel="external nofollow noopener noreferrer" target="_blank">Function constructor - ECMAScript® 2018 Language Specification</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在這些時候，我可以附和著笑，老闆是決不責備的。而且老闆見了他，也每每這樣問他，引人發笑。他自己知道不能和他們談天，便只好向孩子說話。有一回對我說道：「你讀過書麼？」我略略點一點頭。他說：「讀過書，。。。我便考你一考。代碼的Hello World，怎樣寫的？」他等了許久，很懇
    
    </summary>
    
    
      <category term="JavaScript" scheme="https://calpa.me/Tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>如何判斷Javascript 數據類型</title>
    <link href="https://calpa.me/2017/04/26/javascript-data-structures/"/>
    <id>https://calpa.me/2017/04/26/javascript-data-structures/</id>
    <published>2017-04-26T02:00:00.000Z</published>
    <updated>2017-04-27T06:14:17.000Z</updated>
    
    <content type="html"><![CDATA[<p>每一種編程語言都有數據結構，但他們各有不同之處。</p>
<p>JavaScript是一種動態語言，變量的類型不用提前聲明，在程序運行的過程中，程序會自動辨認變量的類型。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">var a = &apos;apple&apos;; // String type</div><div class="line">var a = 42; // Number type</div><div class="line">var a = true; // Boolean type</div></pre></td></tr></table></figure></p>
<p>這就和Python的寫法差不多:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">a = &apos;apple&apos; // String type</div><div class="line">a = 42 // Number type</div><div class="line">a = True // Boolean type</div></pre></td></tr></table></figure></p>
<h2 id="數據類型"><a href="#數據類型" class="headerlink" title="數據類型"></a>數據類型</h2><p><a href="https://tc39.github.io/ecma262/#sec-ecmascript-overview" rel="external nofollow noopener noreferrer" target="_blank">ECMA Script 標準</a>定義了7種數據類型：6種原始類型 (Primitive value) 和Object。</p>
<p>以下這6種都是Primitive value：</p>
<ol>
<li>Undefined</li>
<li>Null</li>
<li>Boolean</li>
<li>Number</li>
<li>String</li>
<li>Symbol (ECMAScript 6)</li>
</ol>
<p>我們可以透過使用<code>typeof</code>運算符號和<code>Object.prototype.toString()</code>方法來判斷數據類型。</p>
<h2 id="typeof"><a href="#typeof" class="headerlink" title="typeof"></a>typeof</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">typeof undefined; // &quot;undefined&quot;</div><div class="line">typeof Boolean;   // &quot;function&quot;</div><div class="line">typeof true;      // &quot;boolean&quot;</div><div class="line">typeof 42;        // &quot;number&quot;</div><div class="line">typeof &quot;42&quot;;      // &quot;string&quot;</div><div class="line">typeof Symbol();  // &quot;symbol&quot;</div></pre></td></tr></table></figure>
<p>在一開始設計JavaScript時，JavaScript中的值(value)是由一個標籤以及實際數據值表示的。對於基本類型，標籤是1；而對於對象類型，標籤是0。由於null代表的是空指針(裡面都是0)，null的類型標籤會是0。因此<code>typeof null</code>就會返回”object”;</p>
<p><code>typeof null; // &quot;object&quot;</code></p>
<p>另外，如果直接用<code>typeof</code>來判斷NaN的話，它會返回<code>&quot;number&quot;</code>。。。我們可以用<code>isNaN</code>方法來判斷是否一個數字。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">typeof NaN; // &quot;number&quot;</div><div class="line">isNaN(NaN); // true</div></pre></td></tr></table></figure></p>
<h2 id="Object-prototype-toString"><a href="#Object-prototype-toString" class="headerlink" title="Object.prototype.toString()"></a>Object.prototype.toString()</h2><p>我們可以利用Object.prototype.toString.call()或者Object.prototype.toString.apply()這兩個方法判斷Object的類型，以及null：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Object.prototype.toString.call(undefined);   // &quot;[object Undefined]&quot;</div><div class="line">Object.prototype.toString.call(new Date);    // &quot;[object Date]&quot;</div><div class="line">Object.prototype.toString.call(new String);  // &quot;[object String]&quot;</div><div class="line">Object.prototype.toString.call(Math);        // &quot;[object Math]&quot;</div><div class="line">Object.prototype.toString.call(null);        // &quot;[object Null]&quot;</div></pre></td></tr></table></figure></p>
<h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><ol>
<li><a href="https://tc39.github.io/ecma262/#sec-ecmascript-overview" rel="external nofollow noopener noreferrer" target="_blank">ECMAScript® 2018 Language Specification</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;每一種編程語言都有數據結構，但他們各有不同之處。&lt;/p&gt;
&lt;p&gt;JavaScript是一種動態語言，變量的類型不用提前聲明，在程序運行的過程中，程序會自動辨認變量的類型。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td c
    
    </summary>
    
    
      <category term="Javascript" scheme="https://calpa.me/Tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>Coders of the Caribbean Online Contest 後記</title>
    <link href="https://calpa.me/2017/04/25/coders-of-the-caribbean-review/"/>
    <id>https://calpa.me/2017/04/25/coders-of-the-caribbean-review/</id>
    <published>2017-04-25T07:35:00.000Z</published>
    <updated>2017-04-25T14:51:53.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://i.imgur.com/HDvrCYc.png" alt="Coders of the Caribbean report for Calpa"></p>
<p>寫了一天Code後，我就把那些代碼放置在Codingame上面。今天它寄電郵給我說有比賽結果。對於這一次的結果，我完全不感到意外。因為很多地方都沒有去優化，比如說如何去計算各種行動的優先權重。這裡就不放上代碼了，還是下一次拿到更高的排名才放出來吧 XD</p>
<p>看來我還是要好好地刷算法才行。。。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://i.imgur.com/HDvrCYc.png&quot; alt=&quot;Coders of the Caribbean report for Calpa&quot;&gt;&lt;/p&gt;
&lt;p&gt;寫了一天Code後，我就把那些代碼放置在Codingame上面。今天它寄電郵給我
    
    </summary>
    
    
      <category term="Codingame" scheme="https://calpa.me/Tags/Codingame/"/>
    
  </entry>
  
  <entry>
    <title>hackUST 2017後記</title>
    <link href="https://calpa.me/2017/04/23/hackUST-2017-hackathon-summary/"/>
    <id>https://calpa.me/2017/04/23/hackUST-2017-hackathon-summary/</id>
    <published>2017-04-23T12:44:00.000Z</published>
    <updated>2017-04-23T13:39:41.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="後記"><a href="#後記" class="headerlink" title="後記"></a>後記</h2><p>經過一天的努力，我們成功進入最後5強。這次比賽都幾好玩，基本上由第一天中午吃到晚上，然後第二天回來也是吃吃吃。雖然最後沒有取得獎金，但也是學到很多的知識。比如說如何解決安裝npm package問題，更新npm package問題。</p>
<p>第一天中午的時候已經把Demo做出來了，但是不知道為什麼刪除<code>node_modules</code>之後，Expo就直接崩潰了。這是因為<code>package.json</code>裡面根本就沒有把完整的<code>dependencies</code>寫出來，當我輸入<code>npm install</code>的時候就不能順利安裝。於是我只能在CodePen裡面開一個<a href="http://codepen.io/calpa/pen/LyZjPm" rel="external nofollow noopener noreferrer" target="_blank">Pen</a>用來做控制器。</p>
<h2 id="技術細節"><a href="#技術細節" class="headerlink" title="技術細節"></a>技術細節</h2><p>這個控制器利用<code>window.addEventListener(&#39;deviceorientation&#39;, handleOrientation);</code>來監聽Android裝置的方向。當加速規偵測到裝置方向的變化，它就會調用<code>handleOrientation</code>方法。</p>
<p>而<code>handleOrientation</code>方法有兩個目的：</p>
<ol>
<li><p>獲取<code>event</code>裡面的<code>alpha</code>, <code>beta</code>, <code>gamma</code>數值，它們分別代表裝置的z軸， x軸， y軸動向。</p>
<p>z軸介乎於 0 ~ 360 度之間，x軸介乎於 -180 ~ 180 度之間，代表裝置的前後動向。y軸介乎於 -90 ~ 90 度之間，代表裝置的左右動向。</p>
</li>
<li><p>發送event到服務器。</p>
<p>這個很簡單，利用socket.io就可以了。比如說<code>socket.emit(&#39;event&#39;);</code></p>
</li>
</ol>
<p>而在展示用戶數據的時候，我們用<a href="http://c3js.org/" rel="external nofollow noopener noreferrer" target="_blank">C3.js</a>來做實時渲染數據。利用C3.js，我們很容易就可以產生D3圖表，而不是重寫D3代碼。我們也可以修改每一個元素的樣式。感覺再寫下去就變教學文了。。。</p>
<iframe height="400" scrolling="no" title="Playground C3.js" src="//codepen.io/calpa/embed/MmevBr/?height=265&theme-id=0&default-tab=result&embed-version=2" frameborder="no" allowtransparency="true" allowfullscreen="true" style="width: 100%;">See the Pen <a href="http://codepen.io/calpa/pen/MmevBr/" rel="external nofollow noopener noreferrer" target="_blank">Playground C3.js</a> by Calpa Liu (<a href="http://codepen.io/calpa" rel="external nofollow noopener noreferrer" target="_blank">@calpa</a>) on <a href="http://codepen.io" rel="external nofollow noopener noreferrer" target="_blank">CodePen</a>.<br></iframe>

<h2 id="比賽照片"><a href="#比賽照片" class="headerlink" title="比賽照片"></a>比賽照片</h2><p>以下是比賽時拍攝的一些照片：<br><img src="http://i.imgur.com/vXyDaoY.jpg" alt="Imgur"></p>
<p>感謝這次一起參賽的三位隊友。</p>
<p><img src="http://i.imgur.com/6nLsXEB.jpg" alt="Imgur"></p>
<center>比賽場地</center>


<p><img src="http://i.imgur.com/2mLCtBm.jpg" alt="Imgur"></p>
<center>接待處</center>

<p><img src="http://i.imgur.com/pL19qZw.jpg" alt="Imgur"></p>
<center>宣傳物品</center>

<p><img src="http://i.imgur.com/g1GZHCJ.jpg" alt="Imgur"></p>
<center>平常用來賣官方廣告的地方現在用來賣hackUST和hardUST的廣告 XD</center>

<p><img src="http://i.imgur.com/DbLEVGz.jpg" alt="Imgur"></p>
<center>演示的場地</center>

<p>這次主辦單位派發了港幣120元的餐券，還有很多零食，飲料。最重要的是，有我最喜歡的忌廉汽水www。希望以後都可以繼續參加比賽，學習更多的編程知識。</p>
<h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><ol>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/API/Detecting_device_orientation" rel="external nofollow noopener noreferrer" target="_blank">Detecting device orientation - MDN</a></li>
<li><a href="https://socket.io/docs/" rel="external nofollow noopener noreferrer" target="_blank">Socket.io 官方文檔</a></li>
<li><a href="http://c3js.org/gettingstarted.html" rel="external nofollow noopener noreferrer" target="_blank">C3.js 官方Starter</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;後記&quot;&gt;&lt;a href=&quot;#後記&quot; class=&quot;headerlink&quot; title=&quot;後記&quot;&gt;&lt;/a&gt;後記&lt;/h2&gt;&lt;p&gt;經過一天的努力，我們成功進入最後5強。這次比賽都幾好玩，基本上由第一天中午吃到晚上，然後第二天回來也是吃吃吃。雖然最後沒有取得獎金，但也是學
    
    </summary>
    
    
      <category term="Hackathon" scheme="https://calpa.me/Tags/Hackathon/"/>
    
  </entry>
  
  <entry>
    <title>Bootstrap v4 源碼分析(1)</title>
    <link href="https://calpa.me/2017/04/20/bootstrap-code-analysis-1/"/>
    <id>https://calpa.me/2017/04/20/bootstrap-code-analysis-1/</id>
    <published>2017-04-20T13:37:00.000Z</published>
    <updated>2017-04-20T15:17:54.000Z</updated>
    
    <content type="html"><![CDATA[<p>Bootstrap是一個Twitter推出的CSS框架，也是我第一個使用的CSS框架。本文使用最新版本v4.0.0-alpha.6，透過閱讀完整的源代碼，我們能夠更加了解Bootstrap的優缺點，以及如何自製Bootstrap輪子。</p>
<h2 id="為什麼使用Bootstrap"><a href="#為什麼使用Bootstrap" class="headerlink" title="為什麼使用Bootstrap"></a>為什麼使用Bootstrap</h2><p>透過使用Bootstrap框架，我們可以提高開發效率，避免重複製造輪子。</p>
<h2 id="閱讀本文所需知識"><a href="#閱讀本文所需知識" class="headerlink" title="閱讀本文所需知識"></a>閱讀本文所需知識</h2><ol>
<li>一顆好奇心</li>
<li>基本Bootstrap知識</li>
<li>基本SCSS/SASS知識</li>
</ol>
<h2 id="Bootstrap4-的新特性"><a href="#Bootstrap4-的新特性" class="headerlink" title="Bootstrap4 的新特性"></a>Bootstrap4 的新特性</h2><p>對比起Bootstrap3，Bootstrap4作出不少改動，以下是當中比較影響大的特性：</p>
<ol>
<li>默認使用Flexbox</li>
<li>使用flexbox重新製作navbar，提高可塑性和客製化能力。</li>
<li><code>.card</code>代替<code>.panel</code>以及<code>.well</code></li>
<li>能夠適應五種長度: xs, sm, md, lg, xl</li>
<li>更加大的默認字體: 16px</li>
<li>不再自帶Glyphicons圖案包。。。</li>
<li>使用SCSS開發</li>
</ol>
<h2 id="Bootstarp-源碼結構"><a href="#Bootstarp-源碼結構" class="headerlink" title="Bootstarp 源碼結構"></a>Bootstarp 源碼結構</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">bootstrap/  #v4-dev branch</div><div class="line">├── build/</div><div class="line">├── dist/ # 預先編譯的CSS</div><div class="line">│   ├── css/</div><div class="line">│   └── js/</div><div class="line">├── docs/ # 文檔</div><div class="line">    └── examples/ # 官方例子</div><div class="line">├── js/</div><div class="line">    ├── dist/</div><div class="line">    ├── src/</div><div class="line">    └── tests/</div><div class="line">├── nuget/</div><div class="line">└── scss/ # 本文開始入手的地方</div><div class="line">    ├── mixins/</div><div class="line">    └── utilities/</div></pre></td></tr></table></figure>
<h2 id="Bootstrap-Grid架構"><a href="#Bootstrap-Grid架構" class="headerlink" title="Bootstrap Grid架構"></a>Bootstrap Grid架構</h2><p>Bootstrap使用<code>container</code>-&gt;<code>row</code>-&gt;<code>col-*-number</code>的架構。</p>
<h2 id="利用SCSS理解-Container"><a href="#利用SCSS理解-Container" class="headerlink" title="利用SCSS理解 Container"></a>利用SCSS理解 Container</h2><p>在<a href="https://github.com/twbs/bootstrap/blob/094b3a129349a41b1319b0870fb3daa9459b7284/scss/_grid.scss" rel="external nofollow noopener noreferrer" target="_blank">_grid.scss</a>的一開始代碼段落中，我們可以看到<code>.container</code>, <code>.fluid-container</code>這兩個容器。如果 $enable-grid-classes是true的話，就可以使用<code>.container</code>以及<code>.fluid-container</code>。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">@if $enable-grid-classes &#123;</div><div class="line">  .container &#123;</div><div class="line">    @include make-container();</div><div class="line">    @include make-container-max-widths();</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">@if $enable-grid-classes &#123;</div><div class="line">  .container-fluid &#123;</div><div class="line">    width: 100%;</div><div class="line">    @include make-container();</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="理解Row"><a href="#理解Row" class="headerlink" title="理解Row"></a>理解Row</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">@if $enable-grid-classes &#123;</div><div class="line">  @include make-row();</div><div class="line">  // 省略 .no-gutters</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="用到的函式-mixins"><a href="#用到的函式-mixins" class="headerlink" title="用到的函式 (mixins)"></a>用到的函式 (mixins)</h2><h3 id="container"><a href="#container" class="headerlink" title="container"></a>container</h3><h4 id="make-container-grid-scss"><a href="#make-container-grid-scss" class="headerlink" title="make-container (grid.scss)"></a>make-container (grid.scss)</h4><p>它們會調用<a href="https://github.com/twbs/bootstrap/blob/2436ad589cfc235c84160fe14e4cc4ec97a9c5ca/scss/mixins/_grid.scss" rel="external nofollow noopener noreferrer" target="_blank">mixins/_grid.scss </a>裡面的<a href="https://github.com/twbs/bootstrap/blob/2436ad589cfc235c84160fe14e4cc4ec97a9c5ca/scss/mixins/_grid.scss#L5" rel="external nofollow noopener noreferrer" target="_blank">@mixin make-container</a>以及<a href="https://github.com/twbs/bootstrap/blob/2436ad589cfc235c84160fe14e4cc4ec97a9c5ca/scss/mixins/_grid.scss#L20" rel="external nofollow noopener noreferrer" target="_blank">@mixin make-container-max-widths</a>。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">@mixin make-container($gutters: $grid-gutter-widths) &#123;</div><div class="line">  margin-right: auto;</div><div class="line">  margin-left: auto;</div><div class="line"></div><div class="line">  @each $breakpoint in map-keys($gutters) &#123;</div><div class="line">    @include media-breakpoint-up($breakpoint) &#123;</div><div class="line">      $gutter: map-get($gutters, $breakpoint);</div><div class="line">      padding-right: ($gutter / 2);</div><div class="line">      padding-left:  ($gutter / 2);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#map_get-instance_method" rel="external nofollow noopener noreferrer" target="_blank">map-get</a>則是Sass裡面的一個函數，輸入一個map以及key，如果map裡面有該key的話，就會返回key的值。找不到的話就會返回null。</p>
<h4 id="grid-gutter-widths-variables-scss"><a href="#grid-gutter-widths-variables-scss" class="headerlink" title="$grid-gutter-widths (variables.scss)"></a>$grid-gutter-widths (variables.scss)</h4><p>如果沒有設置$gutters，它就會默認是<a href="https://github.com/twbs/bootstrap/blob/dd0ce3e4b2a89f245ee608a1acc9f848cf8c833a/scss/_variables.scss" rel="external nofollow noopener noreferrer" target="_blank">$grid-gutter-widths</a>，以下是$grid-gutter-widths的包含的數值: xs, sm, md, lg, xl。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">$grid-gutter-width-base:     30px !default;</div><div class="line">$grid-gutter-widths: (</div><div class="line">  xs: $grid-gutter-width-base, // 30px</div><div class="line">  sm: $grid-gutter-width-base, // 30px</div><div class="line">  md: $grid-gutter-width-base, // 30px</div><div class="line">  lg: $grid-gutter-width-base, // 30px</div><div class="line">  xl: $grid-gutter-width-base  // 30px</div><div class="line">) !default;</div></pre></td></tr></table></figure>
<h4 id="grid-breakpoints-variables-scss"><a href="#grid-breakpoints-variables-scss" class="headerlink" title="$grid-breakpoints (variables.scss)"></a>$grid-breakpoints (variables.scss)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$grid-breakpoints: (</div><div class="line">  xs: 0,</div><div class="line">  sm: 576px,</div><div class="line">  md: 768px,</div><div class="line">  lg: 992px,</div><div class="line">  xl: 1200px</div><div class="line">) !default;</div></pre></td></tr></table></figure>
<p>它定義不同設備的屏幕寬度，用於響應式設計(Responsive Web Design)。</p>
<h4 id="media-breakpoint-up-breakpoints-scss"><a href="#media-breakpoint-up-breakpoints-scss" class="headerlink" title="media-breakpoint-up (breakpoints.scss)"></a>media-breakpoint-up (breakpoints.scss)</h4><p>而media-breakpoint-up則是在<a href="https://github.com/twbs/bootstrap/blob/7ca078da815320c75862b6cf25f46ce706570279/scss/mixins/_breakpoints.scss#L54" rel="external nofollow noopener noreferrer" target="_blank">mixins/_breakpoints.scss 第54行</a>，用處是返回最短寬度的內容。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">@mixin media-breakpoint-up($name, $breakpoints: $grid-breakpoints) &#123;</div><div class="line">  $min: breakpoint-min($name, $breakpoints);</div><div class="line">  @if $min &#123;</div><div class="line">    @media (min-width: $min) &#123;</div><div class="line">      @content;</div><div class="line">    &#125;</div><div class="line">  &#125; @else &#123;</div><div class="line">    @content;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="breakpoint-min"><a href="#breakpoint-min" class="headerlink" title="breakpoint-min()"></a>breakpoint-min()</h4><p><code>breakpoint-min()</code>可以在<a href="https://github.com/twbs/bootstrap/blob/7ca078da815320c75862b6cf25f46ce706570279/scss/mixins/_breakpoints.scss#L26" rel="external nofollow noopener noreferrer" target="_blank">mixins/_breakpoints.scss 第26行</a>找到，它的用處是返回最短斷點寬度或者null。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">@function breakpoint-min($name, $breakpoints: $grid-breakpoints) &#123;</div><div class="line">  $min: map-get($breakpoints, $name);</div><div class="line">  @return if($min != 0, $min, null);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="row"><a href="#row" class="headerlink" title="row"></a>row</h3><h4 id="make-row-grid-scss"><a href="#make-row-grid-scss" class="headerlink" title="make-row() (grid.scss)"></a>make-row() (grid.scss)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">@mixin make-row($gutters: $grid-gutter-widths) &#123;</div><div class="line">  display: flex;</div><div class="line">  flex-wrap: wrap;</div><div class="line"></div><div class="line">  @each $breakpoint in map-keys($gutters) &#123;</div><div class="line">    @include media-breakpoint-up($breakpoint) &#123;</div><div class="line">      $gutter: map-get($gutters, $breakpoint);</div><div class="line">      margin-right: ($gutter / -2);</div><div class="line">      margin-left:  ($gutter / -2);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>至於Column，我們下次再說吧。。。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Bootstrap是一個Twitter推出的CSS框架，也是我第一個使用的CSS框架。本文使用最新版本v4.0.0-alpha.6，透過閱讀完整的源代碼，我們能夠更加了解Bootstrap的優缺點，以及如何自製Bootstrap輪子。&lt;/p&gt;
&lt;h2 id=&quot;為什麼使用Bo
    
    </summary>
    
    
      <category term="Bootstrap" scheme="https://calpa.me/Tags/Bootstrap/"/>
    
      <category term="Web" scheme="https://calpa.me/Tags/Web/"/>
    
  </entry>
  
  <entry>
    <title>利用CSS畫圓</title>
    <link href="https://calpa.me/2017/04/12/use-css-to-draw-circle/"/>
    <id>https://calpa.me/2017/04/12/use-css-to-draw-circle/</id>
    <published>2017-04-12T14:00:00.000Z</published>
    <updated>2017-04-14T13:19:21.000Z</updated>
    
    <content type="html"><![CDATA[<p>用CSS畫一個圓是很簡單的，用border-radius就可以了。</p>
<iframe height="293" scrolling="no" title="Circle" src="//codepen.io/calpa/embed/xdxOvV/?height=293&theme-id=0&default-tab=css,result&embed-version=2" frameborder="no" allowtransparency="true" allowfullscreen="true" style="width: 100%;"></iframe>

<p>但是其實border-radius可以加/來獲得特別效果XD</p>
<iframe height="265" scrolling="no" title="border-radius" src="//codepen.io/calpa/embed/eWmVwy/?height=265&theme-id=0&default-tab=css,result&embed-version=2" frameborder="no" allowtransparency="true" allowfullscreen="true" style="width: 100%;"></iframe>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;用CSS畫一個圓是很簡單的，用border-radius就可以了。&lt;/p&gt;
&lt;iframe height=&quot;293&quot; scrolling=&quot;no&quot; title=&quot;Circle&quot; src=&quot;//codepen.io/calpa/embed/xdxOvV/?height=293
    
    </summary>
    
    
      <category term="CSS" scheme="https://calpa.me/Tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>【React Native】安裝Android Apk而無需連接伺服器的方法</title>
    <link href="https://calpa.me/2017/04/11/react-native-run-android/"/>
    <id>https://calpa.me/2017/04/11/react-native-run-android/</id>
    <published>2017-04-11T09:41:00.000Z</published>
    <updated>2017-04-11T13:48:30.000Z</updated>
    
    <content type="html"><![CDATA[<p>正常情況下，我們會用命令<code>react-native run-android</code>來在自己的電話中測試app，但是這個方法需要連接電腦。</p>
<p>我們可以利用以下命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">react-native bundle --dev false --platform android --entry-file index.android.js --bundle-output ./android/app/build/intermediates/assets/debug/index.android.bundle --assets-dest ./android/app/build/intermediates/res/merged/debug</div><div class="line"></div><div class="line">cd android</div><div class="line">./gradlew assembleDebug</div></pre></td></tr></table></figure></p>
<h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><ol>
<li><a href="http://stackoverflow.com/questions/35283959/build-and-install-unsigned-apk-on-device-without-the-development-server" rel="external nofollow noopener noreferrer" target="_blank">Build and Install unsigned apk on device without the development server? - stackoverflow</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;正常情況下，我們會用命令&lt;code&gt;react-native run-android&lt;/code&gt;來在自己的電話中測試app，但是這個方法需要連接電腦。&lt;/p&gt;
&lt;p&gt;我們可以利用以下命令：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table
    
    </summary>
    
    
      <category term="React Native" scheme="https://calpa.me/Tags/React-Native/"/>
    
  </entry>
  
  <entry>
    <title>利用ssh連接Github的方法</title>
    <link href="https://calpa.me/2017/04/11/github-ssh/"/>
    <id>https://calpa.me/2017/04/11/github-ssh/</id>
    <published>2017-04-11T08:30:00.000Z</published>
    <updated>2017-04-11T13:46:43.000Z</updated>
    
    <content type="html"><![CDATA[<p>其實很簡單，按照下面打就是了。。。</p>
<ol>
<li><code>ls -la ~/.ssh/</code></li>
<li><code>cat ~/.ssh/id_rsa.pub</code> 複製貼上到Github SSH Page</li>
<li><code>ssh git@github.com</code></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;其實很簡單，按照下面打就是了。。。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;ls -la ~/.ssh/&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cat ~/.ssh/id_rsa.pub&lt;/code&gt; 複製貼上到Github SSH Page&lt;/li&gt;
&lt;li&gt;&lt;cod
    
    </summary>
    
    
      <category term="Github" scheme="https://calpa.me/Tags/Github/"/>
    
  </entry>
  
  <entry>
    <title>常見的14種HTTP狀態碼</title>
    <link href="https://calpa.me/2017/04/08/common-http-status-code/"/>
    <id>https://calpa.me/2017/04/08/common-http-status-code/</id>
    <published>2017-04-08T06:10:00.000Z</published>
    <updated>2017-04-08T06:29:23.000Z</updated>
    
    <content type="html"><![CDATA[<p>當用戶向伺服器發出請求時，狀態碼能夠描述伺服器返回的結果。</p>
<ol>
<li><p>2XX 成功</p>
<ol>
<li>200 OK</li>
<li>204 No Content</li>
<li>206 Partial Content</li>
</ol>
</li>
<li><p>3XX 重新導向</p>
<ol>
<li>301 Moved Permanently</li>
<li>302 Found</li>
<li>303 See Other</li>
<li>304 Not Modified</li>
<li>307 Temporary Redirect</li>
</ol>
</li>
<li><p>4XX 客戶端錯誤</p>
<ol>
<li><p>400 Bad Request</p>
<p>伺服器無法理解當前請求</p>
</li>
<li>401 Unauthorized</li>
<li>403 Forbidden</li>
<li>404 Not Found</li>
</ol>
</li>
<li><p>5XX 伺服器錯誤</p>
<ol>
<li>500 Internal Server Error</li>
<li>503 Service Unavailable</li>
</ol>
</li>
</ol>
<h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><ol>
<li>圖解HTTP</li>
<li><a href="https://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html" rel="external nofollow noopener noreferrer" target="_blank">10 Status Code Definitions</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;當用戶向伺服器發出請求時，狀態碼能夠描述伺服器返回的結果。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;2XX 成功&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;200 OK&lt;/li&gt;
&lt;li&gt;204 No Content&lt;/li&gt;
&lt;li&gt;206 Partial Content&lt;/li&gt;
&lt;/ol&gt;

    
    </summary>
    
    
      <category term="HTTP" scheme="https://calpa.me/Tags/HTTP/"/>
    
  </entry>
  
  <entry>
    <title>前端工程師的入門書單</title>
    <link href="https://calpa.me/2017/04/05/front-end-booklist/"/>
    <id>https://calpa.me/2017/04/05/front-end-booklist/</id>
    <published>2017-04-05T14:51:00.000Z</published>
    <updated>2017-04-19T15:46:27.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://i.imgur.com/CTfB7K9.jpg" alt="Books"></p>
<p>在二十一世紀資訊發達的年代，我們很容易在互聯網上獲取這些書本的內容，而且能夠獲取書籍的最新內容。比如說vczero寫的<a href="https://github.com/vczero/react-native-lesson" rel="external nofollow noopener noreferrer" target="_blank">React Native入门与实战</a>，作者已經在Github上放上自己的書本內容，以及代碼。雖然我在電腦和手機里已經看過這些書，但當我拿起實體書的時候，那種感覺是非常不同的。</p>
<p>以下這些書都是很值得去閱讀（開坑）的：</p>
<ol>
<li><p>Javascript 高級程序設計(第三版)</p>
<p>我在去年的暑假看過一次這本書，感覺能夠學到很多Javascript的細節。</p>
</li>
<li><p>CSS揭秘</p>
</li>
<li><p>圖解HTTP</p>
<p><a href="https://calpa.me/2017/04/08/common-http-status-code/">常見的14種HTTP狀態碼</a></p>
</li>
<li><p>人月神話</p>
</li>
<li><p>Clean Code</p>
</li>
<li><p>Code Complete</p>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://i.imgur.com/CTfB7K9.jpg&quot; alt=&quot;Books&quot;&gt;&lt;/p&gt;
&lt;p&gt;在二十一世紀資訊發達的年代，我們很容易在互聯網上獲取這些書本的內容，而且能夠獲取書籍的最新內容。比如說vczero寫的&lt;a href=&quot;https:/
    
    </summary>
    
    
      <category term="Web" scheme="https://calpa.me/Tags/Web/"/>
    
  </entry>
  
  <entry>
    <title>Git多人合作開發工作流程</title>
    <link href="https://calpa.me/2017/04/01/git-workflow/"/>
    <id>https://calpa.me/2017/04/01/git-workflow/</id>
    <published>2017-04-01T14:22:00.000Z</published>
    <updated>2017-04-05T15:27:53.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h2><ol>
<li><code>git fetch</code> 確認遠端數據庫的內容</li>
<li><code>git checkout dev</code> 從現有支線轉到開發支線</li>
<li><code>git pull</code> 下載遠端數據庫到本地</li>
<li>永遠使用<code>git pull</code>之後才使用<code>git push</code></li>
<li><code>git commit -m &quot;Message&quot;</code> 很實用。。。</li>
<li><code>git checkout -b &quot;New Branch&quot;</code> 可以直接開新支線，並切換到那條支線上</li>
<li><code>git push origin &quot;updated-branch&quot;</code> 就可以推上去遠端數據庫</li>
</ol>
<h2 id="fetch"><a href="#fetch" class="headerlink" title="fetch"></a>fetch</h2><p>使用<code>fetch</code>指令可以避免更改本地數據庫，同時更新其他人更新遠端數據庫後的內容。</p>
<h2 id="checkout"><a href="#checkout" class="headerlink" title="checkout"></a>checkout</h2><p><code>checkout</code>切換本地數據庫支線，正常情況下應該建立超過兩條支線，比如說<code>master</code>只用作發佈更新版本，<code>dev</code>用作開發。</p>
<p>個人開發項目和與他人一同開發項目是兩回事來的。。。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;流程&quot;&gt;&lt;a href=&quot;#流程&quot; class=&quot;headerlink&quot; title=&quot;流程&quot;&gt;&lt;/a&gt;流程&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;code&gt;git fetch&lt;/code&gt; 確認遠端數據庫的內容&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git checkout de
    
    </summary>
    
    
      <category term="Git" scheme="https://calpa.me/Tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>Interview後記</title>
    <link href="https://calpa.me/2017/03/27/interview/"/>
    <id>https://calpa.me/2017/03/27/interview/</id>
    <published>2017-03-27T06:42:00.000Z</published>
    <updated>2017-03-27T07:22:14.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="面試問題："><a href="#面試問題：" class="headerlink" title="面試問題："></a>面試問題：</h2><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><ol>
<li>請自我介紹</li>
<li>為什麼會從前端開始？</li>
<li>請畫出現在項目的技術圖，並簡單介紹一下</li>
<li>你最近在探索什麼新技術？</li>
</ol>
<h3 id="技術"><a href="#技術" class="headerlink" title="技術"></a>技術</h3><ol>
<li>NoSQL和SQL的比較，優點和缺點？</li>
<li>哪一個性能比較好？</li>
<li>HTTPS如何加密</li>
</ol>
<h2 id="感想"><a href="#感想" class="headerlink" title="感想"></a>感想</h2><p>原本預約了兩點面試的，結果我一點多就去到，面試官讓我在一旁坐坐。感覺這次面試氣氛不錯，但是不知道為什麼每次面試，大多時間都是問Database的問題。。。</p>
<h2 id="行動"><a href="#行動" class="headerlink" title="行動"></a>行動</h2><p>Learning by Coding，動手做項目學習吧。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;面試問題：&quot;&gt;&lt;a href=&quot;#面試問題：&quot; class=&quot;headerlink&quot; title=&quot;面試問題：&quot;&gt;&lt;/a&gt;面試問題：&lt;/h2&gt;&lt;h3 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背
    
    </summary>
    
    
      <category term="Interview" scheme="https://calpa.me/Tags/Interview/"/>
    
  </entry>
  
  <entry>
    <title>Javascript的this</title>
    <link href="https://calpa.me/2017/03/25/javascript-this/"/>
    <id>https://calpa.me/2017/03/25/javascript-this/</id>
    <published>2017-03-25T04:44:00.000Z</published>
    <updated>2017-04-26T09:23:14.000Z</updated>
    
    <content type="html"><![CDATA[<p>首先我們要理解調用函數的方法，最起碼可以用下面兩個方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">func(arg1, arg2);</div><div class="line">func.call(context, arg1, arg2);</div></pre></td></tr></table></figure></p>
<p>之前我也沒怎麼見過後者，基本上都是直接call func的。後者<code>func(arg1, arg2)</code> 等於 <code>func.call(undefined, arg1, arg2)</code>。簡單來說，this就是context。如果context沒有定義的話，它會被定義為一個全局對象，比如說global。在MDN的文檔有這一句: <code>if the method is a function in non-strict mode code, null and undefined will be replaced with the global object and primitive values will be converted to objects</code>。</p>
<p>如果不想要this是global的話，給予context一個對象就可以了：<br><code>func.call(obj, arg1, arg2)</code></p>
<h2 id="全局上下文"><a href="#全局上下文" class="headerlink" title="全局上下文"></a>全局上下文</h2><p>在全局中，無論是否在嚴格模式下(Strict mode)，<code>this</code>都是代表全局對象。</p>
<h3 id="瀏覽器"><a href="#瀏覽器" class="headerlink" title="瀏覽器"></a>瀏覽器</h3><ol>
<li><code>this.document</code>指向<code>document</code></li>
<li>全局對象為<code>window</code></li>
</ol>
<h3 id="Node-js"><a href="#Node-js" class="headerlink" title="Node.js"></a>Node.js</h3><p>全局對象為<code>global</code></p>
<p>直接運用函數的話，this會指向global。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">function test() &#123;</div><div class="line">  this.x = 1;</div><div class="line">&#125;</div><div class="line"></div><div class="line">test();</div><div class="line"></div><div class="line">console.log(this.x); // 1</div></pre></td></tr></table></figure></p>
<p>如果是生成一個對象的話，this會指向這個對象而不是global。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">function Car() &#123;</div><div class="line">  this.color = &apos;red&apos;;</div><div class="line">&#125;</div><div class="line"></div><div class="line">var c = new Car();</div><div class="line"></div><div class="line">console.log(this.color); // undefined</div><div class="line">console.log(c.color); // red</div></pre></td></tr></table></figure></p>
<p>下次遇到問題的話，我還是MDN資料吧，裡面寫得很詳細。</p>
<h2 id="問題"><a href="#問題" class="headerlink" title="問題"></a>問題</h2><p>在Node.js中，為什麼this.global === this.global.global的返回值為true？</p>
<h2 id="延伸思考"><a href="#延伸思考" class="headerlink" title="延伸思考"></a>延伸思考</h2><ol>
<li>Function.prototype.apply()</li>
<li>Function.prototype.bind()</li>
</ol>
<h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><ol>
<li><a href="this MDN技術文">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/this</a></li>
<li><a href="Function.prototype.call MDN技術文">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/call</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;首先我們要理解調用函數的方法，最起碼可以用下面兩個方法：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;l
    
    </summary>
    
    
      <category term="Javascript" scheme="https://calpa.me/Tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>Hexo sitemap 簡單更改域名的方法</title>
    <link href="https://calpa.me/2017/02/26/hexo-change-site-url/"/>
    <id>https://calpa.me/2017/02/26/hexo-change-site-url/</id>
    <published>2017-02-26T06:45:00.000Z</published>
    <updated>2017-04-03T09:42:20.000Z</updated>
    
    <content type="html"><![CDATA[<p>如果沒有做任何配置的話，<code>hexo g</code>的時候會自動輸出一個<code>sitemap.xml</code>。<br>但是現在域名不同了，需要一點更改。。。</p>
<h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><ol>
<li>打開_config.yml</li>
<li>修改<code>url:</code>就可以了</li>
<li><code>hexo clean</code></li>
<li><code>hexo g</code></li>
</ol>
<h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><ol>
<li><a href="https://segmentfault.com/q/1010000004659915" rel="external nofollow noopener noreferrer" target="_blank">hexo-generator-sitemap 生成的sitemap如何配置自定义的域名？</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;如果沒有做任何配置的話，&lt;code&gt;hexo g&lt;/code&gt;的時候會自動輸出一個&lt;code&gt;sitemap.xml&lt;/code&gt;。&lt;br&gt;但是現在域名不同了，需要一點更改。。。&lt;/p&gt;
&lt;h2 id=&quot;方法&quot;&gt;&lt;a href=&quot;#方法&quot; class=&quot;headerlink
    
    </summary>
    
    
      <category term="Hexo" scheme="https://calpa.me/Tags/Hexo/"/>
    
      <category term="SEO" scheme="https://calpa.me/Tags/SEO/"/>
    
  </entry>
  
  <entry>
    <title>Hexo優化之為外部鏈接添加nofollow屬性</title>
    <link href="https://calpa.me/2017/02/26/hexo-seo-nofollow/"/>
    <id>https://calpa.me/2017/02/26/hexo-seo-nofollow/</id>
    <published>2017-02-25T16:11:03.000Z</published>
    <updated>2017-02-26T06:53:30.000Z</updated>
    
    <content type="html"><![CDATA[<p>我們的網頁通常會有很多鏈接，但是在爬蟲的時候可以分開哪一些是外部鏈接，哪一些是內部鏈接來優化搜尋結果。比如說增加<code>nofollow</code>標籤。nofollow是一個HTML標籤的屬性值，它可以告訴搜尋引擎不要追蹤這個鏈接。</p>
<h2 id="手動"><a href="#手動" class="headerlink" title="手動"></a>手動</h2><p>我們可以手動把每一個鏈接都加上nofollow屬性，比如這樣：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;a href=&quot;https://github.com/calpa&quot; rel=&quot;nofollow&quot;&gt;Calpa的Github主頁&lt;/a&gt;</div><div class="line">&lt;a href=&quot;https://github.com/calpa&quot; rel=&quot;external nofollow&quot;&gt;Calpa的Github主頁&lt;/a&gt;</div></pre></td></tr></table></figure></p>
<p><code>external nofollow</code>是更加專業的寫法，告訴搜尋引擎這是一個外部鏈接。</p>
<h2 id="自動"><a href="#自動" class="headerlink" title="自動"></a>自動</h2><p>我們也可以利用<code>hexo-autonofollow</code>插件來做這一件事情。<br>只需要輸入<code>npm install hexo-autonofollow --save</code>，然後在<code>_config.yml</code>裡面寫上下面就可以了：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">nofollow:</div><div class="line">    enable: true</div><div class="line">    exclude:</div><div class="line">    - exclude1.com</div><div class="line">    - exclude2.com</div></pre></td></tr></table></figure></p>
<p>exclude1.com和exclude2都是內部域名。</p>
<h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><ol>
<li><a href="https://liuzhichao.com/2016/hexo-auto-nofollow.html" rel="external nofollow noopener noreferrer" target="_blank">Hexo优化之为外部链接添加nofollow
</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我們的網頁通常會有很多鏈接，但是在爬蟲的時候可以分開哪一些是外部鏈接，哪一些是內部鏈接來優化搜尋結果。比如說增加&lt;code&gt;nofollow&lt;/code&gt;標籤。nofollow是一個HTML標籤的屬性值，它可以告訴搜尋引擎不要追蹤這個鏈接。&lt;/p&gt;
&lt;h2 id=&quot;手動&quot;&gt;
    
    </summary>
    
    
      <category term="Hexo" scheme="https://calpa.me/Tags/Hexo/"/>
    
      <category term="SEO" scheme="https://calpa.me/Tags/SEO/"/>
    
  </entry>
  
  <entry>
    <title>利用Github免費教育禮包更换.me域名</title>
    <link href="https://calpa.me/2017/02/23/github-edcation-package/"/>
    <id>https://calpa.me/2017/02/23/github-edcation-package/</id>
    <published>2017-02-23T02:00:00.000Z</published>
    <updated>2017-04-05T15:30:37.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://i.imgur.com/PmOA3IB.png?3" alt="Imgur"></p>
<p>現在如果你看網址列的話，你會發現現在域名改成了<code>calpa.me</code>，而且加上了一個綠色的鎖。</p>
<p><img src="https://dwa5x7aod66zk.cloudfront.net/assets/sdp-backpack-a64038716bf134f45e809ff86b9611fb97e41bbd2ccfa3181da73cf164d3c200.png" width="200px"></p>
<h2 id="Github-禮包"><a href="#Github-禮包" class="headerlink" title="Github 禮包"></a>Github 禮包</h2><p>如果你有學生身份的話，其中一個好處就是可以使用很多免費服務。比如說<a href="https://education.github.com/" rel="external nofollow noopener noreferrer" target="_blank">Github Education</a>禮包。它裡面有很多內容，但其中比較實用的有下面這些：</p>
<ol>
<li><a href="https://aws.amazon.com/?nc1=h_ls" rel="external nofollow noopener noreferrer" target="_blank">AWS Educate</a>: Up to $110 in bonus AWS credits for a total of $75-$150</li>
<li><a href="https://www.digitalocean.com/" rel="external nofollow noopener noreferrer" target="_blank">Digital Ocean</a>: Cloud hosting</li>
<li><a href="https://github.com/" rel="external nofollow noopener noreferrer" target="_blank">Github</a>: Unlimited private repositories (normally $7/month) while you are a student.</li>
<li><a href="https://www.namecheap.com/" rel="external nofollow noopener noreferrer" target="_blank">namecheap</a>: One year domain name registration on the .me TLD (normally $18.99/year)</li>
<li><a href="https://travis-ci.org/" rel="external nofollow noopener noreferrer" target="_blank">Travis CI</a>: Private builds (normally $69/month) while you’re a student</li>
<li><a href="https://www.udacity.com/" rel="external nofollow noopener noreferrer" target="_blank">UDACITY</a>: One month free access to any Nanodegree program (normally $199)</li>
</ol>
<p>既然namecheap提供一年免費<code>.me</code> 域名，不如我就用<code>calpa.me</code>取代之前<code>calpa.github.io</code>吧。</p>
<h2 id="namecheap"><a href="#namecheap" class="headerlink" title="namecheap"></a>namecheap</h2><p>在<a href="https://nc.me/" rel="external nofollow noopener noreferrer" target="_blank">namecheap</a>尋找<code>calpa.me</code>是否有人註冊，如果沒有的話就可以直接將.me加入購物車。</p>
<p><img src="http://i.imgur.com/24oQqGZ.png" alt="Imgur"><br>之後，在namecheap的dashboard會看到自己域名，然後點擊MANAGE按鈕。</p>
<p>在Advanced DNS裡面，我們需要增加兩筆<code>A</code>記錄：</p>
<ol>
<li>@ 192.30.252.153</li>
<li>@ 192.30.252.154</li>
</ol>
<p>之後利用<code>dig +noall +answer username.me</code>命令就可以看到記錄如上一樣。</p>
<h2 id="HTTPS"><a href="#HTTPS" class="headerlink" title="HTTPS"></a>HTTPS</h2><p>如果要使用HTTPS，可以利用免費的Cloudflare服務。</p>
<ol>
<li>註冊Cloudflare</li>
<li>打開namecheap的domain頁，將nameserver改成Custome DNS，然後加入<code>bella.ns.cloudflare.com</code>和<code>igor.ns.cloudflare.com</code>。</li>
</ol>
<h2 id="感想"><a href="#感想" class="headerlink" title="感想"></a>感想</h2><p>添加新的域名其實不難，只是需要很多時間去等待服務器修改DNS記錄。。。</p>
<h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><ol>
<li><a href="https://help.github.com/articles/setting-up-an-apex-domain/#configuring-a-records-with-your-dns-provider" rel="external nofollow noopener noreferrer" target="_blank">Configuring A records with your DNS provider - Github</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://i.imgur.com/PmOA3IB.png?3&quot; alt=&quot;Imgur&quot;&gt;&lt;/p&gt;
&lt;p&gt;現在如果你看網址列的話，你會發現現在域名改成了&lt;code&gt;calpa.me&lt;/code&gt;，而且加上了一個綠色的鎖。&lt;/p&gt;
&lt;p&gt;&lt;img src
    
    </summary>
    
    
      <category term="Github" scheme="https://calpa.me/Tags/Github/"/>
    
  </entry>
  
</feed>
