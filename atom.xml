<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Calpa</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://calpa.me/"/>
  <updated>2017-03-27T07:22:14.000Z</updated>
  <id>https://calpa.me/</id>
  
  <author>
    <name>Calpa</name>
    <email>calpaliu@gmail.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Interview後記</title>
    <link href="https://calpa.me/2017/03/27/interview/"/>
    <id>https://calpa.me/2017/03/27/interview/</id>
    <published>2017-03-27T06:42:00.000Z</published>
    <updated>2017-03-27T07:22:14.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="面試問題："><a href="#面試問題：" class="headerlink" title="面試問題："></a>面試問題：</h2><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><ol>
<li>請自我介紹</li>
<li>為什麼會從前端開始？</li>
<li>請畫出現在項目的技術圖，並簡單介紹一下</li>
<li>你最近在探索什麼新技術？</li>
</ol>
<h3 id="技術"><a href="#技術" class="headerlink" title="技術"></a>技術</h3><ol>
<li>NoSQL和SQL的比較，優點和缺點？</li>
<li>哪一個性能比較好？</li>
<li>HTTPS如何加密</li>
</ol>
<h2 id="感想"><a href="#感想" class="headerlink" title="感想"></a>感想</h2><p>原本預約了兩點面試的，結果我一點多就去到，面試官讓我在一旁坐坐。感覺這次面試氣氛不錯，但是不知道為什麼每次面試，大多時間都是問Database的問題。。。</p>
<h2 id="行動"><a href="#行動" class="headerlink" title="行動"></a>行動</h2><p>Learning by Coding，動手做項目學習吧。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;面試問題：&quot;&gt;&lt;a href=&quot;#面試問題：&quot; class=&quot;headerlink&quot; title=&quot;面試問題：&quot;&gt;&lt;/a&gt;面試問題：&lt;/h2&gt;&lt;h3 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背
    
    </summary>
    
    
      <category term="Interview" scheme="https://calpa.me/Tags/Interview/"/>
    
  </entry>
  
  <entry>
    <title>Javascript中的this入門</title>
    <link href="https://calpa.me/2017/03/25/js-this/"/>
    <id>https://calpa.me/2017/03/25/js-this/</id>
    <published>2017-03-25T04:44:00.000Z</published>
    <updated>2017-03-25T12:04:02.000Z</updated>
    
    <content type="html"><![CDATA[<p>首先我們要理解調用函數的方法，最起碼可以用下面兩個方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">func(arg1, arg2);</div><div class="line">func.call(thisArg, arg1, arg2);</div></pre></td></tr></table></figure></p>
<p>之前我也沒怎麼見過後者，基本上都是直接call func的。後者<code>func(arg1, arg2)</code> 等於 <code>func.call(undefined, arg1, arg2)</code>。簡單來說，this就是thisArg。如果thisArg沒有定義的話，它會被定義為一個全局對象，比如說global。在MDN的文檔有這一句: <code>if the method is a function in non-strict mode code, null and undefined will be replaced with the global object and primitive values will be converted to objects</code>。</p>
<p>如果不想要this是global的話，給予thisArg一個對象就可以了：<br><code>func.call(obj, arg1, arg2)</code></p>
<h2 id="全局上下文"><a href="#全局上下文" class="headerlink" title="全局上下文"></a>全局上下文</h2><p>在全局中，無論是否在嚴格模式下(Strict mode)，<code>this</code>都是代表全局對象。</p>
<h3 id="瀏覽器："><a href="#瀏覽器：" class="headerlink" title="瀏覽器："></a>瀏覽器：</h3><ol>
<li><code>this.document</code>指向<code>document</code></li>
<li>全局對象為<code>window</code></li>
</ol>
<h3 id="Node-js"><a href="#Node-js" class="headerlink" title="Node.js"></a>Node.js</h3><p>全局對象為<code>global</code></p>
<p>直接運用函數的話，this會指向global。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">function test() &#123;</div><div class="line">  this.x = 1;</div><div class="line">&#125;</div><div class="line"></div><div class="line">test();</div><div class="line"></div><div class="line">console.log(this.x); // 1</div></pre></td></tr></table></figure></p>
<p>如果是生成一個對象的話，this會指向這個對象而不是global。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">function Car() &#123;</div><div class="line">  this.color = &apos;red&apos;;</div><div class="line">&#125;</div><div class="line"></div><div class="line">var c = new Car();</div><div class="line"></div><div class="line">console.log(this.color); // undefined</div><div class="line">console.log(c.color); // red</div></pre></td></tr></table></figure></p>
<p>下次遇到問題的話，我還是MDN資料吧，裡面寫得很詳細。</p>
<h2 id="問題"><a href="#問題" class="headerlink" title="問題"></a>問題</h2><p>在Node.js中，為什麼this.global === this.global.global的返回值為true？</p>
<h2 id="延伸思考"><a href="#延伸思考" class="headerlink" title="延伸思考"></a>延伸思考</h2><ol>
<li>Function.prototype.apply()</li>
<li>Function.prototype.bind()</li>
</ol>
<h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><ol>
<li><a href="this MDN技術文">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/this</a></li>
<li><a href="Function.prototype.call MDN技術文">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/call</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;首先我們要理解調用函數的方法，最起碼可以用下面兩個方法：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;l
    
    </summary>
    
    
      <category term="Javascript" scheme="https://calpa.me/Tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>簡單更改sitemap域名的方法</title>
    <link href="https://calpa.me/2017/02/26/hexo-url/"/>
    <id>https://calpa.me/2017/02/26/hexo-url/</id>
    <published>2017-02-26T06:45:00.000Z</published>
    <updated>2017-02-26T06:54:20.000Z</updated>
    
    <content type="html"><![CDATA[<p>如果沒有做任何配置的話，<code>hexo g</code>的時候會自動輸出一個<code>sitemap.xml</code>。<br>但是現在域名不同了，需要一點更改。。。</p>
<h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><ol>
<li>打開_config.yml</li>
<li>修改<code>url:</code>就可以了</li>
<li><code>hexo clean</code></li>
<li><code>hexo g</code></li>
</ol>
<h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><ol>
<li><a href="https://segmentfault.com/q/1010000004659915" rel="external nofollow noopener noreferrer" target="_blank">hexo-generator-sitemap 生成的sitemap如何配置自定义的域名？</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;如果沒有做任何配置的話，&lt;code&gt;hexo g&lt;/code&gt;的時候會自動輸出一個&lt;code&gt;sitemap.xml&lt;/code&gt;。&lt;br&gt;但是現在域名不同了，需要一點更改。。。&lt;/p&gt;
&lt;h2 id=&quot;方法&quot;&gt;&lt;a href=&quot;#方法&quot; class=&quot;headerlink
    
    </summary>
    
    
      <category term="Hexo" scheme="https://calpa.me/Tags/Hexo/"/>
    
      <category term="SEO" scheme="https://calpa.me/Tags/SEO/"/>
    
  </entry>
  
  <entry>
    <title>Hexo優化之為外部鏈接添加nofollow屬性</title>
    <link href="https://calpa.me/2017/02/26/hexo-seo-nofollow/"/>
    <id>https://calpa.me/2017/02/26/hexo-seo-nofollow/</id>
    <published>2017-02-25T16:11:03.000Z</published>
    <updated>2017-02-26T06:53:30.000Z</updated>
    
    <content type="html"><![CDATA[<p>我們的網頁通常會有很多鏈接，但是在爬蟲的時候可以分開哪一些是外部鏈接，哪一些是內部鏈接來優化搜尋結果。比如說增加<code>nofollow</code>標籤。nofollow是一個HTML標籤的屬性值，它可以告訴搜尋引擎不要追蹤這個鏈接。</p>
<h2 id="手動"><a href="#手動" class="headerlink" title="手動"></a>手動</h2><p>我們可以手動把每一個鏈接都加上nofollow屬性，比如這樣：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;a href=&quot;https://github.com/calpa&quot; rel=&quot;nofollow&quot;&gt;Calpa的Github主頁&lt;/a&gt;</div><div class="line">&lt;a href=&quot;https://github.com/calpa&quot; rel=&quot;external nofollow&quot;&gt;Calpa的Github主頁&lt;/a&gt;</div></pre></td></tr></table></figure></p>
<p><code>external nofollow</code>是更加專業的寫法，告訴搜尋引擎這是一個外部鏈接。</p>
<h2 id="自動"><a href="#自動" class="headerlink" title="自動"></a>自動</h2><p>我們也可以利用<code>hexo-autonofollow</code>插件來做這一件事情。<br>只需要輸入<code>npm install hexo-autonofollow --save</code>，然後在<code>_config.yml</code>裡面寫上下面就可以了：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">nofollow:</div><div class="line">    enable: true</div><div class="line">    exclude:</div><div class="line">    - exclude1.com</div><div class="line">    - exclude2.com</div></pre></td></tr></table></figure></p>
<p>exclude1.com和exclude2都是內部域名。</p>
<h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><ol>
<li><a href="https://liuzhichao.com/2016/hexo-auto-nofollow.html" rel="external nofollow noopener noreferrer" target="_blank">Hexo优化之为外部链接添加nofollow
</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我們的網頁通常會有很多鏈接，但是在爬蟲的時候可以分開哪一些是外部鏈接，哪一些是內部鏈接來優化搜尋結果。比如說增加&lt;code&gt;nofollow&lt;/code&gt;標籤。nofollow是一個HTML標籤的屬性值，它可以告訴搜尋引擎不要追蹤這個鏈接。&lt;/p&gt;
&lt;h2 id=&quot;手動&quot;&gt;
    
    </summary>
    
    
      <category term="Hexo" scheme="https://calpa.me/Tags/Hexo/"/>
    
      <category term="SEO" scheme="https://calpa.me/Tags/SEO/"/>
    
  </entry>
  
  <entry>
    <title>利用Github教育禮包添加免費域名</title>
    <link href="https://calpa.me/2017/02/23/github-edcation-package/"/>
    <id>https://calpa.me/2017/02/23/github-edcation-package/</id>
    <published>2017-02-23T02:00:00.000Z</published>
    <updated>2017-02-26T06:52:28.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://i.imgur.com/PmOA3IB.png?3" alt="Imgur"></p>
<p>現在如果你看網址列的話，你會發現現在域名改成了<code>calpa.me</code>，而且加上了一個綠色的鎖。</p>
<p><img src="https://dwa5x7aod66zk.cloudfront.net/assets/sdp-backpack-a64038716bf134f45e809ff86b9611fb97e41bbd2ccfa3181da73cf164d3c200.png" width="200px"></p>
<h2 id="Github-禮包"><a href="#Github-禮包" class="headerlink" title="Github 禮包"></a>Github 禮包</h2><p>如果你有學生身份的話，其中一個好處就是可以使用很多免費服務。比如說<a href="https://education.github.com/" rel="external nofollow noopener noreferrer" target="_blank">Github Education</a>禮包。它裡面有很多內容，但其中比較實用的有下面這些：</p>
<ol>
<li><a href="https://aws.amazon.com/?nc1=h_ls" rel="external nofollow noopener noreferrer" target="_blank">AWS Educate</a>: Up to $110 in bonus AWS credits for a total of $75-$150</li>
<li><a href="https://www.digitalocean.com/" rel="external nofollow noopener noreferrer" target="_blank">Digital Ocean</a>: Cloud hosting</li>
<li><a href="https://github.com/" rel="external nofollow noopener noreferrer" target="_blank">Github</a>: Unlimited private repositories (normally $7/month) while you are a student.</li>
<li><a href="https://www.namecheap.com/" rel="external nofollow noopener noreferrer" target="_blank">namecheap</a>: One year domain name registration on the .me TLD (normally $18.99/year)</li>
<li><a href="https://travis-ci.org/" rel="external nofollow noopener noreferrer" target="_blank">Travis CI</a>: Private builds (normally $69/month) while you’re a student</li>
<li><a href="https://www.udacity.com/" rel="external nofollow noopener noreferrer" target="_blank">UDACITY</a>: One month free access to any Nanodegree program (normally $199)</li>
</ol>
<p>既然namecheap提供一年免費<code>.me</code> 域名，不如我就用<code>calpa.me</code>取代之前<code>calpa.github.io</code>吧。</p>
<h2 id="namecheap"><a href="#namecheap" class="headerlink" title="namecheap"></a>namecheap</h2><p>在<a href="https://nc.me/" rel="external nofollow noopener noreferrer" target="_blank">namecheap</a>尋找<code>calpa.me</code>是否有人註冊，如果沒有的話就可以直接將.me加入購物車。</p>
<p><img src="http://i.imgur.com/24oQqGZ.png" alt="Imgur"><br>之後，在namecheap的dashboard會看到自己域名，然後點擊MANAGE按鈕。</p>
<p>在Advanced DNS裡面，我們需要增加兩筆<code>A</code>記錄：</p>
<ol>
<li>@ 192.30.252.153</li>
<li>@ 192.30.252.154</li>
</ol>
<p>之後利用<code>dig +noall +answer username.me</code>命令就可以看到記錄如上一樣。</p>
<h2 id="HTTPS"><a href="#HTTPS" class="headerlink" title="HTTPS"></a>HTTPS</h2><p>如果要使用HTTPS，可以利用免費的Cloudflare服務。</p>
<ol>
<li>註冊Cloudflare</li>
<li>打開namecheap的domain頁，將nameserver改成Custome DNS，然後加入<code>bella.ns.cloudflare.com</code>和<code>igor.ns.cloudflare.com</code>。</li>
</ol>
<h2 id="感想"><a href="#感想" class="headerlink" title="感想"></a>感想</h2><p>添加新的域名其實不難，只是需要很多時間去等待服務器修改DNS記錄。。。</p>
<h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><ol>
<li><a href="https://help.github.com/articles/setting-up-an-apex-domain/#configuring-a-records-with-your-dns-provider" rel="external nofollow noopener noreferrer" target="_blank">Configuring A records with your DNS provider - Github</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://i.imgur.com/PmOA3IB.png?3&quot; alt=&quot;Imgur&quot;&gt;&lt;/p&gt;
&lt;p&gt;現在如果你看網址列的話，你會發現現在域名改成了&lt;code&gt;calpa.me&lt;/code&gt;，而且加上了一個綠色的鎖。&lt;/p&gt;
&lt;p&gt;&lt;img src
    
    </summary>
    
    
      <category term="Github" scheme="https://calpa.me/Tags/Github/"/>
    
      <category term="Free" scheme="https://calpa.me/Tags/Free/"/>
    
  </entry>
  
  <entry>
    <title>使用Web Notification推送通知</title>
    <link href="https://calpa.me/2017/02/22/hello/"/>
    <id>https://calpa.me/2017/02/22/hello/</id>
    <published>2017-02-22T07:20:41.000Z</published>
    <updated>2017-02-22T08:14:33.000Z</updated>
    
    <content type="html"><![CDATA[<p>如果要推送通知的話，我們首先要請求權限：<code>Notification.requestPermission()</code></p>
<p>之後檢查<code>Notification.permission</code>來查看是否擁有權限。該值會是下面三個其中之一：</p>
<ol>
<li>default: 從未詢問用戶</li>
<li>granted: 用戶授權顯示通知的權限</li>
<li>denied: 用戶不授權。。。</li>
</ol>
<p>創造一個通知很簡單，<code>new Notification(text)</code>可以了。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">var text = &quot;Hello, world&quot;;</div><div class="line">new Notification(text);</div></pre></td></tr></table></figure></p>
<p><img src="http://i.imgur.com/l1lVFXZ.png" alt="Imgur"></p>
<p>沒有圖片的話會比較空虛，可以加入options。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">function push() &#123;</div><div class="line">  var title = &quot;這是一個標題。。。&quot;;</div><div class="line">	var options = &#123;</div><div class="line">		body: &quot;Calpa 寫了一篇文章XD&quot;,</div><div class="line">		icon: &quot;https://calpa.github.io/img/profile.png&quot;</div><div class="line">	&#125;</div><div class="line">	var n = new Notification(title, options);</div><div class="line">&#125;</div><div class="line"></div><div class="line">push();</div></pre></td></tr></table></figure>
<p><img src="http://i.imgur.com/uuNPUoB.png" alt="Imgur"></p>
<p>如果要增加與用戶的互動，可以利用Notification的事件：</p>
<ol>
<li>onshow</li>
<li>onclick</li>
<li>onclose</li>
<li>onerror</li>
</ol>
<p>我們可以監聽<code>onclick</code>，當用戶點擊通知，瀏覽器就會跳到目標頁面。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">n.onclick = (event) =&gt; &#123;</div><div class="line">	event.preventDefault();</div><div class="line">	window.open(&apos;https://calpa.github.io/&apos;, &apos;_blank&apos;);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><ol>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/API/Notifications_API/Using_the_Notifications_API" rel="external nofollow noopener noreferrer" target="_blank">Using the Notification API</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;如果要推送通知的話，我們首先要請求權限：&lt;code&gt;Notification.requestPermission()&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;之後檢查&lt;code&gt;Notification.permission&lt;/code&gt;來查看是否擁有權限。該值會是下面三個其中之一：&lt;
    
    </summary>
    
    
      <category term="Web" scheme="https://calpa.me/Tags/Web/"/>
    
  </entry>
  
  <entry>
    <title>Javascript中的Closure入門</title>
    <link href="https://calpa.me/2017/02/19/js-closure/"/>
    <id>https://calpa.me/2017/02/19/js-closure/</id>
    <published>2017-02-19T07:12:00.000Z</published>
    <updated>2017-02-21T05:35:03.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="為什麼會有這篇文章"><a href="#為什麼會有這篇文章" class="headerlink" title="為什麼會有這篇文章"></a>為什麼會有這篇文章</h2><p>打好基本功是很重要的。。。</p>
<h2 id="最簡單的閉包"><a href="#最簡單的閉包" class="headerlink" title="最簡單的閉包"></a>最簡單的閉包</h2><ol>
<li>先定義一個Function A</li>
<li>在A的裡面定義一個Function B</li>
<li>在A中返回B</li>
<li>執行A(), 將A()的返回值賦予給b</li>
<li>執行b()</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">function A() &#123;</div><div class="line">  function B() &#123;</div><div class="line">    console.log(&quot;Hello, world!&quot;);</div><div class="line">  &#125;</div><div class="line">  return B;</div><div class="line">&#125;</div><div class="line">var b = A();</div><div class="line">b(); // Hello World</div></pre></td></tr></table></figure>
<h2 id="加法-ES6"><a href="#加法-ES6" class="headerlink" title="加法 - ES6"></a>加法 - ES6</h2><ol>
<li>先定義adder()</li>
<li>定義匿名函數</li>
<li>返回x + y</li>
<li>定義變量 add5</li>
<li>執行 add5()</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">let adder = (x) =&gt; (y) =&gt; x + y</div><div class="line"></div><div class="line">let add5 = adder(5);</div><div class="line">let add10 = adder(10);</div><div class="line"></div><div class="line">console.log(add5(7)); // 12</div><div class="line">console.log(add10(7)); // 17</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;為什麼會有這篇文章&quot;&gt;&lt;a href=&quot;#為什麼會有這篇文章&quot; class=&quot;headerlink&quot; title=&quot;為什麼會有這篇文章&quot;&gt;&lt;/a&gt;為什麼會有這篇文章&lt;/h2&gt;&lt;p&gt;打好基本功是很重要的。。。&lt;/p&gt;
&lt;h2 id=&quot;最簡單的閉包&quot;&gt;&lt;a href=
    
    </summary>
    
    
      <category term="Javascript" scheme="https://calpa.me/Tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>SuperCharger Hackathon後記</title>
    <link href="https://calpa.me/2017/02/19/supercharger-hackathon/"/>
    <id>https://calpa.me/2017/02/19/supercharger-hackathon/</id>
    <published>2017-02-19T07:12:00.000Z</published>
    <updated>2017-02-21T05:36:19.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://i.imgur.com/7EMhgpx.jpg" alt="Imgur"></p>
<p>如果計上這次比賽的話，我已經是第五次參加這一類編程比賽。與過往的比賽不同，合作的對象不再是大學生，而是兩間Start-up公司。在這次比賽中，我選擇<a href="http://kyc-chain.com/" rel="external nofollow noopener noreferrer" target="_blank">KYC-Chain</a>、<a href="https://www.clare.ai/" rel="external nofollow noopener noreferrer" target="_blank">Clare.ai</a>兩間公司組成的隊伍。KYC-Chain透過<a href="https://airtable.com/" rel="external nofollow noopener noreferrer" target="_blank">Airtable</a>提供一些常見的用戶問題與答案，而Clare.ai則負責寫code。</p>
<p>Airtable有API教學，可以用node.js增加、移除、修改或者獲取資料。</p>
<h2 id="現有問題"><a href="#現有問題" class="headerlink" title="現有問題"></a>現有問題</h2><p>如果用戶想了解一些資訊，他需要經過很多過程才能獲取答案。</p>
<h2 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h2><p>利用Chatbot，用戶只需要說出自己的問題便能查詢資料，例如Identity Card，Regulatory Law等資訊。</p>
<h2 id="將來發展"><a href="#將來發展" class="headerlink" title="將來發展"></a>將來發展</h2><ol>
<li>獲取申請表格</li>
<li>自動填寫各類文件</li>
</ol>
<h2 id="感想"><a href="#感想" class="headerlink" title="感想"></a>感想</h2><p>我本來以為要從零開始架構一個Chatbot，原來可以直接用Api.ai。<br>大多數時間都是和一些在外面工作的人交流。。。</p>
<h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><ol>
<li>我自己 XD</li>
<li><a href="https://www.facebook.com/events/704583943057523/" rel="external nofollow noopener noreferrer" target="_blank">SuperCharger FinTech Hackathon - Facebook 活動頁</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://i.imgur.com/7EMhgpx.jpg&quot; alt=&quot;Imgur&quot;&gt;&lt;/p&gt;
&lt;p&gt;如果計上這次比賽的話，我已經是第五次參加這一類編程比賽。與過往的比賽不同，合作的對象不再是大學生，而是兩間Start-up公司。在這次比賽中，我選擇&lt;
    
    </summary>
    
    
      <category term="Hackathon" scheme="https://calpa.me/Tags/Hackathon/"/>
    
  </entry>
  
  <entry>
    <title>Javascript中的True與False</title>
    <link href="https://calpa.me/2017/02/02/true-false/"/>
    <id>https://calpa.me/2017/02/02/true-false/</id>
    <published>2017-02-02T15:19:53.000Z</published>
    <updated>2017-02-02T12:55:52.000Z</updated>
    
    <content type="html"><![CDATA[<p>這幾天用<a href="https://www.enki.com/" rel="external nofollow noopener noreferrer" target="_blank">Enki</a>來學習Javascript，感覺不錯，<strong>You can’t handle the truth!</strong>有一些特別True/False例子。這裡簡單記錄一下。</p>
<p>最簡單的測試方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">function test(something)&#123;</div><div class="line">  if (something) &#123;</div><div class="line">    console.log(something + &apos; is true.&apos;);</div><div class="line">  &#125; else &#123;</div><div class="line">    console.log(something + &apos; is false.&apos;);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h1 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h1><h2 id="Truthy"><a href="#Truthy" class="headerlink" title="Truthy"></a>Truthy</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">true &lt;- true當然是true...</div><div class="line">[1][0]</div><div class="line">new Date()</div><div class="line">new Number(0)</div><div class="line">Object</div><div class="line">Infinity</div><div class="line">[]</div></pre></td></tr></table></figure>
<p>以下都是[object Object]:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&#123;a: false&#125;</div><div class="line">&#123;&#125;</div></pre></td></tr></table></figure></p>
<h2 id="Falsy"><a href="#Falsy" class="headerlink" title="Falsy"></a>Falsy</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">false &lt;- false當然是false...</div><div class="line">undefined</div><div class="line">&apos;&apos;</div><div class="line">&quot;&quot;</div><div class="line">[1][1] &lt;- undefined</div><div class="line">NaN</div><div class="line">null</div><div class="line">&#123;&#125;.someKey</div><div class="line">0</div><div class="line">[].length &lt;- 這個是0，所以出false</div></pre></td></tr></table></figure>
<p>值得注意的是[]，它本身會是<code>true</code>，但如果用<code>[] == true</code>的話會輸出<code>false</code>，<br>而<code>[] == false</code>的話會輸出<code>true</code>。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;這幾天用&lt;a href=&quot;https://www.enki.com/&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;Enki&lt;/a&gt;來學習Javascript，感覺不錯，&lt;strong&gt;You ca
    
    </summary>
    
    
      <category term="Javascript" scheme="https://calpa.me/Tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>HTML5 Web Storage</title>
    <link href="https://calpa.me/2017/01/20/localstorage/"/>
    <id>https://calpa.me/2017/01/20/localstorage/</id>
    <published>2017-01-20T11:37:38.000Z</published>
    <updated>2017-02-26T07:20:40.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Storage"><a href="#Storage" class="headerlink" title="Storage"></a>Storage</h1><ul>
<li>HTML5 的 <strong>Web Storage</strong> 包括了兩種儲存方式：<strong>localStorage</strong>及<strong>sessionStorage</strong>。</li>
<li>儲存在Storage中的資料，以key-value pair的形式保存。</li>
<li>Cookie的佔用空間非常小，大小限制于4KB左右，常見的用途是保存賬號登錄信息與登錄狀態。</li>
<li>使用Storage物件時，可以寫<code>localStorage</code>代替<code>window.localStorage</code>。</li>
</ul>
<h2 id="localStorage"><a href="#localStorage" class="headerlink" title="localStorage"></a>localStorage</h2><p>即使用戶關閉瀏覽器，頁面數據依然存在。下一次用戶打開該頁面，便能夠使用該資料。舉個例子，當localStorage擁有userdata，瀏覽器可以獲取用戶資料，瀏覽器會導航用戶到登入後的畫面。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">if (localStorage.getItem(&apos;userdata&apos;)) &#123;</div><div class="line">  login();</div><div class="line">&#125; else &#123;</div><div class="line">  register();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="sessionStorage"><a href="#sessionStorage" class="headerlink" title="sessionStorage"></a>sessionStorage</h2><p>sessionStorage與localStorage相似，但如果用戶關閉當前頁面，sessionStorage中的數據就會被清空。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">window.sessionStorage.setItem(&quot;username&quot;, &quot;calpa&quot;);</div><div class="line">window.sessionStorage.getItem(&quot;username&quot;); // calpa</div></pre></td></tr></table></figure>
<h1 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h1><h2 id="儲存"><a href="#儲存" class="headerlink" title="儲存"></a>儲存</h2><p>儲存資料的時候，可以利用Storage物件內的<code>setItem()</code>方法。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">localStorage.setItem(3, 3);</div><div class="line">sessionStorage.setItem(&quot;username&quot;, &quot;calpa&quot;);</div></pre></td></tr></table></figure></p>
<h2 id="獲取"><a href="#獲取" class="headerlink" title="獲取"></a>獲取</h2><p>獲取資料的時候，則會用到<code>getItem()</code>方法。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">let username = localStorage.getItem(&quot;username&quot;);</div></pre></td></tr></table></figure></p>
<p>如果key不是string的話，獲取資料時會出現問題。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">localStorage.3 = 3; // Uncaught SyntaxError: Unexpected number</div></pre></td></tr></table></figure></p>
<h2 id="清除"><a href="#清除" class="headerlink" title="清除"></a>清除</h2><p>清除某個資料，可以用<code>removeItem()</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">window.localStorage.removeItem(&quot;username&quot;);</div></pre></td></tr></table></figure></p>
<p>清除所有資料，可以用<code>clear()</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">window.localStorage.clear();</div><div class="line">window.sessionStorage.clear();</div></pre></td></tr></table></figure></p>
<h1 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h1><ol>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Storage_API/Using_the_Web_Storage_API" rel="external nofollow noopener noreferrer" target="_blank">Using the Web Storage API</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Storage&quot;&gt;&lt;a href=&quot;#Storage&quot; class=&quot;headerlink&quot; title=&quot;Storage&quot;&gt;&lt;/a&gt;Storage&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;HTML5 的 &lt;strong&gt;Web Storage&lt;/strong&gt; 包括了兩種儲存
    
    </summary>
    
    
      <category term="Web" scheme="https://calpa.me/Tags/Web/"/>
    
      <category term="Javascript" scheme="https://calpa.me/Tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>初探Javascript變量提升</title>
    <link href="https://calpa.me/2017/01/14/hoisting/"/>
    <id>https://calpa.me/2017/01/14/hoisting/</id>
    <published>2017-01-14T12:09:35.000Z</published>
    <updated>2017-01-14T13:08:48.000Z</updated>
    
    <content type="html"><![CDATA[<p>在Javascript中，hoisting是一個容易犯錯的地方。<br>在一段scope裡面，沒有定義變量就使用變量的話會彈出Reference Error。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"> // ReferenceError: poi is not defined</div><div class="line">console.log(poi);</div></pre></td></tr></table></figure></p>
<hr>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">var name;</div><div class="line">console.log(name); // undefined</div><div class="line">name = &apos;calpa&apos;</div><div class="line">console.log(name); // calpa</div></pre></td></tr></table></figure>
<p>由於Javascript的解釋器會提前把所有變量函數定義，所以上面這一段代碼會變成這一段：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">console.log(name); // undefined</div><div class="line">var name = &apos;calpa&apos;;</div><div class="line">console.log(name); // calpa</div></pre></td></tr></table></figure></p>
<p>另外，Javascript也會出現這樣的問題。。。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">var name = &apos;calpa&apos;;</div><div class="line">(function () &#123;</div><div class="line">    // My name is undefined</div><div class="line">    console.log(&quot;My name is &quot; + name); </div><div class="line">    var name = &apos;poi&apos;;</div><div class="line">    // My name is poi</div><div class="line">    console.log(&quot;My name is &quot; + name); // poi</div><div class="line">&#125;)();</div></pre></td></tr></table></figure></p>
<p>簡單來說，在寫Javascript時，我們應該提前在檔案開始位置定義變量。</p>
<hr>
<p>參考資料：</p>
<ol>
<li><a href="http://adripofjavascript.com/blog/drips/variable-and-function-hoisting" rel="external nofollow noopener noreferrer" target="_blank">Variable and Function Hoisting in JavaScript</a></li>
<li><a href="http://jinlong.github.io/2013/09/11/var-and-fun-hoisting/" rel="external nofollow noopener noreferrer" target="_blank">JavaScript 中的变量和函数提升</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在Javascript中，hoisting是一個容易犯錯的地方。&lt;br&gt;在一段scope裡面，沒有定義變量就使用變量的話會彈出Reference Error。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;
    
    </summary>
    
    
      <category term="Javascript" scheme="https://calpa.me/Tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>建立一個404 Page</title>
    <link href="https://calpa.me/2017/01/08/hexo-404-page/"/>
    <id>https://calpa.me/2017/01/08/hexo-404-page/</id>
    <published>2017-01-08T03:02:58.000Z</published>
    <updated>2017-02-22T15:50:13.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="建立方法"><a href="#建立方法" class="headerlink" title="建立方法"></a>建立方法</h1><ol>
<li>在Terminal輸入 <code>hexo new page 404</code></li>
<li>然後打開儲存404檔案的位置，比如說：<code>/source/404/index.md</code></li>
<li>在這個檔案最頂部寫下<code>permalink: /404.html</code>就可以了。</li>
</ol>
<h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><ol>
<li><a href="https://help.github.com/articles/creating-a-custom-404-page-for-your-github-pages-site/" rel="external nofollow noopener noreferrer" target="_blank">Creating a custom 404 page for your GitHub Pages site</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;建立方法&quot;&gt;&lt;a href=&quot;#建立方法&quot; class=&quot;headerlink&quot; title=&quot;建立方法&quot;&gt;&lt;/a&gt;建立方法&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;在Terminal輸入 &lt;code&gt;hexo new page 404&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;然後打開
    
    </summary>
    
    
      <category term="Hexo" scheme="https://calpa.me/Tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>Github上的README.md</title>
    <link href="https://calpa.me/2017/01/08/readme/"/>
    <id>https://calpa.me/2017/01/08/readme/</id>
    <published>2017-01-08T03:02:58.000Z</published>
    <updated>2017-02-22T15:50:10.000Z</updated>
    
    <content type="html"><![CDATA[<p>Hexo在渲染的時候默認是把source下面所有的.md檔案渲染成html，這樣的話會覆蓋掉Github上的CNAME和README.md。但是我又不想這樣，我想Github Repo下面可以直接看到這個blog的README.md內容。</p>
<p>所以我就修改Hexo根目錄下的_config.yml：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">skip_render: README.md</div></pre></td></tr></table></figure></p>
<p>然後輸入以往部署Hexo的指令就可以。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ hexo g</div><div class="line">$ hexo d</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Hexo在渲染的時候默認是把source下面所有的.md檔案渲染成html，這樣的話會覆蓋掉Github上的CNAME和README.md。但是我又不想這樣，我想Github Repo下面可以直接看到這個blog的README.md內容。&lt;/p&gt;
&lt;p&gt;所以我就修改Hexo
    
    </summary>
    
    
      <category term="Hexo" scheme="https://calpa.me/Tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://calpa.me/2017/01/08/hello-world/"/>
    <id>https://calpa.me/2017/01/08/hello-world/</id>
    <published>2017-01-08T02:00:00.000Z</published>
    <updated>2017-02-26T07:18:54.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h1><p>這是一個用hexo建構的blog，Hexo的主題是<a href="https://github.com/Haojen/hexo-theme-Anisina" rel="external nofollow noopener noreferrer" target="_blank">Anisina</a></p>
<p>我修改了<code>_config.yml</code>裡面的<code>post-default-img</code> 以及 <code>post-default-img-mobile</code>。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Hello-World&quot;&gt;&lt;a href=&quot;#Hello-World&quot; class=&quot;headerlink&quot; title=&quot;Hello World&quot;&gt;&lt;/a&gt;Hello World&lt;/h1&gt;&lt;p&gt;這是一個用hexo建構的blog，Hexo的主題是&lt;a href=&quot;
    
    </summary>
    
    
      <category term="Hexo" scheme="https://calpa.me/Tags/Hexo/"/>
    
  </entry>
  
</feed>
